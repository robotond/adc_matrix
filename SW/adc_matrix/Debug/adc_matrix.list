
adc_matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d8  080048d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080048d8  080048d8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048d8  080048d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000070  08004950  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08004950  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d69c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203f  00000000  00000000  0002d734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002f778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  00030210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d19  00000000  00000000  00030bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da62  00000000  00000000  000478e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef92  00000000  00000000  0005534b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e42dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002890  00000000  00000000  000e4330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004798 	.word	0x08004798

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08004798 	.word	0x08004798

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <select_adc_channel>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void select_adc_channel(int channel)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000408:	230c      	movs	r3, #12
 800040a:	18fb      	adds	r3, r7, r3
 800040c:	0018      	movs	r0, r3
 800040e:	230c      	movs	r3, #12
 8000410:	001a      	movs	r2, r3
 8000412:	2100      	movs	r1, #0
 8000414:	f003 fd4e 	bl	8003eb4 <memset>
//////////    sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
    switch (channel)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2b04      	cmp	r3, #4
 800041c:	d81e      	bhi.n	800045c <select_adc_channel+0x5c>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	009a      	lsls	r2, r3, #2
 8000422:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <select_adc_channel+0x90>)
 8000424:	18d3      	adds	r3, r2, r3
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	469f      	mov	pc, r3
    {
        case 0:
            sConfig.Channel = ADC_CHANNEL_0;
 800042a:	230c      	movs	r3, #12
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	2201      	movs	r2, #1
 8000430:	601a      	str	r2, [r3, #0]
              break;
 8000432:	e017      	b.n	8000464 <select_adc_channel+0x64>
        case 1:
            sConfig.Channel = ADC_CHANNEL_1;
 8000434:	230c      	movs	r3, #12
 8000436:	18fb      	adds	r3, r7, r3
 8000438:	4a16      	ldr	r2, [pc, #88]	; (8000494 <select_adc_channel+0x94>)
 800043a:	601a      	str	r2, [r3, #0]
              break;
 800043c:	e012      	b.n	8000464 <select_adc_channel+0x64>
        case 2:
            sConfig.Channel = ADC_CHANNEL_2;
 800043e:	230c      	movs	r3, #12
 8000440:	18fb      	adds	r3, r7, r3
 8000442:	4a15      	ldr	r2, [pc, #84]	; (8000498 <select_adc_channel+0x98>)
 8000444:	601a      	str	r2, [r3, #0]
              break;
 8000446:	e00d      	b.n	8000464 <select_adc_channel+0x64>
        case 3:
            sConfig.Channel = ADC_CHANNEL_3;
 8000448:	230c      	movs	r3, #12
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	4a13      	ldr	r2, [pc, #76]	; (800049c <select_adc_channel+0x9c>)
 800044e:	601a      	str	r2, [r3, #0]
              break;
 8000450:	e008      	b.n	8000464 <select_adc_channel+0x64>
        case 4:
            sConfig.Channel = ADC_CHANNEL_4;
 8000452:	230c      	movs	r3, #12
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	4a12      	ldr	r2, [pc, #72]	; (80004a0 <select_adc_channel+0xa0>)
 8000458:	601a      	str	r2, [r3, #0]
              break;
 800045a:	e003      	b.n	8000464 <select_adc_channel+0x64>
        default: sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800045c:	230c      	movs	r3, #12
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <select_adc_channel+0xa4>)
 8000462:	601a      	str	r2, [r3, #0]
    }
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000464:	210c      	movs	r1, #12
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000472:	187a      	adds	r2, r7, r1
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <select_adc_channel+0xa8>)
 8000476:	0011      	movs	r1, r2
 8000478:	0018      	movs	r0, r3
 800047a:	f001 fac3 	bl	8001a04 <HAL_ADC_ConfigChannel>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <select_adc_channel+0x86>
    {
      Error_Handler();
 8000482:	f000 fc0d 	bl	8000ca0 <Error_Handler>
    }
}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	b006      	add	sp, #24
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	08004808 	.word	0x08004808
 8000494:	04000002 	.word	0x04000002
 8000498:	08000004 	.word	0x08000004
 800049c:	0c000008 	.word	0x0c000008
 80004a0:	10000010 	.word	0x10000010
 80004a4:	b0001000 	.word	0xb0001000
 80004a8:	2000008c 	.word	0x2000008c

080004ac <convert>:
//----------------------------------------------

//----------------------------------------------

void convert (int column,int row)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]

	select_adc_channel(column);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	0018      	movs	r0, r3
 80004ba:	f7ff ffa1 	bl	8000400 <select_adc_channel>
	HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, GPIO_PIN_SET);
 80004be:	4b16      	ldr	r3, [pc, #88]	; (8000518 <convert+0x6c>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	2110      	movs	r1, #16
 80004c4:	0018      	movs	r0, r3
 80004c6:	f002 f887 	bl	80025d8 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);
 80004ca:	4b14      	ldr	r3, [pc, #80]	; (800051c <convert+0x70>)
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 f96f 	bl	80017b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80004d2:	2301      	movs	r3, #1
 80004d4:	425a      	negs	r2, r3
 80004d6:	4b11      	ldr	r3, [pc, #68]	; (800051c <convert+0x70>)
 80004d8:	0011      	movs	r1, r2
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 f9f2 	bl	80018c4 <HAL_ADC_PollForConversion>
	raw_temp[column+SCOLUMNS*row] = HAL_ADC_GetValue(&hadc1);
 80004e0:	4b0e      	ldr	r3, [pc, #56]	; (800051c <convert+0x70>)
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 fa82 	bl	80019ec <HAL_ADC_GetValue>
 80004e8:	0001      	movs	r1, r0
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	009a      	lsls	r2, r3, #2
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	18d2      	adds	r2, r2, r3
 80004f2:	b289      	uxth	r1, r1
 80004f4:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <convert+0x74>)
 80004f6:	0052      	lsls	r2, r2, #1
 80004f8:	52d1      	strh	r1, [r2, r3]
	HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, GPIO_PIN_RESET);
 80004fa:	4b07      	ldr	r3, [pc, #28]	; (8000518 <convert+0x6c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	2110      	movs	r1, #16
 8000500:	0018      	movs	r0, r3
 8000502:	f002 f869 	bl	80025d8 <HAL_GPIO_WritePin>
	HAL_ADC_Stop(&hadc1);
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <convert+0x70>)
 8000508:	0018      	movs	r0, r3
 800050a:	f001 f99f 	bl	800184c <HAL_ADC_Stop>
}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b002      	add	sp, #8
 8000514:	bd80      	pop	{r7, pc}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	50000400 	.word	0x50000400
 800051c:	2000008c 	.word	0x2000008c
 8000520:	2000023c 	.word	0x2000023c

08000524 <scan_columns>:

void scan_columns(int row)
	{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

		HAL_GPIO_WritePin(COL0_GPIO_Port,COL0_Pin, GPIO_PIN_SET);
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	4830      	ldr	r0, [pc, #192]	; (80005f4 <scan_columns+0xd0>)
 8000532:	2201      	movs	r2, #1
 8000534:	0019      	movs	r1, r3
 8000536:	f002 f84f 	bl	80025d8 <HAL_GPIO_WritePin>
		HAL_Delay(ADC_SET_TIME);
 800053a:	2001      	movs	r0, #1
 800053c:	f000 fe02 	bl	8001144 <HAL_Delay>
		convert(0,row);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	0019      	movs	r1, r3
 8000544:	2000      	movs	r0, #0
 8000546:	f7ff ffb1 	bl	80004ac <convert>
		HAL_GPIO_WritePin(COL0_GPIO_Port,COL0_Pin, GPIO_PIN_RESET);
 800054a:	2380      	movs	r3, #128	; 0x80
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	4829      	ldr	r0, [pc, #164]	; (80005f4 <scan_columns+0xd0>)
 8000550:	2200      	movs	r2, #0
 8000552:	0019      	movs	r1, r3
 8000554:	f002 f840 	bl	80025d8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000558:	2001      	movs	r0, #1
 800055a:	f000 fdf3 	bl	8001144 <HAL_Delay>

		HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 800055e:	2380      	movs	r3, #128	; 0x80
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	4824      	ldr	r0, [pc, #144]	; (80005f4 <scan_columns+0xd0>)
 8000564:	2201      	movs	r2, #1
 8000566:	0019      	movs	r1, r3
 8000568:	f002 f836 	bl	80025d8 <HAL_GPIO_WritePin>
		HAL_Delay(ADC_SET_TIME);
 800056c:	2001      	movs	r0, #1
 800056e:	f000 fde9 	bl	8001144 <HAL_Delay>
		convert(1,row);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	0019      	movs	r1, r3
 8000576:	2001      	movs	r0, #1
 8000578:	f7ff ff98 	bl	80004ac <convert>
		HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	481c      	ldr	r0, [pc, #112]	; (80005f4 <scan_columns+0xd0>)
 8000582:	2200      	movs	r2, #0
 8000584:	0019      	movs	r1, r3
 8000586:	f002 f827 	bl	80025d8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800058a:	2001      	movs	r0, #1
 800058c:	f000 fdda 	bl	8001144 <HAL_Delay>

		HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <scan_columns+0xd0>)
 8000592:	2201      	movs	r2, #1
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	0018      	movs	r0, r3
 8000598:	f002 f81e 	bl	80025d8 <HAL_GPIO_WritePin>
		HAL_Delay(ADC_SET_TIME);
 800059c:	2001      	movs	r0, #1
 800059e:	f000 fdd1 	bl	8001144 <HAL_Delay>
		convert(2,row);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	0019      	movs	r1, r3
 80005a6:	2002      	movs	r0, #2
 80005a8:	f7ff ff80 	bl	80004ac <convert>
		HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <scan_columns+0xd0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0018      	movs	r0, r3
 80005b4:	f002 f810 	bl	80025d8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f000 fdc3 	bl	8001144 <HAL_Delay>

		HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <scan_columns+0xd0>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	2140      	movs	r1, #64	; 0x40
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 f807 	bl	80025d8 <HAL_GPIO_WritePin>
		HAL_Delay(ADC_SET_TIME);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f000 fdba 	bl	8001144 <HAL_Delay>
		convert(3,row);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	0019      	movs	r1, r3
 80005d4:	2003      	movs	r0, #3
 80005d6:	f7ff ff69 	bl	80004ac <convert>
		HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <scan_columns+0xd0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	2140      	movs	r1, #64	; 0x40
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 fff9 	bl	80025d8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80005e6:	2001      	movs	r0, #1
 80005e8:	f000 fdac 	bl	8001144 <HAL_Delay>
		HAL_Delay(5);
		convert(4,row);
		HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
		HAL_Delay(1);
*/
	}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b002      	add	sp, #8
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	50000400 	.word	0x50000400

080005f8 <scan_rows>:


void scan_rows()
		{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(R0_GPIO_Port,R0_Pin, GPIO_PIN_RESET);
 80005fc:	23a0      	movs	r3, #160	; 0xa0
 80005fe:	05db      	lsls	r3, r3, #23
 8000600:	2200      	movs	r2, #0
 8000602:	2180      	movs	r1, #128	; 0x80
 8000604:	0018      	movs	r0, r3
 8000606:	f001 ffe7 	bl	80025d8 <HAL_GPIO_WritePin>
			scan_columns(0);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ff8a 	bl	8000524 <scan_columns>
			HAL_GPIO_WritePin(R0_GPIO_Port,R0_Pin, GPIO_PIN_SET);
 8000610:	23a0      	movs	r3, #160	; 0xa0
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	2201      	movs	r2, #1
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	0018      	movs	r0, r3
 800061a:	f001 ffdd 	bl	80025d8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(R1_GPIO_Port,R1_Pin, GPIO_PIN_RESET);
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <scan_rows+0x88>)
 8000620:	2200      	movs	r2, #0
 8000622:	2101      	movs	r1, #1
 8000624:	0018      	movs	r0, r3
 8000626:	f001 ffd7 	bl	80025d8 <HAL_GPIO_WritePin>
			scan_columns(1);
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff ff7a 	bl	8000524 <scan_columns>
			HAL_GPIO_WritePin(R1_GPIO_Port,R1_Pin, GPIO_PIN_SET);
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <scan_rows+0x88>)
 8000632:	2201      	movs	r2, #1
 8000634:	2101      	movs	r1, #1
 8000636:	0018      	movs	r0, r3
 8000638:	f001 ffce 	bl	80025d8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(R2_GPIO_Port,R2_Pin, GPIO_PIN_RESET);
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <scan_rows+0x88>)
 800063e:	2200      	movs	r2, #0
 8000640:	2102      	movs	r1, #2
 8000642:	0018      	movs	r0, r3
 8000644:	f001 ffc8 	bl	80025d8 <HAL_GPIO_WritePin>
			scan_columns(2);
 8000648:	2002      	movs	r0, #2
 800064a:	f7ff ff6b 	bl	8000524 <scan_columns>
			HAL_GPIO_WritePin(R2_GPIO_Port,R2_Pin, GPIO_PIN_SET);
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <scan_rows+0x88>)
 8000650:	2201      	movs	r2, #1
 8000652:	2102      	movs	r1, #2
 8000654:	0018      	movs	r0, r3
 8000656:	f001 ffbf 	bl	80025d8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(R3_GPIO_Port,R3_Pin, GPIO_PIN_RESET);
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <scan_rows+0x88>)
 800065c:	2200      	movs	r2, #0
 800065e:	2104      	movs	r1, #4
 8000660:	0018      	movs	r0, r3
 8000662:	f001 ffb9 	bl	80025d8 <HAL_GPIO_WritePin>
			scan_columns(3);
 8000666:	2003      	movs	r0, #3
 8000668:	f7ff ff5c 	bl	8000524 <scan_columns>
			HAL_GPIO_WritePin(R3_GPIO_Port,R3_Pin, GPIO_PIN_SET);
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <scan_rows+0x88>)
 800066e:	2201      	movs	r2, #1
 8000670:	2104      	movs	r1, #4
 8000672:	0018      	movs	r0, r3
 8000674:	f001 ffb0 	bl	80025d8 <HAL_GPIO_WritePin>
/*
			HAL_GPIO_WritePin(R4_GPIO_Port,R4_Pin, GPIO_PIN_RESET);
			scan_columns(4);
			HAL_GPIO_WritePin(R4_GPIO_Port,R4_Pin, GPIO_PIN_SET);
*/
		}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	50000400 	.word	0x50000400

08000684 <read_all_sensors>:


void read_all_sensors(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_SET);
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	4808      	ldr	r0, [pc, #32]	; (80006b0 <read_all_sensors+0x2c>)
 800068e:	2201      	movs	r2, #1
 8000690:	0019      	movs	r1, r3
 8000692:	f001 ffa1 	bl	80025d8 <HAL_GPIO_WritePin>
	scan_rows();
 8000696:	f7ff ffaf 	bl	80005f8 <scan_rows>
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	4804      	ldr	r0, [pc, #16]	; (80006b0 <read_all_sensors+0x2c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	0019      	movs	r1, r3
 80006a4:	f001 ff98 	bl	80025d8 <HAL_GPIO_WritePin>
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	50000800 	.word	0x50000800

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b6:	46de      	mov	lr, fp
 80006b8:	4657      	mov	r7, sl
 80006ba:	464e      	mov	r6, r9
 80006bc:	4645      	mov	r5, r8
 80006be:	b5e0      	push	{r5, r6, r7, lr}
 80006c0:	b097      	sub	sp, #92	; 0x5c
 80006c2:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f000 fcb8 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f874 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f000 fa16 	bl	8000afc <MX_GPIO_Init>
  MX_ADC1_Init();
 80006d0:	f000 f8ca 	bl	8000868 <MX_ADC1_Init>
  MX_CRC_Init();
 80006d4:	f000 f96a 	bl	80009ac <MX_CRC_Init>
  MX_USART1_UART_Init();
 80006d8:	f000 f98c 	bl	80009f4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80006dc:	f000 f9d8 	bl	8000a90 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	read_all_sensors();
 80006e0:	f7ff ffd0 	bl	8000684 <read_all_sensors>
	HAL_ADC_Stop(&hadc1);
 80006e4:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <main+0xec>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f001 f8b0 	bl	800184c <HAL_ADC_Stop>
	buf_size = sprintf (tx_buffer, "ADC %04d %04d %04d %04d %04d %04d %04d %04d %04d %04d %04d %04d %04d %04d %04d %04d \r\n", raw_temp[0],raw_temp[1],raw_temp[2],raw_temp[3],raw_temp[4],raw_temp[5],raw_temp[6],raw_temp[7],raw_temp[8],raw_temp[9],raw_temp[10],raw_temp[11],raw_temp[12],raw_temp[13],raw_temp[14],raw_temp[15]);
 80006ec:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <main+0xf0>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	4b2c      	ldr	r3, [pc, #176]	; (80007a4 <main+0xf0>)
 80006f4:	885b      	ldrh	r3, [r3, #2]
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <main+0xf0>)
 80006fa:	889b      	ldrh	r3, [r3, #4]
 80006fc:	469c      	mov	ip, r3
 80006fe:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <main+0xf0>)
 8000700:	88db      	ldrh	r3, [r3, #6]
 8000702:	4698      	mov	r8, r3
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <main+0xf0>)
 8000706:	891b      	ldrh	r3, [r3, #8]
 8000708:	4699      	mov	r9, r3
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <main+0xf0>)
 800070c:	895b      	ldrh	r3, [r3, #10]
 800070e:	469a      	mov	sl, r3
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <main+0xf0>)
 8000712:	899b      	ldrh	r3, [r3, #12]
 8000714:	469b      	mov	fp, r3
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <main+0xf0>)
 8000718:	89db      	ldrh	r3, [r3, #14]
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <main+0xf0>)
 800071e:	8a1b      	ldrh	r3, [r3, #16]
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <main+0xf0>)
 8000724:	8a5b      	ldrh	r3, [r3, #18]
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <main+0xf0>)
 800072a:	8a9b      	ldrh	r3, [r3, #20]
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <main+0xf0>)
 8000730:	8adb      	ldrh	r3, [r3, #22]
 8000732:	001e      	movs	r6, r3
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <main+0xf0>)
 8000736:	8b1b      	ldrh	r3, [r3, #24]
 8000738:	001d      	movs	r5, r3
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <main+0xf0>)
 800073c:	8b5b      	ldrh	r3, [r3, #26]
 800073e:	001c      	movs	r4, r3
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <main+0xf0>)
 8000742:	8b9b      	ldrh	r3, [r3, #28]
 8000744:	001a      	movs	r2, r3
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <main+0xf0>)
 8000748:	8bdb      	ldrh	r3, [r3, #30]
 800074a:	4917      	ldr	r1, [pc, #92]	; (80007a8 <main+0xf4>)
 800074c:	4817      	ldr	r0, [pc, #92]	; (80007ac <main+0xf8>)
 800074e:	930d      	str	r3, [sp, #52]	; 0x34
 8000750:	920c      	str	r2, [sp, #48]	; 0x30
 8000752:	940b      	str	r4, [sp, #44]	; 0x2c
 8000754:	950a      	str	r5, [sp, #40]	; 0x28
 8000756:	9609      	str	r6, [sp, #36]	; 0x24
 8000758:	683c      	ldr	r4, [r7, #0]
 800075a:	9408      	str	r4, [sp, #32]
 800075c:	687c      	ldr	r4, [r7, #4]
 800075e:	9407      	str	r4, [sp, #28]
 8000760:	68bc      	ldr	r4, [r7, #8]
 8000762:	9406      	str	r4, [sp, #24]
 8000764:	68fc      	ldr	r4, [r7, #12]
 8000766:	9405      	str	r4, [sp, #20]
 8000768:	465c      	mov	r4, fp
 800076a:	9404      	str	r4, [sp, #16]
 800076c:	4654      	mov	r4, sl
 800076e:	9403      	str	r4, [sp, #12]
 8000770:	464c      	mov	r4, r9
 8000772:	9402      	str	r4, [sp, #8]
 8000774:	4644      	mov	r4, r8
 8000776:	9401      	str	r4, [sp, #4]
 8000778:	4664      	mov	r4, ip
 800077a:	9400      	str	r4, [sp, #0]
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	697a      	ldr	r2, [r7, #20]
 8000780:	f003 fba0 	bl	8003ec4 <siprintf>
 8000784:	0003      	movs	r3, r0
 8000786:	61fb      	str	r3, [r7, #28]
	HAL_UART_Transmit (&huart3, (uint8_t *)tx_buffer, buf_size, 10);
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	b29a      	uxth	r2, r3
 800078c:	4907      	ldr	r1, [pc, #28]	; (80007ac <main+0xf8>)
 800078e:	4808      	ldr	r0, [pc, #32]	; (80007b0 <main+0xfc>)
 8000790:	230a      	movs	r3, #10
 8000792:	f002 fdcf 	bl	8003334 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000796:	2032      	movs	r0, #50	; 0x32
 8000798:	f000 fcd4 	bl	8001144 <HAL_Delay>
	read_all_sensors();
 800079c:	e7a0      	b.n	80006e0 <main+0x2c>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	2000008c 	.word	0x2000008c
 80007a4:	2000023c 	.word	0x2000023c
 80007a8:	080047b0 	.word	0x080047b0
 80007ac:	2000025c 	.word	0x2000025c
 80007b0:	200001a8 	.word	0x200001a8

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b093      	sub	sp, #76	; 0x4c
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	2414      	movs	r4, #20
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	0018      	movs	r0, r3
 80007c0:	2334      	movs	r3, #52	; 0x34
 80007c2:	001a      	movs	r2, r3
 80007c4:	2100      	movs	r1, #0
 80007c6:	f003 fb75 	bl	8003eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	0018      	movs	r0, r3
 80007ce:	2310      	movs	r3, #16
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f003 fb6e 	bl	8003eb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 ff19 	bl	8002614 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	2202      	movs	r2, #2
 80007e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	0052      	lsls	r2, r2, #1
 80007ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007f0:	0021      	movs	r1, r4
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2240      	movs	r2, #64	; 0x40
 80007fc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2202      	movs	r2, #2
 8000802:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2202      	movs	r2, #2
 8000808:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2208      	movs	r2, #8
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV32;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	22f8      	movs	r2, #248	; 0xf8
 800081a:	0392      	lsls	r2, r2, #14
 800081c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0592      	lsls	r2, r2, #22
 8000824:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	187b      	adds	r3, r7, r1
 8000828:	0018      	movs	r0, r3
 800082a:	f001 ff3f 	bl	80026ac <HAL_RCC_OscConfig>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000832:	f000 fa35 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2202      	movs	r2, #2
 8000840:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2102      	movs	r1, #2
 8000852:	0018      	movs	r0, r3
 8000854:	f002 fa3a 	bl	8002ccc <HAL_RCC_ClockConfig>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800085c:	f000 fa20 	bl	8000ca0 <Error_Handler>
  }
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b013      	add	sp, #76	; 0x4c
 8000866:	bd90      	pop	{r4, r7, pc}

08000868 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	0018      	movs	r0, r3
 8000872:	230c      	movs	r3, #12
 8000874:	001a      	movs	r2, r3
 8000876:	2100      	movs	r1, #0
 8000878:	f003 fb1c 	bl	8003eb4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800087c:	4b46      	ldr	r3, [pc, #280]	; (8000998 <MX_ADC1_Init+0x130>)
 800087e:	4a47      	ldr	r2, [pc, #284]	; (800099c <MX_ADC1_Init+0x134>)
 8000880:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000882:	4b45      	ldr	r3, [pc, #276]	; (8000998 <MX_ADC1_Init+0x130>)
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	0612      	lsls	r2, r2, #24
 8000888:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800088a:	4b43      	ldr	r3, [pc, #268]	; (8000998 <MX_ADC1_Init+0x130>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000890:	4b41      	ldr	r3, [pc, #260]	; (8000998 <MX_ADC1_Init+0x130>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000896:	4b40      	ldr	r3, [pc, #256]	; (8000998 <MX_ADC1_Init+0x130>)
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	0392      	lsls	r2, r2, #14
 800089c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089e:	4b3e      	ldr	r3, [pc, #248]	; (8000998 <MX_ADC1_Init+0x130>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008a4:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <MX_ADC1_Init+0x130>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80008aa:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <MX_ADC1_Init+0x130>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b0:	4b39      	ldr	r3, [pc, #228]	; (8000998 <MX_ADC1_Init+0x130>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 80008b6:	4b38      	ldr	r3, [pc, #224]	; (8000998 <MX_ADC1_Init+0x130>)
 80008b8:	2204      	movs	r2, #4
 80008ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80008bc:	4b36      	ldr	r3, [pc, #216]	; (8000998 <MX_ADC1_Init+0x130>)
 80008be:	2220      	movs	r2, #32
 80008c0:	2101      	movs	r1, #1
 80008c2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c4:	4b34      	ldr	r3, [pc, #208]	; (8000998 <MX_ADC1_Init+0x130>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ca:	4b33      	ldr	r3, [pc, #204]	; (8000998 <MX_ADC1_Init+0x130>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008d0:	4b31      	ldr	r3, [pc, #196]	; (8000998 <MX_ADC1_Init+0x130>)
 80008d2:	222c      	movs	r2, #44	; 0x2c
 80008d4:	2100      	movs	r1, #0
 80008d6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008d8:	4b2f      	ldr	r3, [pc, #188]	; (8000998 <MX_ADC1_Init+0x130>)
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	0152      	lsls	r2, r2, #5
 80008de:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80008e0:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <MX_ADC1_Init+0x130>)
 80008e2:	2207      	movs	r2, #7
 80008e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80008e6:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <MX_ADC1_Init+0x130>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80008ec:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <MX_ADC1_Init+0x130>)
 80008ee:	223c      	movs	r2, #60	; 0x3c
 80008f0:	2100      	movs	r1, #0
 80008f2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80008f4:	4b28      	ldr	r3, [pc, #160]	; (8000998 <MX_ADC1_Init+0x130>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <MX_ADC1_Init+0x130>)
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fdaf 	bl	8001460 <HAL_ADC_Init>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d001      	beq.n	800090a <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8000906:	f000 f9cb 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2201      	movs	r2, #1
 800090e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2200      	movs	r2, #0
 8000914:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091c:	1d3a      	adds	r2, r7, #4
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_ADC1_Init+0x130>)
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f001 f86e 	bl	8001a04 <HAL_ADC_ConfigChannel>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800092c:	f000 f9b8 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <MX_ADC1_Init+0x138>)
 8000934:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2204      	movs	r2, #4
 800093a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093c:	1d3a      	adds	r2, r7, #4
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_ADC1_Init+0x130>)
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f001 f85e 	bl	8001a04 <HAL_ADC_ConfigChannel>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800094c:	f000 f9a8 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <MX_ADC1_Init+0x13c>)
 8000954:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2208      	movs	r2, #8
 800095a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800095c:	1d3a      	adds	r2, r7, #4
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_ADC1_Init+0x130>)
 8000960:	0011      	movs	r1, r2
 8000962:	0018      	movs	r0, r3
 8000964:	f001 f84e 	bl	8001a04 <HAL_ADC_ConfigChannel>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 800096c:	f000 f998 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <MX_ADC1_Init+0x140>)
 8000974:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	220c      	movs	r2, #12
 800097a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097c:	1d3a      	adds	r2, r7, #4
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_ADC1_Init+0x130>)
 8000980:	0011      	movs	r1, r2
 8000982:	0018      	movs	r0, r3
 8000984:	f001 f83e 	bl	8001a04 <HAL_ADC_ConfigChannel>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 800098c:	f000 f988 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b004      	add	sp, #16
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000008c 	.word	0x2000008c
 800099c:	40012400 	.word	0x40012400
 80009a0:	04000002 	.word	0x04000002
 80009a4:	08000004 	.word	0x08000004
 80009a8:	0c000008 	.word	0x0c000008

080009ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_CRC_Init+0x40>)
 80009b2:	4a0f      	ldr	r2, [pc, #60]	; (80009f0 <MX_CRC_Init+0x44>)
 80009b4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <MX_CRC_Init+0x40>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_CRC_Init+0x40>)
 80009be:	2200      	movs	r2, #0
 80009c0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <MX_CRC_Init+0x40>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_CRC_Init+0x40>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <MX_CRC_Init+0x40>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <MX_CRC_Init+0x40>)
 80009d6:	0018      	movs	r0, r3
 80009d8:	f001 fbc6 	bl	8002168 <HAL_CRC_Init>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009e0:	f000 f95e 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	200000f0 	.word	0x200000f0
 80009f0:	40023000 	.word	0x40023000

080009f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <MX_USART1_UART_Init+0x94>)
 80009fa:	4a24      	ldr	r2, [pc, #144]	; (8000a8c <MX_USART1_UART_Init+0x98>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009fe:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <MX_USART1_UART_Init+0x94>)
 8000a00:	22e1      	movs	r2, #225	; 0xe1
 8000a02:	0252      	lsls	r2, r2, #9
 8000a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <MX_USART1_UART_Init+0x94>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <MX_USART1_UART_Init+0x94>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_USART1_UART_Init+0x94>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_USART1_UART_Init+0x94>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_USART1_UART_Init+0x94>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_USART1_UART_Init+0x94>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_USART1_UART_Init+0x94>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_USART1_UART_Init+0x94>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_USART1_UART_Init+0x94>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_USART1_UART_Init+0x94>)
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f002 fc22 	bl	8003288 <HAL_UART_Init>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a48:	f000 f92a 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_USART1_UART_Init+0x94>)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	0018      	movs	r0, r3
 8000a52:	f003 f925 	bl	8003ca0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a5a:	f000 f921 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MX_USART1_UART_Init+0x94>)
 8000a60:	2100      	movs	r1, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f003 f95c 	bl	8003d20 <HAL_UARTEx_SetRxFifoThreshold>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a6c:	f000 f918 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <MX_USART1_UART_Init+0x94>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f003 f8da 	bl	8003c2c <HAL_UARTEx_DisableFifoMode>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a7c:	f000 f910 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	20000114 	.word	0x20000114
 8000a8c:	40013800 	.word	0x40013800

08000a90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_USART3_UART_Init+0x64>)
 8000a96:	4a18      	ldr	r2, [pc, #96]	; (8000af8 <MX_USART3_UART_Init+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MX_USART3_UART_Init+0x64>)
 8000a9c:	22e1      	movs	r2, #225	; 0xe1
 8000a9e:	0252      	lsls	r2, r2, #9
 8000aa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_USART3_UART_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_USART3_UART_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USART3_UART_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_USART3_UART_Init+0x64>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USART3_UART_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USART3_UART_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USART3_UART_Init+0x64>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USART3_UART_Init+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USART3_UART_Init+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000ad8:	4806      	ldr	r0, [pc, #24]	; (8000af4 <MX_USART3_UART_Init+0x64>)
 8000ada:	2300      	movs	r3, #0
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f003 f832 	bl	8003b48 <HAL_RS485Ex_Init>
 8000ae4:	1e03      	subs	r3, r0, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 8000ae8:	f000 f8da 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	200001a8 	.word	0x200001a8
 8000af8:	40004800 	.word	0x40004800

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b08b      	sub	sp, #44	; 0x2c
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	2414      	movs	r4, #20
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	0018      	movs	r0, r3
 8000b08:	2314      	movs	r3, #20
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f003 f9d1 	bl	8003eb4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b5a      	ldr	r3, [pc, #360]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b16:	4b59      	ldr	r3, [pc, #356]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b18:	2104      	movs	r1, #4
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b1e:	4b57      	ldr	r3, [pc, #348]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b22:	2204      	movs	r2, #4
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b54      	ldr	r3, [pc, #336]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b2e:	4b53      	ldr	r3, [pc, #332]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b30:	2101      	movs	r1, #1
 8000b32:	430a      	orrs	r2, r1
 8000b34:	635a      	str	r2, [r3, #52]	; 0x34
 8000b36:	4b51      	ldr	r3, [pc, #324]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	4b4e      	ldr	r3, [pc, #312]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b46:	4b4d      	ldr	r3, [pc, #308]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b48:	2102      	movs	r1, #2
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b4e:	4b4b      	ldr	r3, [pc, #300]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b52:	2202      	movs	r2, #2
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5a:	4b48      	ldr	r3, [pc, #288]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b5e:	4b47      	ldr	r3, [pc, #284]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b60:	2108      	movs	r1, #8
 8000b62:	430a      	orrs	r2, r1
 8000b64:	635a      	str	r2, [r3, #52]	; 0x34
 8000b66:	4b45      	ldr	r3, [pc, #276]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6a:	2208      	movs	r2, #8
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_Pin|GREEN_Pin|RED_Pin|PC7_Pin
 8000b72:	4943      	ldr	r1, [pc, #268]	; (8000c80 <MX_GPIO_Init+0x184>)
 8000b74:	4b43      	ldr	r3, [pc, #268]	; (8000c84 <MX_GPIO_Init+0x188>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f001 fd2d 	bl	80025d8 <HAL_GPIO_WritePin>
                          |PC7C7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, GPIO_PIN_SET);
 8000b7e:	23a0      	movs	r3, #160	; 0xa0
 8000b80:	05db      	lsls	r3, r3, #23
 8000b82:	2201      	movs	r2, #1
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	0018      	movs	r0, r3
 8000b88:	f001 fd26 	bl	80025d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin, GPIO_PIN_SET);
 8000b8c:	493e      	ldr	r1, [pc, #248]	; (8000c88 <MX_GPIO_Init+0x18c>)
 8000b8e:	4b3f      	ldr	r3, [pc, #252]	; (8000c8c <MX_GPIO_Init+0x190>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	0018      	movs	r0, r3
 8000b94:	f001 fd20 	bl	80025d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB12_Pin|PB13_Pin|PB15_Pin|PB3_Pin
 8000b98:	493d      	ldr	r1, [pc, #244]	; (8000c90 <MX_GPIO_Init+0x194>)
 8000b9a:	4b3c      	ldr	r3, [pc, #240]	; (8000c8c <MX_GPIO_Init+0x190>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f001 fd1a 	bl	80025d8 <HAL_GPIO_WritePin>
                          |PB4_Pin|COL4_Pin|COL3_Pin|COL2_Pin
                          |COL1_Pin|COL0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA8_Pin|PA11_Pin|PA12_Pin|PA15_Pin, GPIO_PIN_RESET);
 8000ba4:	2399      	movs	r3, #153	; 0x99
 8000ba6:	0219      	lsls	r1, r3, #8
 8000ba8:	23a0      	movs	r3, #160	; 0xa0
 8000baa:	05db      	lsls	r3, r3, #23
 8000bac:	2200      	movs	r2, #0
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f001 fd12 	bl	80025d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD0_Pin|PD1_Pin|PD2_Pin|PD3_Pin, GPIO_PIN_RESET);
 8000bb4:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <MX_GPIO_Init+0x198>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	210f      	movs	r1, #15
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 fd0c 	bl	80025d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLUE_Pin GREEN_Pin RED_Pin PC7_Pin
                           PC7C7_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin|GREEN_Pin|RED_Pin|PC7_Pin
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	4a2f      	ldr	r2, [pc, #188]	; (8000c80 <MX_GPIO_Init+0x184>)
 8000bc4:	601a      	str	r2, [r3, #0]
                          |PC7C7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	2201      	movs	r2, #1
 8000bca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	4a2a      	ldr	r2, [pc, #168]	; (8000c84 <MX_GPIO_Init+0x188>)
 8000bdc:	0019      	movs	r1, r3
 8000bde:	0010      	movs	r0, r2
 8000be0:	f001 fb96 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_Pin */
  GPIO_InitStruct.Pin = START_Pin;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	2240      	movs	r2, #64	; 0x40
 8000be8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	193a      	adds	r2, r7, r4
 8000bf8:	23a0      	movs	r3, #160	; 0xa0
 8000bfa:	05db      	lsls	r3, r3, #23
 8000bfc:	0011      	movs	r1, r2
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f001 fb86 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : R0_Pin PA8_Pin PA11_Pin PA12_Pin
                           PA15_Pin */
  GPIO_InitStruct.Pin = R0_Pin|PA8_Pin|PA11_Pin|PA12_Pin
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <MX_GPIO_Init+0x19c>)
 8000c08:	601a      	str	r2, [r3, #0]
                          |PA15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	193a      	adds	r2, r7, r4
 8000c1e:	23a0      	movs	r3, #160	; 0xa0
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	0011      	movs	r1, r2
 8000c24:	0018      	movs	r0, r3
 8000c26:	f001 fb73 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin
                           PB12_Pin PB13_Pin PB15_Pin PB3_Pin
                           PB4_Pin COL4_Pin COL3_Pin COL2_Pin
                           COL1_Pin COL0_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <MX_GPIO_Init+0x1a0>)
 8000c2e:	601a      	str	r2, [r3, #0]
                          |PB12_Pin|PB13_Pin|PB15_Pin|PB3_Pin
                          |PB4_Pin|COL4_Pin|COL3_Pin|COL2_Pin
                          |COL1_Pin|COL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	2201      	movs	r2, #1
 8000c34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <MX_GPIO_Init+0x190>)
 8000c46:	0019      	movs	r1, r3
 8000c48:	0010      	movs	r0, r2
 8000c4a:	f001 fb61 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0_Pin PD1_Pin PD2_Pin PD3_Pin */
  GPIO_InitStruct.Pin = PD0_Pin|PD1_Pin|PD2_Pin|PD3_Pin;
 8000c4e:	0021      	movs	r1, r4
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	220f      	movs	r2, #15
 8000c54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2201      	movs	r2, #1
 8000c5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <MX_GPIO_Init+0x198>)
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	0010      	movs	r0, r2
 8000c70:	f001 fb4e 	bl	8002310 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b00b      	add	sp, #44	; 0x2c
 8000c7a:	bd90      	pop	{r4, r7, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	0000e0c0 	.word	0x0000e0c0
 8000c84:	50000800 	.word	0x50000800
 8000c88:	00000407 	.word	0x00000407
 8000c8c:	50000400 	.word	0x50000400
 8000c90:	0000b3f8 	.word	0x0000b3f8
 8000c94:	50000c00 	.word	0x50000c00
 8000c98:	00009980 	.word	0x00009980
 8000c9c:	0000b7ff 	.word	0x0000b7ff

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>
	...

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cb8:	2101      	movs	r1, #1
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	641a      	str	r2, [r3, #64]	; 0x40
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_MspInit+0x44>)
 8000ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cd0:	2180      	movs	r1, #128	; 0x80
 8000cd2:	0549      	lsls	r1, r1, #21
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	055b      	lsls	r3, r3, #21
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b08b      	sub	sp, #44	; 0x2c
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	2414      	movs	r4, #20
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	0018      	movs	r0, r3
 8000d02:	2314      	movs	r3, #20
 8000d04:	001a      	movs	r2, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	f003 f8d4 	bl	8003eb4 <memset>
  if(hadc->Instance==ADC1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <HAL_ADC_MspInit+0x80>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d129      	bne.n	8000d6a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_ADC_MspInit+0x84>)
 8000d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_ADC_MspInit+0x84>)
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	0349      	lsls	r1, r1, #13
 8000d20:	430a      	orrs	r2, r1
 8000d22:	641a      	str	r2, [r3, #64]	; 0x40
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <HAL_ADC_MspInit+0x84>)
 8000d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	035b      	lsls	r3, r3, #13
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_ADC_MspInit+0x84>)
 8000d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_ADC_MspInit+0x84>)
 8000d38:	2101      	movs	r1, #1
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_ADC_MspInit+0x84>)
 8000d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d42:	2201      	movs	r2, #1
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	221f      	movs	r2, #31
 8000d4e:	601a      	str	r2, [r3, #0]
                          |S4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	2203      	movs	r2, #3
 8000d54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	193a      	adds	r2, r7, r4
 8000d5e:	23a0      	movs	r3, #160	; 0xa0
 8000d60:	05db      	lsls	r3, r3, #23
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f001 fad3 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b00b      	add	sp, #44	; 0x2c
 8000d70:	bd90      	pop	{r4, r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	40012400 	.word	0x40012400
 8000d78:	40021000 	.word	0x40021000

08000d7c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_CRC_MspInit+0x38>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d10d      	bne.n	8000daa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_CRC_MspInit+0x3c>)
 8000d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_CRC_MspInit+0x3c>)
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	0149      	lsls	r1, r1, #5
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	639a      	str	r2, [r3, #56]	; 0x38
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_CRC_MspInit+0x3c>)
 8000d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	015b      	lsls	r3, r3, #5
 8000da4:	4013      	ands	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b004      	add	sp, #16
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	40023000 	.word	0x40023000
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b095      	sub	sp, #84	; 0x54
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	233c      	movs	r3, #60	; 0x3c
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	0018      	movs	r0, r3
 8000dca:	2314      	movs	r3, #20
 8000dcc:	001a      	movs	r2, r3
 8000dce:	2100      	movs	r1, #0
 8000dd0:	f003 f870 	bl	8003eb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd4:	2420      	movs	r4, #32
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	0018      	movs	r0, r3
 8000dda:	231c      	movs	r3, #28
 8000ddc:	001a      	movs	r2, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	f003 f868 	bl	8003eb4 <memset>
  if(huart->Instance==USART1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a50      	ldr	r2, [pc, #320]	; (8000f2c <HAL_UART_MspInit+0x170>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d140      	bne.n	8000e70 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	2201      	movs	r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000df4:	193b      	adds	r3, r7, r4
 8000df6:	2200      	movs	r2, #0
 8000df8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f002 f90f 	bl	8003020 <HAL_RCCEx_PeriphCLKConfig>
 8000e02:	1e03      	subs	r3, r0, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e06:	f7ff ff4b 	bl	8000ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e0a:	4b49      	ldr	r3, [pc, #292]	; (8000f30 <HAL_UART_MspInit+0x174>)
 8000e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e0e:	4b48      	ldr	r3, [pc, #288]	; (8000f30 <HAL_UART_MspInit+0x174>)
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	01c9      	lsls	r1, r1, #7
 8000e14:	430a      	orrs	r2, r1
 8000e16:	641a      	str	r2, [r3, #64]	; 0x40
 8000e18:	4b45      	ldr	r3, [pc, #276]	; (8000f30 <HAL_UART_MspInit+0x174>)
 8000e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	01db      	lsls	r3, r3, #7
 8000e20:	4013      	ands	r3, r2
 8000e22:	61fb      	str	r3, [r7, #28]
 8000e24:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	4b42      	ldr	r3, [pc, #264]	; (8000f30 <HAL_UART_MspInit+0x174>)
 8000e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e2a:	4b41      	ldr	r3, [pc, #260]	; (8000f30 <HAL_UART_MspInit+0x174>)
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	635a      	str	r2, [r3, #52]	; 0x34
 8000e32:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <HAL_UART_MspInit+0x174>)
 8000e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e36:	2201      	movs	r2, #1
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
 8000e3c:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e3e:	213c      	movs	r1, #60	; 0x3c
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	22c0      	movs	r2, #192	; 0xc0
 8000e44:	00d2      	lsls	r2, r2, #3
 8000e46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	187a      	adds	r2, r7, r1
 8000e62:	23a0      	movs	r3, #160	; 0xa0
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	0011      	movs	r1, r2
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f001 fa51 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e6e:	e058      	b.n	8000f22 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART3)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a2f      	ldr	r2, [pc, #188]	; (8000f34 <HAL_UART_MspInit+0x178>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d153      	bne.n	8000f22 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e7a:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <HAL_UART_MspInit+0x174>)
 8000e7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <HAL_UART_MspInit+0x174>)
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	02c9      	lsls	r1, r1, #11
 8000e84:	430a      	orrs	r2, r1
 8000e86:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <HAL_UART_MspInit+0x174>)
 8000e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	02db      	lsls	r3, r3, #11
 8000e90:	4013      	ands	r3, r2
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <HAL_UART_MspInit+0x174>)
 8000e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <HAL_UART_MspInit+0x174>)
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <HAL_UART_MspInit+0x174>)
 8000ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <HAL_UART_MspInit+0x174>)
 8000eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <HAL_UART_MspInit+0x174>)
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <HAL_UART_MspInit+0x174>)
 8000ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U3TX_Pin;
 8000ec6:	243c      	movs	r4, #60	; 0x3c
 8000ec8:	193b      	adds	r3, r7, r4
 8000eca:	2220      	movs	r2, #32
 8000ecc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000ee0:	193b      	adds	r3, r7, r4
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(U3TX_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	193a      	adds	r2, r7, r4
 8000ee8:	23a0      	movs	r3, #160	; 0xa0
 8000eea:	05db      	lsls	r3, r3, #23
 8000eec:	0011      	movs	r1, r2
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f001 fa0e 	bl	8002310 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = U3RX_Pin|U3DE_Pin;
 8000ef4:	0021      	movs	r1, r4
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2290      	movs	r2, #144	; 0x90
 8000efa:	01d2      	lsls	r2, r2, #7
 8000efc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2202      	movs	r2, #2
 8000f02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2204      	movs	r2, #4
 8000f14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_UART_MspInit+0x17c>)
 8000f1a:	0019      	movs	r1, r3
 8000f1c:	0010      	movs	r0, r2
 8000f1e:	f001 f9f7 	bl	8002310 <HAL_GPIO_Init>
}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b015      	add	sp, #84	; 0x54
 8000f28:	bd90      	pop	{r4, r7, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	40013800 	.word	0x40013800
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40004800 	.word	0x40004800
 8000f38:	50000400 	.word	0x50000400

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <NMI_Handler+0x4>

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler+0x4>

08000f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f60:	f000 f8d4 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	18d3      	adds	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f002 ff60 	bl	8003e60 <__errno>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	425b      	negs	r3, r3
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	18d2      	adds	r2, r2, r3
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <_sbrk+0x64>)
 8000fbc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b006      	add	sp, #24
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20009000 	.word	0x20009000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	2000035c 	.word	0x2000035c
 8000fd4:	20000378 	.word	0x20000378

08000fd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fe6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe8:	f7ff fff6 	bl	8000fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	; (8001024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <LoopForever+0xe>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	; (8001030 <LoopForever+0x16>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001012:	f002 ff2b 	bl	8003e6c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001016:	f7ff fb4d 	bl	80006b4 <main>

0800101a <LoopForever>:

LoopForever:
  b LoopForever
 800101a:	e7fe      	b.n	800101a <LoopForever>
  ldr   r0, =_estack
 800101c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001028:	080048e0 	.word	0x080048e0
  ldr r2, =_sbss
 800102c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001030:	20000374 	.word	0x20000374

08001034 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC1_IRQHandler>
	...

08001038 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_Init+0x3c>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_Init+0x3c>)
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	0049      	lsls	r1, r1, #1
 800104e:	430a      	orrs	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001052:	2003      	movs	r0, #3
 8001054:	f000 f810 	bl	8001078 <HAL_InitTick>
 8001058:	1e03      	subs	r3, r0, #0
 800105a:	d003      	beq.n	8001064 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	e001      	b.n	8001068 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001064:	f7ff fe22 	bl	8000cac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001068:	1dfb      	adds	r3, r7, #7
 800106a:	781b      	ldrb	r3, [r3, #0]
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40022000 	.word	0x40022000

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001080:	230f      	movs	r3, #15
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_InitTick+0x88>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d02b      	beq.n	80010e8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <HAL_InitTick+0x8c>)
 8001092:	681c      	ldr	r4, [r3, #0]
 8001094:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <HAL_InitTick+0x88>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	0019      	movs	r1, r3
 800109a:	23fa      	movs	r3, #250	; 0xfa
 800109c:	0098      	lsls	r0, r3, #2
 800109e:	f7ff f839 	bl	8000114 <__udivsi3>
 80010a2:	0003      	movs	r3, r0
 80010a4:	0019      	movs	r1, r3
 80010a6:	0020      	movs	r0, r4
 80010a8:	f7ff f834 	bl	8000114 <__udivsi3>
 80010ac:	0003      	movs	r3, r0
 80010ae:	0018      	movs	r0, r3
 80010b0:	f001 f84d 	bl	800214e <HAL_SYSTICK_Config>
 80010b4:	1e03      	subs	r3, r0, #0
 80010b6:	d112      	bne.n	80010de <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d80a      	bhi.n	80010d4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	2301      	movs	r3, #1
 80010c2:	425b      	negs	r3, r3
 80010c4:	2200      	movs	r2, #0
 80010c6:	0018      	movs	r0, r3
 80010c8:	f001 f82c 	bl	8002124 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_InitTick+0x90>)
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	e00d      	b.n	80010f0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010d4:	230f      	movs	r3, #15
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e008      	b.n	80010f0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010de:	230f      	movs	r3, #15
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e003      	b.n	80010f0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e8:	230f      	movs	r3, #15
 80010ea:	18fb      	adds	r3, r7, r3
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010f0:	230f      	movs	r3, #15
 80010f2:	18fb      	adds	r3, r7, r3
 80010f4:	781b      	ldrb	r3, [r3, #0]
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b005      	add	sp, #20
 80010fc:	bd90      	pop	{r4, r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	20000008 	.word	0x20000008
 8001104:	20000000 	.word	0x20000000
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_IncTick+0x1c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	001a      	movs	r2, r3
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_IncTick+0x20>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	18d2      	adds	r2, r2, r3
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_IncTick+0x20>)
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	20000008 	.word	0x20000008
 800112c:	20000360 	.word	0x20000360

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b02      	ldr	r3, [pc, #8]	; (8001140 <HAL_GetTick+0x10>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	0018      	movs	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	20000360 	.word	0x20000360

08001144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff fff0 	bl	8001130 <HAL_GetTick>
 8001150:	0003      	movs	r3, r0
 8001152:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	3301      	adds	r3, #1
 800115c:	d005      	beq.n	800116a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_Delay+0x44>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	001a      	movs	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	189b      	adds	r3, r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	f7ff ffe0 	bl	8001130 <HAL_GetTick>
 8001170:	0002      	movs	r2, r0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	429a      	cmp	r2, r3
 800117a:	d8f7      	bhi.n	800116c <HAL_Delay+0x28>
  {
  }
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	46bd      	mov	sp, r7
 8001182:	b004      	add	sp, #16
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	20000008 	.word	0x20000008

0800118c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800119c:	401a      	ands	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]
}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b002      	add	sp, #8
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	fe3fffff 	.word	0xfe3fffff

080011b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	23e0      	movs	r3, #224	; 0xe0
 80011c2:	045b      	lsls	r3, r3, #17
 80011c4:	4013      	ands	r3, r2
}
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b002      	add	sp, #8
 80011cc:	bd80      	pop	{r7, pc}

080011ce <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	2104      	movs	r1, #4
 80011e2:	400a      	ands	r2, r1
 80011e4:	2107      	movs	r1, #7
 80011e6:	4091      	lsls	r1, r2
 80011e8:	000a      	movs	r2, r1
 80011ea:	43d2      	mvns	r2, r2
 80011ec:	401a      	ands	r2, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	2104      	movs	r1, #4
 80011f2:	400b      	ands	r3, r1
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	4099      	lsls	r1, r3
 80011f8:	000b      	movs	r3, r1
 80011fa:	431a      	orrs	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b004      	add	sp, #16
 8001206:	bd80      	pop	{r7, pc}

08001208 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	2104      	movs	r1, #4
 800121a:	400a      	ands	r2, r1
 800121c:	2107      	movs	r1, #7
 800121e:	4091      	lsls	r1, r2
 8001220:	000a      	movs	r2, r1
 8001222:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2104      	movs	r1, #4
 8001228:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800122a:	40da      	lsrs	r2, r3
 800122c:	0013      	movs	r3, r2
}
 800122e:	0018      	movs	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	b002      	add	sp, #8
 8001234:	bd80      	pop	{r7, pc}

08001236 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	23c0      	movs	r3, #192	; 0xc0
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	4013      	ands	r3, r2
 8001248:	d101      	bne.n	800124e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800124e:	2300      	movs	r3, #0
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	b002      	add	sp, #8
 8001256:	bd80      	pop	{r7, pc}

08001258 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	211f      	movs	r1, #31
 800126c:	400a      	ands	r2, r1
 800126e:	210f      	movs	r1, #15
 8001270:	4091      	lsls	r1, r2
 8001272:	000a      	movs	r2, r1
 8001274:	43d2      	mvns	r2, r2
 8001276:	401a      	ands	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	0e9b      	lsrs	r3, r3, #26
 800127c:	210f      	movs	r1, #15
 800127e:	4019      	ands	r1, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	201f      	movs	r0, #31
 8001284:	4003      	ands	r3, r0
 8001286:	4099      	lsls	r1, r3
 8001288:	000b      	movs	r3, r1
 800128a:	431a      	orrs	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b004      	add	sp, #16
 8001296:	bd80      	pop	{r7, pc}

08001298 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	035b      	lsls	r3, r3, #13
 80012aa:	0b5b      	lsrs	r3, r3, #13
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}

080012ba <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	0352      	lsls	r2, r2, #13
 80012cc:	0b52      	lsrs	r2, r2, #13
 80012ce:	43d2      	mvns	r2, r2
 80012d0:	401a      	ands	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	0212      	lsls	r2, r2, #8
 80012f4:	43d2      	mvns	r2, r2
 80012f6:	401a      	ands	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	400b      	ands	r3, r1
 8001300:	4904      	ldr	r1, [pc, #16]	; (8001314 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001302:	400b      	ands	r3, r1
 8001304:	431a      	orrs	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	46bd      	mov	sp, r7
 800130e:	b004      	add	sp, #16
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	07ffff00 	.word	0x07ffff00

08001318 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	4a05      	ldr	r2, [pc, #20]	; (800133c <LL_ADC_EnableInternalRegulator+0x24>)
 8001326:	4013      	ands	r3, r2
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	0552      	lsls	r2, r2, #21
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	b002      	add	sp, #8
 8001338:	bd80      	pop	{r7, pc}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	6fffffe8 	.word	0x6fffffe8

08001340 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	055b      	lsls	r3, r3, #21
 8001350:	401a      	ands	r2, r3
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	055b      	lsls	r3, r3, #21
 8001356:	429a      	cmp	r2, r3
 8001358:	d101      	bne.n	800135e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800135e:	2300      	movs	r3, #0
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}

08001368 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <LL_ADC_Enable+0x20>)
 8001376:	4013      	ands	r3, r2
 8001378:	2201      	movs	r2, #1
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	b002      	add	sp, #8
 8001386:	bd80      	pop	{r7, pc}
 8001388:	7fffffe8 	.word	0x7fffffe8

0800138c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <LL_ADC_Disable+0x20>)
 800139a:	4013      	ands	r3, r2
 800139c:	2202      	movs	r2, #2
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	7fffffe8 	.word	0x7fffffe8

080013b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2201      	movs	r2, #1
 80013be:	4013      	ands	r3, r2
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d101      	bne.n	80013c8 <LL_ADC_IsEnabled+0x18>
 80013c4:	2301      	movs	r3, #1
 80013c6:	e000      	b.n	80013ca <LL_ADC_IsEnabled+0x1a>
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	0018      	movs	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b002      	add	sp, #8
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2202      	movs	r2, #2
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d101      	bne.n	80013ea <LL_ADC_IsDisableOngoing+0x18>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <LL_ADC_IsDisableOngoing+0x1a>
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b002      	add	sp, #8
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <LL_ADC_REG_StartConversion+0x20>)
 8001402:	4013      	ands	r3, r2
 8001404:	2204      	movs	r2, #4
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b002      	add	sp, #8
 8001412:	bd80      	pop	{r7, pc}
 8001414:	7fffffe8 	.word	0x7fffffe8

08001418 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <LL_ADC_REG_StopConversion+0x20>)
 8001426:	4013      	ands	r3, r2
 8001428:	2210      	movs	r2, #16
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b002      	add	sp, #8
 8001436:	bd80      	pop	{r7, pc}
 8001438:	7fffffe8 	.word	0x7fffffe8

0800143c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2204      	movs	r2, #4
 800144a:	4013      	ands	r3, r2
 800144c:	2b04      	cmp	r3, #4
 800144e:	d101      	bne.n	8001454 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001454:	2300      	movs	r3, #0
}
 8001456:	0018      	movs	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	b002      	add	sp, #8
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001468:	231f      	movs	r3, #31
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e17f      	b.n	8001786 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10a      	bne.n	80014a4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	0018      	movs	r0, r3
 8001492:	f7ff fc2f 	bl	8000cf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2254      	movs	r2, #84	; 0x54
 80014a0:	2100      	movs	r1, #0
 80014a2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff ff49 	bl	8001340 <LL_ADC_IsInternalRegulatorEnabled>
 80014ae:	1e03      	subs	r3, r0, #0
 80014b0:	d115      	bne.n	80014de <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	0018      	movs	r0, r3
 80014b8:	f7ff ff2e 	bl	8001318 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014bc:	4bb4      	ldr	r3, [pc, #720]	; (8001790 <HAL_ADC_Init+0x330>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	49b4      	ldr	r1, [pc, #720]	; (8001794 <HAL_ADC_Init+0x334>)
 80014c2:	0018      	movs	r0, r3
 80014c4:	f7fe fe26 	bl	8000114 <__udivsi3>
 80014c8:	0003      	movs	r3, r0
 80014ca:	3301      	adds	r3, #1
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014d0:	e002      	b.n	80014d8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f9      	bne.n	80014d2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	0018      	movs	r0, r3
 80014e4:	f7ff ff2c 	bl	8001340 <LL_ADC_IsInternalRegulatorEnabled>
 80014e8:	1e03      	subs	r3, r0, #0
 80014ea:	d10f      	bne.n	800150c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f0:	2210      	movs	r2, #16
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fc:	2201      	movs	r2, #1
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001504:	231f      	movs	r3, #31
 8001506:	18fb      	adds	r3, r7, r3
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff ff93 	bl	800143c <LL_ADC_REG_IsConversionOngoing>
 8001516:	0003      	movs	r3, r0
 8001518:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151e:	2210      	movs	r2, #16
 8001520:	4013      	ands	r3, r2
 8001522:	d000      	beq.n	8001526 <HAL_ADC_Init+0xc6>
 8001524:	e122      	b.n	800176c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d000      	beq.n	800152e <HAL_ADC_Init+0xce>
 800152c:	e11e      	b.n	800176c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	4a99      	ldr	r2, [pc, #612]	; (8001798 <HAL_ADC_Init+0x338>)
 8001534:	4013      	ands	r3, r2
 8001536:	2202      	movs	r2, #2
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	0018      	movs	r0, r3
 8001544:	f7ff ff34 	bl	80013b0 <LL_ADC_IsEnabled>
 8001548:	1e03      	subs	r3, r0, #0
 800154a:	d000      	beq.n	800154e <HAL_ADC_Init+0xee>
 800154c:	e0ad      	b.n	80016aa <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7e1b      	ldrb	r3, [r3, #24]
 8001556:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001558:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7e5b      	ldrb	r3, [r3, #25]
 800155e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001560:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7e9b      	ldrb	r3, [r3, #26]
 8001566:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001568:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	2b00      	cmp	r3, #0
 8001570:	d002      	beq.n	8001578 <HAL_ADC_Init+0x118>
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	015b      	lsls	r3, r3, #5
 8001576:	e000      	b.n	800157a <HAL_ADC_Init+0x11a>
 8001578:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800157a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001580:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	2b00      	cmp	r3, #0
 8001588:	da04      	bge.n	8001594 <HAL_ADC_Init+0x134>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	e001      	b.n	8001598 <HAL_ADC_Init+0x138>
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001598:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	212c      	movs	r1, #44	; 0x2c
 800159e:	5c5b      	ldrb	r3, [r3, r1]
 80015a0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80015a2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2220      	movs	r2, #32
 80015ae:	5c9b      	ldrb	r3, [r3, r2]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d115      	bne.n	80015e0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7e9b      	ldrb	r3, [r3, #26]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d105      	bne.n	80015c8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	0252      	lsls	r2, r2, #9
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	e00b      	b.n	80015e0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	2220      	movs	r2, #32
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d8:	2201      	movs	r2, #1
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00a      	beq.n	80015fe <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ec:	23e0      	movs	r3, #224	; 0xe0
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015f6:	4313      	orrs	r3, r2
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4a65      	ldr	r2, [pc, #404]	; (800179c <HAL_ADC_Init+0x33c>)
 8001606:	4013      	ands	r3, r2
 8001608:	0019      	movs	r1, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	430a      	orrs	r2, r1
 8001612:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	0f9b      	lsrs	r3, r3, #30
 800161a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001620:	4313      	orrs	r3, r2
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	4313      	orrs	r3, r2
 8001626:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	223c      	movs	r2, #60	; 0x3c
 800162c:	5c9b      	ldrb	r3, [r3, r2]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d111      	bne.n	8001656 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	0f9b      	lsrs	r3, r3, #30
 8001638:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800163e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001644:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800164a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	4313      	orrs	r3, r2
 8001650:	2201      	movs	r2, #1
 8001652:	4313      	orrs	r3, r2
 8001654:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	4a50      	ldr	r2, [pc, #320]	; (80017a0 <HAL_ADC_Init+0x340>)
 800165e:	4013      	ands	r3, r2
 8001660:	0019      	movs	r1, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	430a      	orrs	r2, r1
 800166a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	23c0      	movs	r3, #192	; 0xc0
 8001672:	061b      	lsls	r3, r3, #24
 8001674:	429a      	cmp	r2, r3
 8001676:	d018      	beq.n	80016aa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	05db      	lsls	r3, r3, #23
 8001680:	429a      	cmp	r2, r3
 8001682:	d012      	beq.n	80016aa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	061b      	lsls	r3, r3, #24
 800168c:	429a      	cmp	r2, r3
 800168e:	d00c      	beq.n	80016aa <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001690:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <HAL_ADC_Init+0x344>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a44      	ldr	r2, [pc, #272]	; (80017a8 <HAL_ADC_Init+0x348>)
 8001696:	4013      	ands	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	23f0      	movs	r3, #240	; 0xf0
 80016a0:	039b      	lsls	r3, r3, #14
 80016a2:	401a      	ands	r2, r3
 80016a4:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <HAL_ADC_Init+0x344>)
 80016a6:	430a      	orrs	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b2:	001a      	movs	r2, r3
 80016b4:	2100      	movs	r1, #0
 80016b6:	f7ff fd8a 	bl	80011ce <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c2:	493a      	ldr	r1, [pc, #232]	; (80017ac <HAL_ADC_Init+0x34c>)
 80016c4:	001a      	movs	r2, r3
 80016c6:	f7ff fd82 	bl	80011ce <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2110      	movs	r1, #16
 80016de:	4249      	negs	r1, r1
 80016e0:	430a      	orrs	r2, r1
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28
 80016e4:	e018      	b.n	8001718 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	039b      	lsls	r3, r3, #14
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d112      	bne.n	8001718 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	221c      	movs	r2, #28
 8001702:	4013      	ands	r3, r2
 8001704:	2210      	movs	r2, #16
 8001706:	4252      	negs	r2, r2
 8001708:	409a      	lsls	r2, r3
 800170a:	0011      	movs	r1, r2
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2100      	movs	r1, #0
 800171e:	0018      	movs	r0, r3
 8001720:	f7ff fd72 	bl	8001208 <LL_ADC_GetSamplingTimeCommonChannels>
 8001724:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800172a:	429a      	cmp	r2, r3
 800172c:	d10b      	bne.n	8001746 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	2203      	movs	r2, #3
 800173a:	4393      	bics	r3, r2
 800173c:	2201      	movs	r2, #1
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001744:	e01c      	b.n	8001780 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	2212      	movs	r2, #18
 800174c:	4393      	bics	r3, r2
 800174e:	2210      	movs	r2, #16
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175a:	2201      	movs	r2, #1
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001762:	231f      	movs	r3, #31
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800176a:	e009      	b.n	8001780 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	2210      	movs	r2, #16
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001778:	231f      	movs	r3, #31
 800177a:	18fb      	adds	r3, r7, r3
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001780:	231f      	movs	r3, #31
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	781b      	ldrb	r3, [r3, #0]
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b008      	add	sp, #32
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	20000000 	.word	0x20000000
 8001794:	00030d40 	.word	0x00030d40
 8001798:	fffffefd 	.word	0xfffffefd
 800179c:	fffe0201 	.word	0xfffe0201
 80017a0:	1ffffc02 	.word	0x1ffffc02
 80017a4:	40012708 	.word	0x40012708
 80017a8:	ffc3ffff 	.word	0xffc3ffff
 80017ac:	07ffff04 	.word	0x07ffff04

080017b0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	0018      	movs	r0, r3
 80017be:	f7ff fe3d 	bl	800143c <LL_ADC_REG_IsConversionOngoing>
 80017c2:	1e03      	subs	r3, r0, #0
 80017c4:	d135      	bne.n	8001832 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2254      	movs	r2, #84	; 0x54
 80017ca:	5c9b      	ldrb	r3, [r3, r2]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_ADC_Start+0x24>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e035      	b.n	8001840 <HAL_ADC_Start+0x90>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2254      	movs	r2, #84	; 0x54
 80017d8:	2101      	movs	r1, #1
 80017da:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017dc:	250f      	movs	r5, #15
 80017de:	197c      	adds	r4, r7, r5
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 fb28 	bl	8001e38 <ADC_Enable>
 80017e8:	0003      	movs	r3, r0
 80017ea:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017ec:	197b      	adds	r3, r7, r5
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d119      	bne.n	8001828 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	4a13      	ldr	r2, [pc, #76]	; (8001848 <HAL_ADC_Start+0x98>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	0052      	lsls	r2, r2, #1
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	221c      	movs	r2, #28
 8001812:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2254      	movs	r2, #84	; 0x54
 8001818:	2100      	movs	r1, #0
 800181a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	0018      	movs	r0, r3
 8001822:	f7ff fde7 	bl	80013f4 <LL_ADC_REG_StartConversion>
 8001826:	e008      	b.n	800183a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2254      	movs	r2, #84	; 0x54
 800182c:	2100      	movs	r1, #0
 800182e:	5499      	strb	r1, [r3, r2]
 8001830:	e003      	b.n	800183a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001832:	230f      	movs	r3, #15
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	2202      	movs	r2, #2
 8001838:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800183a:	230f      	movs	r3, #15
 800183c:	18fb      	adds	r3, r7, r3
 800183e:	781b      	ldrb	r3, [r3, #0]
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b004      	add	sp, #16
 8001846:	bdb0      	pop	{r4, r5, r7, pc}
 8001848:	fffff0fe 	.word	0xfffff0fe

0800184c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2254      	movs	r2, #84	; 0x54
 8001858:	5c9b      	ldrb	r3, [r3, r2]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_ADC_Stop+0x16>
 800185e:	2302      	movs	r3, #2
 8001860:	e029      	b.n	80018b6 <HAL_ADC_Stop+0x6a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2254      	movs	r2, #84	; 0x54
 8001866:	2101      	movs	r1, #1
 8001868:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800186a:	250f      	movs	r5, #15
 800186c:	197c      	adds	r4, r7, r5
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	0018      	movs	r0, r3
 8001872:	f000 fa9f 	bl	8001db4 <ADC_ConversionStop>
 8001876:	0003      	movs	r3, r0
 8001878:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800187a:	197b      	adds	r3, r7, r5
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d112      	bne.n	80018a8 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001882:	197c      	adds	r4, r7, r5
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	0018      	movs	r0, r3
 8001888:	f000 fb5c 	bl	8001f44 <ADC_Disable>
 800188c:	0003      	movs	r3, r0
 800188e:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001890:	197b      	adds	r3, r7, r5
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d107      	bne.n	80018a8 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <HAL_ADC_Stop+0x74>)
 800189e:	4013      	ands	r3, r2
 80018a0:	2201      	movs	r2, #1
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2254      	movs	r2, #84	; 0x54
 80018ac:	2100      	movs	r1, #0
 80018ae:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80018b0:	230f      	movs	r3, #15
 80018b2:	18fb      	adds	r3, r7, r3
 80018b4:	781b      	ldrb	r3, [r3, #0]
}
 80018b6:	0018      	movs	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b004      	add	sp, #16
 80018bc:	bdb0      	pop	{r4, r5, r7, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	fffffefe 	.word	0xfffffefe

080018c4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d102      	bne.n	80018dc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80018d6:	2308      	movs	r3, #8
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e00f      	b.n	80018fc <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	4013      	ands	r3, r2
 80018e6:	d007      	beq.n	80018f8 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ec:	2220      	movs	r2, #32
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e072      	b.n	80019de <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80018f8:	2304      	movs	r3, #4
 80018fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80018fc:	f7ff fc18 	bl	8001130 <HAL_GetTick>
 8001900:	0003      	movs	r3, r0
 8001902:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001904:	e01f      	b.n	8001946 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	d01c      	beq.n	8001946 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800190c:	f7ff fc10 	bl	8001130 <HAL_GetTick>
 8001910:	0002      	movs	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d302      	bcc.n	8001922 <HAL_ADC_PollForConversion+0x5e>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d111      	bne.n	8001946 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4013      	ands	r3, r2
 800192c:	d10b      	bne.n	8001946 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	2204      	movs	r2, #4
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2254      	movs	r2, #84	; 0x54
 800193e:	2100      	movs	r1, #0
 8001940:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e04b      	b.n	80019de <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	4013      	ands	r3, r2
 8001950:	d0d9      	beq.n	8001906 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff fc66 	bl	8001236 <LL_ADC_REG_IsTriggerSourceSWStart>
 800196a:	1e03      	subs	r3, r0, #0
 800196c:	d02e      	beq.n	80019cc <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7e9b      	ldrb	r3, [r3, #26]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d12a      	bne.n	80019cc <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2208      	movs	r2, #8
 800197e:	4013      	ands	r3, r2
 8001980:	2b08      	cmp	r3, #8
 8001982:	d123      	bne.n	80019cc <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	0018      	movs	r0, r3
 800198a:	f7ff fd57 	bl	800143c <LL_ADC_REG_IsConversionOngoing>
 800198e:	1e03      	subs	r3, r0, #0
 8001990:	d110      	bne.n	80019b4 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	210c      	movs	r1, #12
 800199e:	438a      	bics	r2, r1
 80019a0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	4a10      	ldr	r2, [pc, #64]	; (80019e8 <HAL_ADC_PollForConversion+0x124>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	2201      	movs	r2, #1
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	659a      	str	r2, [r3, #88]	; 0x58
 80019b2:	e00b      	b.n	80019cc <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	2220      	movs	r2, #32
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c4:	2201      	movs	r2, #1
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7e1b      	ldrb	r3, [r3, #24]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d103      	bne.n	80019dc <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	220c      	movs	r2, #12
 80019da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	0018      	movs	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b004      	add	sp, #16
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	fffffefe 	.word	0xfffffefe

080019ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80019fa:	0018      	movs	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b002      	add	sp, #8
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a0e:	2317      	movs	r3, #23
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2254      	movs	r2, #84	; 0x54
 8001a1e:	5c9b      	ldrb	r3, [r3, r2]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x24>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e1c0      	b.n	8001daa <HAL_ADC_ConfigChannel+0x3a6>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2254      	movs	r2, #84	; 0x54
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7ff fd01 	bl	800143c <LL_ADC_REG_IsConversionOngoing>
 8001a3a:	1e03      	subs	r3, r0, #0
 8001a3c:	d000      	beq.n	8001a40 <HAL_ADC_ConfigChannel+0x3c>
 8001a3e:	e1a3      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d100      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x46>
 8001a48:	e143      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	061b      	lsls	r3, r3, #24
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d004      	beq.n	8001a60 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a5a:	4ac1      	ldr	r2, [pc, #772]	; (8001d60 <HAL_ADC_ConfigChannel+0x35c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d108      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0019      	movs	r1, r3
 8001a6a:	0010      	movs	r0, r2
 8001a6c:	f7ff fc14 	bl	8001298 <LL_ADC_REG_SetSequencerChAdd>
 8001a70:	e0c9      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	211f      	movs	r1, #31
 8001a7c:	400b      	ands	r3, r1
 8001a7e:	210f      	movs	r1, #15
 8001a80:	4099      	lsls	r1, r3
 8001a82:	000b      	movs	r3, r1
 8001a84:	43db      	mvns	r3, r3
 8001a86:	4013      	ands	r3, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	035b      	lsls	r3, r3, #13
 8001a90:	0b5b      	lsrs	r3, r3, #13
 8001a92:	d105      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x9c>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	0e9b      	lsrs	r3, r3, #26
 8001a9a:	221f      	movs	r2, #31
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	e098      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d000      	beq.n	8001aac <HAL_ADC_ConfigChannel+0xa8>
 8001aaa:	e091      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x1cc>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d000      	beq.n	8001ab8 <HAL_ADC_ConfigChannel+0xb4>
 8001ab6:	e089      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x1c8>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2204      	movs	r2, #4
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d000      	beq.n	8001ac4 <HAL_ADC_ConfigChannel+0xc0>
 8001ac2:	e081      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x1c4>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2208      	movs	r2, #8
 8001aca:	4013      	ands	r3, r2
 8001acc:	d000      	beq.n	8001ad0 <HAL_ADC_ConfigChannel+0xcc>
 8001ace:	e079      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x1c0>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2210      	movs	r2, #16
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d000      	beq.n	8001adc <HAL_ADC_ConfigChannel+0xd8>
 8001ada:	e071      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x1bc>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d000      	beq.n	8001ae8 <HAL_ADC_ConfigChannel+0xe4>
 8001ae6:	e069      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x1b8>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2240      	movs	r2, #64	; 0x40
 8001aee:	4013      	ands	r3, r2
 8001af0:	d000      	beq.n	8001af4 <HAL_ADC_ConfigChannel+0xf0>
 8001af2:	e061      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x1b4>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	4013      	ands	r3, r2
 8001afc:	d000      	beq.n	8001b00 <HAL_ADC_ConfigChannel+0xfc>
 8001afe:	e059      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x1b0>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d151      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1ac>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4013      	ands	r3, r2
 8001b16:	d149      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x1a8>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4013      	ands	r3, r2
 8001b22:	d141      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x1a4>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d139      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1a0>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	015b      	lsls	r3, r3, #5
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d131      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x19c>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	019b      	lsls	r3, r3, #6
 8001b44:	4013      	ands	r3, r2
 8001b46:	d129      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x198>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	01db      	lsls	r3, r3, #7
 8001b50:	4013      	ands	r3, r2
 8001b52:	d121      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x194>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d119      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x190>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	025b      	lsls	r3, r3, #9
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d111      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x18c>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	029b      	lsls	r3, r3, #10
 8001b74:	4013      	ands	r3, r2
 8001b76:	d109      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x188>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	02db      	lsls	r3, r3, #11
 8001b80:	4013      	ands	r3, r2
 8001b82:	d001      	beq.n	8001b88 <HAL_ADC_ConfigChannel+0x184>
 8001b84:	2312      	movs	r3, #18
 8001b86:	e024      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e022      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001b8c:	2311      	movs	r3, #17
 8001b8e:	e020      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001b90:	2310      	movs	r3, #16
 8001b92:	e01e      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001b94:	230f      	movs	r3, #15
 8001b96:	e01c      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001b98:	230e      	movs	r3, #14
 8001b9a:	e01a      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001b9c:	230d      	movs	r3, #13
 8001b9e:	e018      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ba0:	230c      	movs	r3, #12
 8001ba2:	e016      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ba4:	230b      	movs	r3, #11
 8001ba6:	e014      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ba8:	230a      	movs	r3, #10
 8001baa:	e012      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bac:	2309      	movs	r3, #9
 8001bae:	e010      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	e00e      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bb4:	2307      	movs	r3, #7
 8001bb6:	e00c      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bb8:	2306      	movs	r3, #6
 8001bba:	e00a      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bbc:	2305      	movs	r3, #5
 8001bbe:	e008      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	e006      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e004      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e002      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	6852      	ldr	r2, [r2, #4]
 8001bd6:	201f      	movs	r0, #31
 8001bd8:	4002      	ands	r2, r0
 8001bda:	4093      	lsls	r3, r2
 8001bdc:	000a      	movs	r2, r1
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d808      	bhi.n	8001c06 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	001a      	movs	r2, r3
 8001c02:	f7ff fb29 	bl	8001258 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6819      	ldr	r1, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	001a      	movs	r2, r3
 8001c14:	f7ff fb64 	bl	80012e0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db00      	blt.n	8001c22 <HAL_ADC_ConfigChannel+0x21e>
 8001c20:	e0bc      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c22:	4b50      	ldr	r3, [pc, #320]	; (8001d64 <HAL_ADC_ConfigChannel+0x360>)
 8001c24:	0018      	movs	r0, r3
 8001c26:	f7ff fac5 	bl	80011b4 <LL_ADC_GetCommonPathInternalCh>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a4d      	ldr	r2, [pc, #308]	; (8001d68 <HAL_ADC_ConfigChannel+0x364>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d122      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	041b      	lsls	r3, r3, #16
 8001c3e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c40:	d11d      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2280      	movs	r2, #128	; 0x80
 8001c46:	0412      	lsls	r2, r2, #16
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	4a46      	ldr	r2, [pc, #280]	; (8001d64 <HAL_ADC_ConfigChannel+0x360>)
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	0010      	movs	r0, r2
 8001c50:	f7ff fa9c 	bl	800118c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c54:	4b45      	ldr	r3, [pc, #276]	; (8001d6c <HAL_ADC_ConfigChannel+0x368>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4945      	ldr	r1, [pc, #276]	; (8001d70 <HAL_ADC_ConfigChannel+0x36c>)
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f7fe fa5a 	bl	8000114 <__udivsi3>
 8001c60:	0003      	movs	r3, r0
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	0013      	movs	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	189b      	adds	r3, r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c6e:	e002      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f9      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c7c:	e08e      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a3c      	ldr	r2, [pc, #240]	; (8001d74 <HAL_ADC_ConfigChannel+0x370>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d10e      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	045b      	lsls	r3, r3, #17
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d109      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2280      	movs	r2, #128	; 0x80
 8001c96:	0452      	lsls	r2, r2, #17
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	4a32      	ldr	r2, [pc, #200]	; (8001d64 <HAL_ADC_ConfigChannel+0x360>)
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	0010      	movs	r0, r2
 8001ca0:	f7ff fa74 	bl	800118c <LL_ADC_SetCommonPathInternalCh>
 8001ca4:	e07a      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a33      	ldr	r2, [pc, #204]	; (8001d78 <HAL_ADC_ConfigChannel+0x374>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d000      	beq.n	8001cb2 <HAL_ADC_ConfigChannel+0x2ae>
 8001cb0:	e074      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	03db      	lsls	r3, r3, #15
 8001cb8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cba:	d000      	beq.n	8001cbe <HAL_ADC_ConfigChannel+0x2ba>
 8001cbc:	e06e      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2280      	movs	r2, #128	; 0x80
 8001cc2:	03d2      	lsls	r2, r2, #15
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	4a27      	ldr	r2, [pc, #156]	; (8001d64 <HAL_ADC_ConfigChannel+0x360>)
 8001cc8:	0019      	movs	r1, r3
 8001cca:	0010      	movs	r0, r2
 8001ccc:	f7ff fa5e 	bl	800118c <LL_ADC_SetCommonPathInternalCh>
 8001cd0:	e064      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	061b      	lsls	r3, r3, #24
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d004      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ce2:	4a1f      	ldr	r2, [pc, #124]	; (8001d60 <HAL_ADC_ConfigChannel+0x35c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d107      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	0010      	movs	r0, r2
 8001cf4:	f7ff fae1 	bl	80012ba <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	da4d      	bge.n	8001d9c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_ADC_ConfigChannel+0x360>)
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7ff fa56 	bl	80011b4 <LL_ADC_GetCommonPathInternalCh>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a15      	ldr	r2, [pc, #84]	; (8001d68 <HAL_ADC_ConfigChannel+0x364>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d108      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <HAL_ADC_ConfigChannel+0x378>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	4a11      	ldr	r2, [pc, #68]	; (8001d64 <HAL_ADC_ConfigChannel+0x360>)
 8001d1e:	0019      	movs	r1, r3
 8001d20:	0010      	movs	r0, r2
 8001d22:	f7ff fa33 	bl	800118c <LL_ADC_SetCommonPathInternalCh>
 8001d26:	e039      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a11      	ldr	r2, [pc, #68]	; (8001d74 <HAL_ADC_ConfigChannel+0x370>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d108      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <HAL_ADC_ConfigChannel+0x37c>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_ADC_ConfigChannel+0x360>)
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	0010      	movs	r0, r2
 8001d3e:	f7ff fa25 	bl	800118c <LL_ADC_SetCommonPathInternalCh>
 8001d42:	e02b      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <HAL_ADC_ConfigChannel+0x374>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d126      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <HAL_ADC_ConfigChannel+0x380>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	4a03      	ldr	r2, [pc, #12]	; (8001d64 <HAL_ADC_ConfigChannel+0x360>)
 8001d56:	0019      	movs	r1, r3
 8001d58:	0010      	movs	r0, r2
 8001d5a:	f7ff fa17 	bl	800118c <LL_ADC_SetCommonPathInternalCh>
 8001d5e:	e01d      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x398>
 8001d60:	80000004 	.word	0x80000004
 8001d64:	40012708 	.word	0x40012708
 8001d68:	b0001000 	.word	0xb0001000
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	00030d40 	.word	0x00030d40
 8001d74:	b8004000 	.word	0xb8004000
 8001d78:	b4002000 	.word	0xb4002000
 8001d7c:	ff7fffff 	.word	0xff7fffff
 8001d80:	feffffff 	.word	0xfeffffff
 8001d84:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d94:	2317      	movs	r3, #23
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2254      	movs	r2, #84	; 0x54
 8001da0:	2100      	movs	r1, #0
 8001da2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001da4:	2317      	movs	r3, #23
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	781b      	ldrb	r3, [r3, #0]
}
 8001daa:	0018      	movs	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b006      	add	sp, #24
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)

08001db4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f7ff fb3b 	bl	800143c <LL_ADC_REG_IsConversionOngoing>
 8001dc6:	1e03      	subs	r3, r0, #0
 8001dc8:	d031      	beq.n	8001e2e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7ff faff 	bl	80013d2 <LL_ADC_IsDisableOngoing>
 8001dd4:	1e03      	subs	r3, r0, #0
 8001dd6:	d104      	bne.n	8001de2 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7ff fb1b 	bl	8001418 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001de2:	f7ff f9a5 	bl	8001130 <HAL_GetTick>
 8001de6:	0003      	movs	r3, r0
 8001de8:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001dea:	e01a      	b.n	8001e22 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001dec:	f7ff f9a0 	bl	8001130 <HAL_GetTick>
 8001df0:	0002      	movs	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d913      	bls.n	8001e22 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2204      	movs	r2, #4
 8001e02:	4013      	ands	r3, r2
 8001e04:	d00d      	beq.n	8001e22 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0a:	2210      	movs	r2, #16
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	2201      	movs	r2, #1
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e006      	b.n	8001e30 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2204      	movs	r2, #4
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d1de      	bne.n	8001dec <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b004      	add	sp, #16
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7ff fab1 	bl	80013b0 <LL_ADC_IsEnabled>
 8001e4e:	1e03      	subs	r3, r0, #0
 8001e50:	d000      	beq.n	8001e54 <ADC_Enable+0x1c>
 8001e52:	e069      	b.n	8001f28 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	4a36      	ldr	r2, [pc, #216]	; (8001f34 <ADC_Enable+0xfc>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d00d      	beq.n	8001e7c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	2210      	movs	r2, #16
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2201      	movs	r2, #1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e056      	b.n	8001f2a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7ff fa71 	bl	8001368 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <ADC_Enable+0x100>)
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f7ff f993 	bl	80011b4 <LL_ADC_GetCommonPathInternalCh>
 8001e8e:	0002      	movs	r2, r0
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	041b      	lsls	r3, r3, #16
 8001e94:	4013      	ands	r3, r2
 8001e96:	d00f      	beq.n	8001eb8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e98:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <ADC_Enable+0x104>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4928      	ldr	r1, [pc, #160]	; (8001f40 <ADC_Enable+0x108>)
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f7fe f938 	bl	8000114 <__udivsi3>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001ea8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001eaa:	e002      	b.n	8001eb2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f9      	bne.n	8001eac <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7e5b      	ldrb	r3, [r3, #25]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d033      	beq.n	8001f28 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001ec0:	f7ff f936 	bl	8001130 <HAL_GetTick>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ec8:	e027      	b.n	8001f1a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff fa6e 	bl	80013b0 <LL_ADC_IsEnabled>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d104      	bne.n	8001ee2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff fa43 	bl	8001368 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ee2:	f7ff f925 	bl	8001130 <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d914      	bls.n	8001f1a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d00d      	beq.n	8001f1a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	2210      	movs	r2, #16
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	2201      	movs	r2, #1
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e007      	b.n	8001f2a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2201      	movs	r2, #1
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d1d0      	bne.n	8001eca <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b004      	add	sp, #16
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	80000017 	.word	0x80000017
 8001f38:	40012708 	.word	0x40012708
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	00030d40 	.word	0x00030d40

08001f44 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7ff fa3e 	bl	80013d2 <LL_ADC_IsDisableOngoing>
 8001f56:	0003      	movs	r3, r0
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7ff fa26 	bl	80013b0 <LL_ADC_IsEnabled>
 8001f64:	1e03      	subs	r3, r0, #0
 8001f66:	d046      	beq.n	8001ff6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d143      	bne.n	8001ff6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2205      	movs	r2, #5
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d10d      	bne.n	8001f98 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7ff fa03 	bl	800138c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f8e:	f7ff f8cf 	bl	8001130 <HAL_GetTick>
 8001f92:	0003      	movs	r3, r0
 8001f94:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f96:	e028      	b.n	8001fea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa8:	2201      	movs	r2, #1
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e021      	b.n	8001ff8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fb4:	f7ff f8bc 	bl	8001130 <HAL_GetTick>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d913      	bls.n	8001fea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d00d      	beq.n	8001fea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	2201      	movs	r2, #1
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e006      	b.n	8001ff8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d1de      	bne.n	8001fb4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b004      	add	sp, #16
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	0002      	movs	r2, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b7f      	cmp	r3, #127	; 0x7f
 8002014:	d828      	bhi.n	8002068 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002016:	4a2f      	ldr	r2, [pc, #188]	; (80020d4 <__NVIC_SetPriority+0xd4>)
 8002018:	1dfb      	adds	r3, r7, #7
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	b25b      	sxtb	r3, r3
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	33c0      	adds	r3, #192	; 0xc0
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	589b      	ldr	r3, [r3, r2]
 8002026:	1dfa      	adds	r2, r7, #7
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	0011      	movs	r1, r2
 800202c:	2203      	movs	r2, #3
 800202e:	400a      	ands	r2, r1
 8002030:	00d2      	lsls	r2, r2, #3
 8002032:	21ff      	movs	r1, #255	; 0xff
 8002034:	4091      	lsls	r1, r2
 8002036:	000a      	movs	r2, r1
 8002038:	43d2      	mvns	r2, r2
 800203a:	401a      	ands	r2, r3
 800203c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	019b      	lsls	r3, r3, #6
 8002042:	22ff      	movs	r2, #255	; 0xff
 8002044:	401a      	ands	r2, r3
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	0018      	movs	r0, r3
 800204c:	2303      	movs	r3, #3
 800204e:	4003      	ands	r3, r0
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002054:	481f      	ldr	r0, [pc, #124]	; (80020d4 <__NVIC_SetPriority+0xd4>)
 8002056:	1dfb      	adds	r3, r7, #7
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b25b      	sxtb	r3, r3
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	430a      	orrs	r2, r1
 8002060:	33c0      	adds	r3, #192	; 0xc0
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002066:	e031      	b.n	80020cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002068:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <__NVIC_SetPriority+0xd8>)
 800206a:	1dfb      	adds	r3, r7, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	0019      	movs	r1, r3
 8002070:	230f      	movs	r3, #15
 8002072:	400b      	ands	r3, r1
 8002074:	3b08      	subs	r3, #8
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	3306      	adds	r3, #6
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	18d3      	adds	r3, r2, r3
 800207e:	3304      	adds	r3, #4
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	1dfa      	adds	r2, r7, #7
 8002084:	7812      	ldrb	r2, [r2, #0]
 8002086:	0011      	movs	r1, r2
 8002088:	2203      	movs	r2, #3
 800208a:	400a      	ands	r2, r1
 800208c:	00d2      	lsls	r2, r2, #3
 800208e:	21ff      	movs	r1, #255	; 0xff
 8002090:	4091      	lsls	r1, r2
 8002092:	000a      	movs	r2, r1
 8002094:	43d2      	mvns	r2, r2
 8002096:	401a      	ands	r2, r3
 8002098:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	019b      	lsls	r3, r3, #6
 800209e:	22ff      	movs	r2, #255	; 0xff
 80020a0:	401a      	ands	r2, r3
 80020a2:	1dfb      	adds	r3, r7, #7
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	0018      	movs	r0, r3
 80020a8:	2303      	movs	r3, #3
 80020aa:	4003      	ands	r3, r0
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020b0:	4809      	ldr	r0, [pc, #36]	; (80020d8 <__NVIC_SetPriority+0xd8>)
 80020b2:	1dfb      	adds	r3, r7, #7
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	001c      	movs	r4, r3
 80020b8:	230f      	movs	r3, #15
 80020ba:	4023      	ands	r3, r4
 80020bc:	3b08      	subs	r3, #8
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	430a      	orrs	r2, r1
 80020c2:	3306      	adds	r3, #6
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	18c3      	adds	r3, r0, r3
 80020c8:	3304      	adds	r3, #4
 80020ca:	601a      	str	r2, [r3, #0]
}
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b003      	add	sp, #12
 80020d2:	bd90      	pop	{r4, r7, pc}
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	1e5a      	subs	r2, r3, #1
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	045b      	lsls	r3, r3, #17
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d301      	bcc.n	80020f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f0:	2301      	movs	r3, #1
 80020f2:	e010      	b.n	8002116 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f4:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <SysTick_Config+0x44>)
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	3a01      	subs	r2, #1
 80020fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fc:	2301      	movs	r3, #1
 80020fe:	425b      	negs	r3, r3
 8002100:	2103      	movs	r1, #3
 8002102:	0018      	movs	r0, r3
 8002104:	f7ff ff7c 	bl	8002000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <SysTick_Config+0x44>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210e:	4b04      	ldr	r3, [pc, #16]	; (8002120 <SysTick_Config+0x44>)
 8002110:	2207      	movs	r2, #7
 8002112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002114:	2300      	movs	r3, #0
}
 8002116:	0018      	movs	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	b002      	add	sp, #8
 800211c:	bd80      	pop	{r7, pc}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	e000e010 	.word	0xe000e010

08002124 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	210f      	movs	r1, #15
 8002130:	187b      	adds	r3, r7, r1
 8002132:	1c02      	adds	r2, r0, #0
 8002134:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	187b      	adds	r3, r7, r1
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b25b      	sxtb	r3, r3
 800213e:	0011      	movs	r1, r2
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff ff5d 	bl	8002000 <__NVIC_SetPriority>
}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	46bd      	mov	sp, r7
 800214a:	b004      	add	sp, #16
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	0018      	movs	r0, r3
 800215a:	f7ff ffbf 	bl	80020dc <SysTick_Config>
 800215e:	0003      	movs	r3, r0
}
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	b002      	add	sp, #8
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e056      	b.n	8002228 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7f5b      	ldrb	r3, [r3, #29]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d106      	bne.n	8002192 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	0018      	movs	r0, r3
 800218e:	f7fe fdf5 	bl	8000d7c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	791b      	ldrb	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10c      	bne.n	80021ba <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a22      	ldr	r2, [pc, #136]	; (8002230 <HAL_CRC_Init+0xc8>)
 80021a6:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2118      	movs	r1, #24
 80021b4:	438a      	bics	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	e00b      	b.n	80021d2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6899      	ldr	r1, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f000 f835 	bl	8002234 <HAL_CRCEx_Polynomial_Set>
 80021ca:	1e03      	subs	r3, r0, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e02a      	b.n	8002228 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	795b      	ldrb	r3, [r3, #5]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d105      	bne.n	80021e6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2201      	movs	r2, #1
 80021e0:	4252      	negs	r2, r2
 80021e2:	611a      	str	r2, [r3, #16]
 80021e4:	e004      	b.n	80021f0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6912      	ldr	r2, [r2, #16]
 80021ee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2260      	movs	r2, #96	; 0x60
 80021f8:	4393      	bics	r3, r2
 80021fa:	0019      	movs	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2280      	movs	r2, #128	; 0x80
 8002210:	4393      	bics	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699a      	ldr	r2, [r3, #24]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	0018      	movs	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	b002      	add	sp, #8
 800222e:	bd80      	pop	{r7, pc}
 8002230:	04c11db7 	.word	0x04c11db7

08002234 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002240:	2317      	movs	r3, #23
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002248:	231f      	movs	r3, #31
 800224a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1e5a      	subs	r2, r3, #1
 8002252:	613a      	str	r2, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_CRCEx_Polynomial_Set+0x36>
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	221f      	movs	r2, #31
 800225c:	4013      	ands	r3, r2
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	40da      	lsrs	r2, r3
 8002262:	0013      	movs	r3, r2
 8002264:	2201      	movs	r2, #1
 8002266:	4013      	ands	r3, r2
 8002268:	d0f1      	beq.n	800224e <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b18      	cmp	r3, #24
 800226e:	d00f      	beq.n	8002290 <HAL_CRCEx_Polynomial_Set+0x5c>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b18      	cmp	r3, #24
 8002274:	d824      	bhi.n	80022c0 <HAL_CRCEx_Polynomial_Set+0x8c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b10      	cmp	r3, #16
 800227a:	d011      	beq.n	80022a0 <HAL_CRCEx_Polynomial_Set+0x6c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b10      	cmp	r3, #16
 8002280:	d81e      	bhi.n	80022c0 <HAL_CRCEx_Polynomial_Set+0x8c>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d020      	beq.n	80022ca <HAL_CRCEx_Polynomial_Set+0x96>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b08      	cmp	r3, #8
 800228c:	d010      	beq.n	80022b0 <HAL_CRCEx_Polynomial_Set+0x7c>
 800228e:	e017      	b.n	80022c0 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b06      	cmp	r3, #6
 8002294:	d91b      	bls.n	80022ce <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8002296:	2317      	movs	r3, #23
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800229e:	e016      	b.n	80022ce <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b07      	cmp	r3, #7
 80022a4:	d915      	bls.n	80022d2 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 80022a6:	2317      	movs	r3, #23
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
      }
      break;
 80022ae:	e010      	b.n	80022d2 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	2b0f      	cmp	r3, #15
 80022b4:	d90f      	bls.n	80022d6 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 80022b6:	2317      	movs	r3, #23
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80022be:	e00a      	b.n	80022d6 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80022c0:	2317      	movs	r3, #23
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
      break;
 80022c8:	e006      	b.n	80022d8 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	e004      	b.n	80022d8 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	e002      	b.n	80022d8 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	e000      	b.n	80022d8 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80022d6:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 80022d8:	2317      	movs	r3, #23
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10e      	bne.n	8002300 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2218      	movs	r2, #24
 80022f2:	4393      	bics	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002300:	2317      	movs	r3, #23
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	781b      	ldrb	r3, [r3, #0]
}
 8002306:	0018      	movs	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	b006      	add	sp, #24
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231e:	e147      	b.n	80025b0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2101      	movs	r1, #1
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4091      	lsls	r1, r2
 800232a:	000a      	movs	r2, r1
 800232c:	4013      	ands	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d100      	bne.n	8002338 <HAL_GPIO_Init+0x28>
 8002336:	e138      	b.n	80025aa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2203      	movs	r2, #3
 800233e:	4013      	ands	r3, r2
 8002340:	2b01      	cmp	r3, #1
 8002342:	d005      	beq.n	8002350 <HAL_GPIO_Init+0x40>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2203      	movs	r2, #3
 800234a:	4013      	ands	r3, r2
 800234c:	2b02      	cmp	r3, #2
 800234e:	d130      	bne.n	80023b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	409a      	lsls	r2, r3
 800235e:	0013      	movs	r3, r2
 8002360:	43da      	mvns	r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	409a      	lsls	r2, r3
 8002372:	0013      	movs	r3, r2
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002386:	2201      	movs	r2, #1
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	409a      	lsls	r2, r3
 800238c:	0013      	movs	r3, r2
 800238e:	43da      	mvns	r2, r3
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	091b      	lsrs	r3, r3, #4
 800239c:	2201      	movs	r2, #1
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
 80023a4:	0013      	movs	r3, r2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2203      	movs	r2, #3
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d017      	beq.n	80023ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	409a      	lsls	r2, r3
 80023cc:	0013      	movs	r3, r2
 80023ce:	43da      	mvns	r2, r3
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	409a      	lsls	r2, r3
 80023e0:	0013      	movs	r3, r2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2203      	movs	r2, #3
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d123      	bne.n	8002442 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	08da      	lsrs	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3208      	adds	r2, #8
 8002402:	0092      	lsls	r2, r2, #2
 8002404:	58d3      	ldr	r3, [r2, r3]
 8002406:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2207      	movs	r2, #7
 800240c:	4013      	ands	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	220f      	movs	r2, #15
 8002412:	409a      	lsls	r2, r3
 8002414:	0013      	movs	r3, r2
 8002416:	43da      	mvns	r2, r3
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2107      	movs	r1, #7
 8002426:	400b      	ands	r3, r1
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	409a      	lsls	r2, r3
 800242c:	0013      	movs	r3, r2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	08da      	lsrs	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3208      	adds	r2, #8
 800243c:	0092      	lsls	r2, r2, #2
 800243e:	6939      	ldr	r1, [r7, #16]
 8002440:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	2203      	movs	r2, #3
 800244e:	409a      	lsls	r2, r3
 8002450:	0013      	movs	r3, r2
 8002452:	43da      	mvns	r2, r3
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2203      	movs	r2, #3
 8002460:	401a      	ands	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	409a      	lsls	r2, r3
 8002468:	0013      	movs	r3, r2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	23c0      	movs	r3, #192	; 0xc0
 800247c:	029b      	lsls	r3, r3, #10
 800247e:	4013      	ands	r3, r2
 8002480:	d100      	bne.n	8002484 <HAL_GPIO_Init+0x174>
 8002482:	e092      	b.n	80025aa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002484:	4a50      	ldr	r2, [pc, #320]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	089b      	lsrs	r3, r3, #2
 800248a:	3318      	adds	r3, #24
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	589b      	ldr	r3, [r3, r2]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2203      	movs	r2, #3
 8002496:	4013      	ands	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	220f      	movs	r2, #15
 800249c:	409a      	lsls	r2, r3
 800249e:	0013      	movs	r3, r2
 80024a0:	43da      	mvns	r2, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	23a0      	movs	r3, #160	; 0xa0
 80024ac:	05db      	lsls	r3, r3, #23
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d013      	beq.n	80024da <HAL_GPIO_Init+0x1ca>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a45      	ldr	r2, [pc, #276]	; (80025cc <HAL_GPIO_Init+0x2bc>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00d      	beq.n	80024d6 <HAL_GPIO_Init+0x1c6>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a44      	ldr	r2, [pc, #272]	; (80025d0 <HAL_GPIO_Init+0x2c0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d007      	beq.n	80024d2 <HAL_GPIO_Init+0x1c2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a43      	ldr	r2, [pc, #268]	; (80025d4 <HAL_GPIO_Init+0x2c4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d101      	bne.n	80024ce <HAL_GPIO_Init+0x1be>
 80024ca:	2303      	movs	r3, #3
 80024cc:	e006      	b.n	80024dc <HAL_GPIO_Init+0x1cc>
 80024ce:	2305      	movs	r3, #5
 80024d0:	e004      	b.n	80024dc <HAL_GPIO_Init+0x1cc>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e002      	b.n	80024dc <HAL_GPIO_Init+0x1cc>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <HAL_GPIO_Init+0x1cc>
 80024da:	2300      	movs	r3, #0
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	2103      	movs	r1, #3
 80024e0:	400a      	ands	r2, r1
 80024e2:	00d2      	lsls	r2, r2, #3
 80024e4:	4093      	lsls	r3, r2
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80024ec:	4936      	ldr	r1, [pc, #216]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	089b      	lsrs	r3, r3, #2
 80024f2:	3318      	adds	r3, #24
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024fa:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43da      	mvns	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	035b      	lsls	r3, r3, #13
 8002512:	4013      	ands	r3, r2
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800251e:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002524:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43da      	mvns	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	039b      	lsls	r3, r3, #14
 800253c:	4013      	ands	r3, r2
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002548:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800254e:	4a1e      	ldr	r2, [pc, #120]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 8002550:	2384      	movs	r3, #132	; 0x84
 8002552:	58d3      	ldr	r3, [r2, r3]
 8002554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	43da      	mvns	r2, r3
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	029b      	lsls	r3, r3, #10
 8002568:	4013      	ands	r3, r2
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002574:	4914      	ldr	r1, [pc, #80]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 8002576:	2284      	movs	r2, #132	; 0x84
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800257c:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	58d3      	ldr	r3, [r2, r3]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	43da      	mvns	r2, r3
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	025b      	lsls	r3, r3, #9
 8002596:	4013      	ands	r3, r2
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025a2:	4909      	ldr	r1, [pc, #36]	; (80025c8 <HAL_GPIO_Init+0x2b8>)
 80025a4:	2280      	movs	r2, #128	; 0x80
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3301      	adds	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	40da      	lsrs	r2, r3
 80025b8:	1e13      	subs	r3, r2, #0
 80025ba:	d000      	beq.n	80025be <HAL_GPIO_Init+0x2ae>
 80025bc:	e6b0      	b.n	8002320 <HAL_GPIO_Init+0x10>
  }
}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b006      	add	sp, #24
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021800 	.word	0x40021800
 80025cc:	50000400 	.word	0x50000400
 80025d0:	50000800 	.word	0x50000800
 80025d4:	50000c00 	.word	0x50000c00

080025d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	0008      	movs	r0, r1
 80025e2:	0011      	movs	r1, r2
 80025e4:	1cbb      	adds	r3, r7, #2
 80025e6:	1c02      	adds	r2, r0, #0
 80025e8:	801a      	strh	r2, [r3, #0]
 80025ea:	1c7b      	adds	r3, r7, #1
 80025ec:	1c0a      	adds	r2, r1, #0
 80025ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025f0:	1c7b      	adds	r3, r7, #1
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d004      	beq.n	8002602 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025f8:	1cbb      	adds	r3, r7, #2
 80025fa:	881a      	ldrh	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002600:	e003      	b.n	800260a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002602:	1cbb      	adds	r3, r7, #2
 8002604:	881a      	ldrh	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	629a      	str	r2, [r3, #40]	; 0x28
}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	46bd      	mov	sp, r7
 800260e:	b002      	add	sp, #8
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a19      	ldr	r2, [pc, #100]	; (8002688 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002622:	4013      	ands	r3, r2
 8002624:	0019      	movs	r1, r3
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	430a      	orrs	r2, r1
 800262c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	429a      	cmp	r2, r3
 8002636:	d11f      	bne.n	8002678 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002638:	4b14      	ldr	r3, [pc, #80]	; (800268c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	0013      	movs	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	189b      	adds	r3, r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4912      	ldr	r1, [pc, #72]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002646:	0018      	movs	r0, r3
 8002648:	f7fd fd64 	bl	8000114 <__udivsi3>
 800264c:	0003      	movs	r3, r0
 800264e:	3301      	adds	r3, #1
 8002650:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002652:	e008      	b.n	8002666 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3b01      	subs	r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	e001      	b.n	8002666 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e009      	b.n	800267a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	401a      	ands	r2, r3
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	429a      	cmp	r2, r3
 8002676:	d0ed      	beq.n	8002654 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	0018      	movs	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	b004      	add	sp, #16
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	40007000 	.word	0x40007000
 8002688:	fffff9ff 	.word	0xfffff9ff
 800268c:	20000000 	.word	0x20000000
 8002690:	000f4240 	.word	0x000f4240

08002694 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	23e0      	movs	r3, #224	; 0xe0
 800269e:	01db      	lsls	r3, r3, #7
 80026a0:	4013      	ands	r3, r2
}
 80026a2:	0018      	movs	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000

080026ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e2f3      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2201      	movs	r2, #1
 80026c4:	4013      	ands	r3, r2
 80026c6:	d100      	bne.n	80026ca <HAL_RCC_OscConfig+0x1e>
 80026c8:	e07c      	b.n	80027c4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ca:	4bc3      	ldr	r3, [pc, #780]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2238      	movs	r2, #56	; 0x38
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026d4:	4bc0      	ldr	r3, [pc, #768]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	2203      	movs	r2, #3
 80026da:	4013      	ands	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b10      	cmp	r3, #16
 80026e2:	d102      	bne.n	80026ea <HAL_RCC_OscConfig+0x3e>
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d002      	beq.n	80026f0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d10b      	bne.n	8002708 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	4bb9      	ldr	r3, [pc, #740]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	029b      	lsls	r3, r3, #10
 80026f8:	4013      	ands	r3, r2
 80026fa:	d062      	beq.n	80027c2 <HAL_RCC_OscConfig+0x116>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d15e      	bne.n	80027c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e2ce      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	025b      	lsls	r3, r3, #9
 8002710:	429a      	cmp	r2, r3
 8002712:	d107      	bne.n	8002724 <HAL_RCC_OscConfig+0x78>
 8002714:	4bb0      	ldr	r3, [pc, #704]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4baf      	ldr	r3, [pc, #700]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800271a:	2180      	movs	r1, #128	; 0x80
 800271c:	0249      	lsls	r1, r1, #9
 800271e:	430a      	orrs	r2, r1
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e020      	b.n	8002766 <HAL_RCC_OscConfig+0xba>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	23a0      	movs	r3, #160	; 0xa0
 800272a:	02db      	lsls	r3, r3, #11
 800272c:	429a      	cmp	r2, r3
 800272e:	d10e      	bne.n	800274e <HAL_RCC_OscConfig+0xa2>
 8002730:	4ba9      	ldr	r3, [pc, #676]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4ba8      	ldr	r3, [pc, #672]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	02c9      	lsls	r1, r1, #11
 800273a:	430a      	orrs	r2, r1
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	4ba6      	ldr	r3, [pc, #664]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4ba5      	ldr	r3, [pc, #660]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002744:	2180      	movs	r1, #128	; 0x80
 8002746:	0249      	lsls	r1, r1, #9
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e00b      	b.n	8002766 <HAL_RCC_OscConfig+0xba>
 800274e:	4ba2      	ldr	r3, [pc, #648]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4ba1      	ldr	r3, [pc, #644]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002754:	49a1      	ldr	r1, [pc, #644]	; (80029dc <HAL_RCC_OscConfig+0x330>)
 8002756:	400a      	ands	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	4b9f      	ldr	r3, [pc, #636]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4b9e      	ldr	r3, [pc, #632]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002760:	499f      	ldr	r1, [pc, #636]	; (80029e0 <HAL_RCC_OscConfig+0x334>)
 8002762:	400a      	ands	r2, r1
 8002764:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d014      	beq.n	8002798 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7fe fcdf 	bl	8001130 <HAL_GetTick>
 8002772:	0003      	movs	r3, r0
 8002774:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002778:	f7fe fcda 	bl	8001130 <HAL_GetTick>
 800277c:	0002      	movs	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e28d      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278a:	4b93      	ldr	r3, [pc, #588]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	029b      	lsls	r3, r3, #10
 8002792:	4013      	ands	r3, r2
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0xcc>
 8002796:	e015      	b.n	80027c4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe fcca 	bl	8001130 <HAL_GetTick>
 800279c:	0003      	movs	r3, r0
 800279e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a2:	f7fe fcc5 	bl	8001130 <HAL_GetTick>
 80027a6:	0002      	movs	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b64      	cmp	r3, #100	; 0x64
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e278      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027b4:	4b88      	ldr	r3, [pc, #544]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	029b      	lsls	r3, r3, #10
 80027bc:	4013      	ands	r3, r2
 80027be:	d1f0      	bne.n	80027a2 <HAL_RCC_OscConfig+0xf6>
 80027c0:	e000      	b.n	80027c4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2202      	movs	r2, #2
 80027ca:	4013      	ands	r3, r2
 80027cc:	d100      	bne.n	80027d0 <HAL_RCC_OscConfig+0x124>
 80027ce:	e099      	b.n	8002904 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d0:	4b81      	ldr	r3, [pc, #516]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2238      	movs	r2, #56	; 0x38
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027da:	4b7f      	ldr	r3, [pc, #508]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2203      	movs	r2, #3
 80027e0:	4013      	ands	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2b10      	cmp	r3, #16
 80027e8:	d102      	bne.n	80027f0 <HAL_RCC_OscConfig+0x144>
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d002      	beq.n	80027f6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d135      	bne.n	8002862 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f6:	4b78      	ldr	r3, [pc, #480]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4013      	ands	r3, r2
 8002800:	d005      	beq.n	800280e <HAL_RCC_OscConfig+0x162>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e24b      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280e:	4b72      	ldr	r3, [pc, #456]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4a74      	ldr	r2, [pc, #464]	; (80029e4 <HAL_RCC_OscConfig+0x338>)
 8002814:	4013      	ands	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	021a      	lsls	r2, r3, #8
 800281e:	4b6e      	ldr	r3, [pc, #440]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002820:	430a      	orrs	r2, r1
 8002822:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d112      	bne.n	8002850 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800282a:	4b6b      	ldr	r3, [pc, #428]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a6e      	ldr	r2, [pc, #440]	; (80029e8 <HAL_RCC_OscConfig+0x33c>)
 8002830:	4013      	ands	r3, r2
 8002832:	0019      	movs	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	4b67      	ldr	r3, [pc, #412]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800283a:	430a      	orrs	r2, r1
 800283c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800283e:	4b66      	ldr	r3, [pc, #408]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	0adb      	lsrs	r3, r3, #11
 8002844:	2207      	movs	r2, #7
 8002846:	4013      	ands	r3, r2
 8002848:	4a68      	ldr	r2, [pc, #416]	; (80029ec <HAL_RCC_OscConfig+0x340>)
 800284a:	40da      	lsrs	r2, r3
 800284c:	4b68      	ldr	r3, [pc, #416]	; (80029f0 <HAL_RCC_OscConfig+0x344>)
 800284e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002850:	4b68      	ldr	r3, [pc, #416]	; (80029f4 <HAL_RCC_OscConfig+0x348>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0018      	movs	r0, r3
 8002856:	f7fe fc0f 	bl	8001078 <HAL_InitTick>
 800285a:	1e03      	subs	r3, r0, #0
 800285c:	d051      	beq.n	8002902 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e221      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d030      	beq.n	80028cc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800286a:	4b5b      	ldr	r3, [pc, #364]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a5e      	ldr	r2, [pc, #376]	; (80029e8 <HAL_RCC_OscConfig+0x33c>)
 8002870:	4013      	ands	r3, r2
 8002872:	0019      	movs	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	4b57      	ldr	r3, [pc, #348]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800287a:	430a      	orrs	r2, r1
 800287c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800287e:	4b56      	ldr	r3, [pc, #344]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4b55      	ldr	r3, [pc, #340]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002884:	2180      	movs	r1, #128	; 0x80
 8002886:	0049      	lsls	r1, r1, #1
 8002888:	430a      	orrs	r2, r1
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fe fc50 	bl	8001130 <HAL_GetTick>
 8002890:	0003      	movs	r3, r0
 8002892:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002896:	f7fe fc4b 	bl	8001130 <HAL_GetTick>
 800289a:	0002      	movs	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e1fe      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a8:	4b4b      	ldr	r3, [pc, #300]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4013      	ands	r3, r2
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b4:	4b48      	ldr	r3, [pc, #288]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a4a      	ldr	r2, [pc, #296]	; (80029e4 <HAL_RCC_OscConfig+0x338>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	021a      	lsls	r2, r3, #8
 80028c4:	4b44      	ldr	r3, [pc, #272]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	e01b      	b.n	8002904 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80028cc:	4b42      	ldr	r3, [pc, #264]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b41      	ldr	r3, [pc, #260]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80028d2:	4949      	ldr	r1, [pc, #292]	; (80029f8 <HAL_RCC_OscConfig+0x34c>)
 80028d4:	400a      	ands	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fc2a 	bl	8001130 <HAL_GetTick>
 80028dc:	0003      	movs	r3, r0
 80028de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e2:	f7fe fc25 	bl	8001130 <HAL_GetTick>
 80028e6:	0002      	movs	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e1d8      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028f4:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4013      	ands	r3, r2
 80028fe:	d1f0      	bne.n	80028e2 <HAL_RCC_OscConfig+0x236>
 8002900:	e000      	b.n	8002904 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002902:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2208      	movs	r2, #8
 800290a:	4013      	ands	r3, r2
 800290c:	d047      	beq.n	800299e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800290e:	4b32      	ldr	r3, [pc, #200]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2238      	movs	r2, #56	; 0x38
 8002914:	4013      	ands	r3, r2
 8002916:	2b18      	cmp	r3, #24
 8002918:	d10a      	bne.n	8002930 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800291a:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800291c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291e:	2202      	movs	r2, #2
 8002920:	4013      	ands	r3, r2
 8002922:	d03c      	beq.n	800299e <HAL_RCC_OscConfig+0x2f2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d138      	bne.n	800299e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e1ba      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d019      	beq.n	800296c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002938:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800293a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800293c:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800293e:	2101      	movs	r1, #1
 8002940:	430a      	orrs	r2, r1
 8002942:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fe fbf4 	bl	8001130 <HAL_GetTick>
 8002948:	0003      	movs	r3, r0
 800294a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294e:	f7fe fbef 	bl	8001130 <HAL_GetTick>
 8002952:	0002      	movs	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e1a2      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002960:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002964:	2202      	movs	r2, #2
 8002966:	4013      	ands	r3, r2
 8002968:	d0f1      	beq.n	800294e <HAL_RCC_OscConfig+0x2a2>
 800296a:	e018      	b.n	800299e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800296c:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 800296e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002972:	2101      	movs	r1, #1
 8002974:	438a      	bics	r2, r1
 8002976:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fbda 	bl	8001130 <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002982:	f7fe fbd5 	bl	8001130 <HAL_GetTick>
 8002986:	0002      	movs	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e188      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002994:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 8002996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002998:	2202      	movs	r2, #2
 800299a:	4013      	ands	r3, r2
 800299c:	d1f1      	bne.n	8002982 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2204      	movs	r2, #4
 80029a4:	4013      	ands	r3, r2
 80029a6:	d100      	bne.n	80029aa <HAL_RCC_OscConfig+0x2fe>
 80029a8:	e0c6      	b.n	8002b38 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029aa:	231f      	movs	r3, #31
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2238      	movs	r2, #56	; 0x38
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d11e      	bne.n	80029fc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80029be:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_RCC_OscConfig+0x32c>)
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	2202      	movs	r2, #2
 80029c4:	4013      	ands	r3, r2
 80029c6:	d100      	bne.n	80029ca <HAL_RCC_OscConfig+0x31e>
 80029c8:	e0b6      	b.n	8002b38 <HAL_RCC_OscConfig+0x48c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d000      	beq.n	80029d4 <HAL_RCC_OscConfig+0x328>
 80029d2:	e0b1      	b.n	8002b38 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e166      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
 80029d8:	40021000 	.word	0x40021000
 80029dc:	fffeffff 	.word	0xfffeffff
 80029e0:	fffbffff 	.word	0xfffbffff
 80029e4:	ffff80ff 	.word	0xffff80ff
 80029e8:	ffffc7ff 	.word	0xffffc7ff
 80029ec:	00f42400 	.word	0x00f42400
 80029f0:	20000000 	.word	0x20000000
 80029f4:	20000004 	.word	0x20000004
 80029f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029fc:	4bac      	ldr	r3, [pc, #688]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 80029fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	055b      	lsls	r3, r3, #21
 8002a04:	4013      	ands	r3, r2
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_OscConfig+0x360>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <HAL_RCC_OscConfig+0x362>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d011      	beq.n	8002a36 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	4ba7      	ldr	r3, [pc, #668]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002a14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a16:	4ba6      	ldr	r3, [pc, #664]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	0549      	lsls	r1, r1, #21
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a20:	4ba3      	ldr	r3, [pc, #652]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	055b      	lsls	r3, r3, #21
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a2e:	231f      	movs	r3, #31
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a36:	4b9f      	ldr	r3, [pc, #636]	; (8002cb4 <HAL_RCC_OscConfig+0x608>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d11a      	bne.n	8002a78 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a42:	4b9c      	ldr	r3, [pc, #624]	; (8002cb4 <HAL_RCC_OscConfig+0x608>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	4b9b      	ldr	r3, [pc, #620]	; (8002cb4 <HAL_RCC_OscConfig+0x608>)
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	0049      	lsls	r1, r1, #1
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002a50:	f7fe fb6e 	bl	8001130 <HAL_GetTick>
 8002a54:	0003      	movs	r3, r0
 8002a56:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5a:	f7fe fb69 	bl	8001130 <HAL_GetTick>
 8002a5e:	0002      	movs	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e11c      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6c:	4b91      	ldr	r3, [pc, #580]	; (8002cb4 <HAL_RCC_OscConfig+0x608>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4013      	ands	r3, r2
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x3e2>
 8002a80:	4b8b      	ldr	r3, [pc, #556]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002a82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a84:	4b8a      	ldr	r3, [pc, #552]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002a86:	2101      	movs	r1, #1
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a8c:	e01c      	b.n	8002ac8 <HAL_RCC_OscConfig+0x41c>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x404>
 8002a96:	4b86      	ldr	r3, [pc, #536]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002a98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a9a:	4b85      	ldr	r3, [pc, #532]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002a9c:	2104      	movs	r1, #4
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002aa2:	4b83      	ldr	r3, [pc, #524]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002aa4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aa6:	4b82      	ldr	r3, [pc, #520]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	65da      	str	r2, [r3, #92]	; 0x5c
 8002aae:	e00b      	b.n	8002ac8 <HAL_RCC_OscConfig+0x41c>
 8002ab0:	4b7f      	ldr	r3, [pc, #508]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002ab2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ab4:	4b7e      	ldr	r3, [pc, #504]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	438a      	bics	r2, r1
 8002aba:	65da      	str	r2, [r3, #92]	; 0x5c
 8002abc:	4b7c      	ldr	r3, [pc, #496]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002abe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ac0:	4b7b      	ldr	r3, [pc, #492]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	438a      	bics	r2, r1
 8002ac6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d014      	beq.n	8002afa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fb2e 	bl	8001130 <HAL_GetTick>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad8:	e009      	b.n	8002aee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ada:	f7fe fb29 	bl	8001130 <HAL_GetTick>
 8002ade:	0002      	movs	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	4a74      	ldr	r2, [pc, #464]	; (8002cb8 <HAL_RCC_OscConfig+0x60c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0db      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aee:	4b70      	ldr	r3, [pc, #448]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af2:	2202      	movs	r2, #2
 8002af4:	4013      	ands	r3, r2
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x42e>
 8002af8:	e013      	b.n	8002b22 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afa:	f7fe fb19 	bl	8001130 <HAL_GetTick>
 8002afe:	0003      	movs	r3, r0
 8002b00:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b02:	e009      	b.n	8002b18 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe fb14 	bl	8001130 <HAL_GetTick>
 8002b08:	0002      	movs	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	4a6a      	ldr	r2, [pc, #424]	; (8002cb8 <HAL_RCC_OscConfig+0x60c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0c6      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b18:	4b65      	ldr	r3, [pc, #404]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b22:	231f      	movs	r3, #31
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b2c:	4b60      	ldr	r3, [pc, #384]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002b2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b30:	4b5f      	ldr	r3, [pc, #380]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002b32:	4962      	ldr	r1, [pc, #392]	; (8002cbc <HAL_RCC_OscConfig+0x610>)
 8002b34:	400a      	ands	r2, r1
 8002b36:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d100      	bne.n	8002b42 <HAL_RCC_OscConfig+0x496>
 8002b40:	e0b0      	b.n	8002ca4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b42:	4b5b      	ldr	r3, [pc, #364]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2238      	movs	r2, #56	; 0x38
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d100      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4a4>
 8002b4e:	e078      	b.n	8002c42 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d153      	bne.n	8002c00 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b58:	4b55      	ldr	r3, [pc, #340]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b54      	ldr	r3, [pc, #336]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002b5e:	4958      	ldr	r1, [pc, #352]	; (8002cc0 <HAL_RCC_OscConfig+0x614>)
 8002b60:	400a      	ands	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7fe fae4 	bl	8001130 <HAL_GetTick>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6e:	f7fe fadf 	bl	8001130 <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e092      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b80:	4b4b      	ldr	r3, [pc, #300]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	049b      	lsls	r3, r3, #18
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d1f0      	bne.n	8002b6e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b8c:	4b48      	ldr	r3, [pc, #288]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a4c      	ldr	r2, [pc, #304]	; (8002cc4 <HAL_RCC_OscConfig+0x618>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	0019      	movs	r1, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1a      	ldr	r2, [r3, #32]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	4b3e      	ldr	r3, [pc, #248]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bba:	4b3d      	ldr	r3, [pc, #244]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002bc0:	2180      	movs	r1, #128	; 0x80
 8002bc2:	0449      	lsls	r1, r1, #17
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002bc8:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	0549      	lsls	r1, r1, #21
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fe faab 	bl	8001130 <HAL_GetTick>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be0:	f7fe faa6 	bl	8001130 <HAL_GetTick>
 8002be4:	0002      	movs	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e059      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf2:	4b2f      	ldr	r3, [pc, #188]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	049b      	lsls	r3, r3, #18
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x534>
 8002bfe:	e051      	b.n	8002ca4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c00:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002c06:	492e      	ldr	r1, [pc, #184]	; (8002cc0 <HAL_RCC_OscConfig+0x614>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fa90 	bl	8001130 <HAL_GetTick>
 8002c10:	0003      	movs	r3, r0
 8002c12:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c16:	f7fe fa8b 	bl	8001130 <HAL_GetTick>
 8002c1a:	0002      	movs	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e03e      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c28:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	049b      	lsls	r3, r3, #18
 8002c30:	4013      	ands	r3, r2
 8002c32:	d1f0      	bne.n	8002c16 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002c34:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002c3a:	4923      	ldr	r1, [pc, #140]	; (8002cc8 <HAL_RCC_OscConfig+0x61c>)
 8002c3c:	400a      	ands	r2, r1
 8002c3e:	60da      	str	r2, [r3, #12]
 8002c40:	e030      	b.n	8002ca4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e02b      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <HAL_RCC_OscConfig+0x604>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2203      	movs	r2, #3
 8002c58:	401a      	ands	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d11e      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2270      	movs	r2, #112	; 0x70
 8002c66:	401a      	ands	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d117      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	23fe      	movs	r3, #254	; 0xfe
 8002c74:	01db      	lsls	r3, r3, #7
 8002c76:	401a      	ands	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d10e      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	23f8      	movs	r3, #248	; 0xf8
 8002c86:	039b      	lsls	r3, r3, #14
 8002c88:	401a      	ands	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d106      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	0f5b      	lsrs	r3, r3, #29
 8002c96:	075a      	lsls	r2, r3, #29
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b008      	add	sp, #32
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	00001388 	.word	0x00001388
 8002cbc:	efffffff 	.word	0xefffffff
 8002cc0:	feffffff 	.word	0xfeffffff
 8002cc4:	1fc1808c 	.word	0x1fc1808c
 8002cc8:	effefffc 	.word	0xeffefffc

08002ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0e9      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b76      	ldr	r3, [pc, #472]	; (8002ebc <HAL_RCC_ClockConfig+0x1f0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d91e      	bls.n	8002d2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b73      	ldr	r3, [pc, #460]	; (8002ebc <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2207      	movs	r2, #7
 8002cf4:	4393      	bics	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	4b70      	ldr	r3, [pc, #448]	; (8002ebc <HAL_RCC_ClockConfig+0x1f0>)
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d00:	f7fe fa16 	bl	8001130 <HAL_GetTick>
 8002d04:	0003      	movs	r3, r0
 8002d06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d08:	e009      	b.n	8002d1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0a:	f7fe fa11 	bl	8001130 <HAL_GetTick>
 8002d0e:	0002      	movs	r2, r0
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	4a6a      	ldr	r2, [pc, #424]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e0ca      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d1e:	4b67      	ldr	r3, [pc, #412]	; (8002ebc <HAL_RCC_ClockConfig+0x1f0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2207      	movs	r2, #7
 8002d24:	4013      	ands	r3, r2
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d1ee      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2202      	movs	r2, #2
 8002d32:	4013      	ands	r3, r2
 8002d34:	d015      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d006      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d40:	4b60      	ldr	r3, [pc, #384]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	4b5f      	ldr	r3, [pc, #380]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d46:	21e0      	movs	r1, #224	; 0xe0
 8002d48:	01c9      	lsls	r1, r1, #7
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4e:	4b5d      	ldr	r3, [pc, #372]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	4a5d      	ldr	r2, [pc, #372]	; (8002ec8 <HAL_RCC_ClockConfig+0x1fc>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	0019      	movs	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2201      	movs	r2, #1
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d057      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d74:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	029b      	lsls	r3, r3, #10
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d12b      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e097      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d107      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8c:	4b4d      	ldr	r3, [pc, #308]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	049b      	lsls	r3, r3, #18
 8002d94:	4013      	ands	r3, r2
 8002d96:	d11f      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e08b      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da4:	4b47      	ldr	r3, [pc, #284]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4013      	ands	r3, r2
 8002dae:	d113      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e07f      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dbc:	4b41      	ldr	r3, [pc, #260]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d108      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e074      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dca:	4b3e      	ldr	r3, [pc, #248]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	2202      	movs	r2, #2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e06d      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dd8:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2207      	movs	r2, #7
 8002dde:	4393      	bics	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	4b37      	ldr	r3, [pc, #220]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8002de8:	430a      	orrs	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dec:	f7fe f9a0 	bl	8001130 <HAL_GetTick>
 8002df0:	0003      	movs	r3, r0
 8002df2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df4:	e009      	b.n	8002e0a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df6:	f7fe f99b 	bl	8001130 <HAL_GetTick>
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	4a2f      	ldr	r2, [pc, #188]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e054      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	4b2e      	ldr	r3, [pc, #184]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2238      	movs	r2, #56	; 0x38
 8002e10:	401a      	ands	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1ec      	bne.n	8002df6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <HAL_RCC_ClockConfig+0x1f0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2207      	movs	r2, #7
 8002e22:	4013      	ands	r3, r2
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d21e      	bcs.n	8002e68 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_RCC_ClockConfig+0x1f0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2207      	movs	r2, #7
 8002e30:	4393      	bics	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	4b21      	ldr	r3, [pc, #132]	; (8002ebc <HAL_RCC_ClockConfig+0x1f0>)
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e3c:	f7fe f978 	bl	8001130 <HAL_GetTick>
 8002e40:	0003      	movs	r3, r0
 8002e42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e44:	e009      	b.n	8002e5a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e46:	f7fe f973 	bl	8001130 <HAL_GetTick>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	4a1b      	ldr	r2, [pc, #108]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e02c      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e5a:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <HAL_RCC_ClockConfig+0x1f0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2207      	movs	r2, #7
 8002e60:	4013      	ands	r3, r2
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d1ee      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d009      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e72:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	4a15      	ldr	r2, [pc, #84]	; (8002ecc <HAL_RCC_ClockConfig+0x200>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e82:	430a      	orrs	r2, r1
 8002e84:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e86:	f000 f829 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8002e8a:	0001      	movs	r1, r0
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	0a1b      	lsrs	r3, r3, #8
 8002e92:	220f      	movs	r2, #15
 8002e94:	401a      	ands	r2, r3
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <HAL_RCC_ClockConfig+0x204>)
 8002e98:	0092      	lsls	r2, r2, #2
 8002e9a:	58d3      	ldr	r3, [r2, r3]
 8002e9c:	221f      	movs	r2, #31
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	000a      	movs	r2, r1
 8002ea2:	40da      	lsrs	r2, r3
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_RCC_ClockConfig+0x208>)
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_ClockConfig+0x20c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	0018      	movs	r0, r3
 8002eae:	f7fe f8e3 	bl	8001078 <HAL_InitTick>
 8002eb2:	0003      	movs	r3, r0
}
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b004      	add	sp, #16
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40022000 	.word	0x40022000
 8002ec0:	00001388 	.word	0x00001388
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	fffff0ff 	.word	0xfffff0ff
 8002ecc:	ffff8fff 	.word	0xffff8fff
 8002ed0:	0800481c 	.word	0x0800481c
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	20000004 	.word	0x20000004

08002edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ee2:	4b3c      	ldr	r3, [pc, #240]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2238      	movs	r2, #56	; 0x38
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d10f      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002eec:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0adb      	lsrs	r3, r3, #11
 8002ef2:	2207      	movs	r2, #7
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	0013      	movs	r3, r2
 8002efc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002efe:	6839      	ldr	r1, [r7, #0]
 8002f00:	4835      	ldr	r0, [pc, #212]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f02:	f7fd f907 	bl	8000114 <__udivsi3>
 8002f06:	0003      	movs	r3, r0
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	e05d      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f0c:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2238      	movs	r2, #56	; 0x38
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d102      	bne.n	8002f1e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f18:	4b30      	ldr	r3, [pc, #192]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x100>)
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	e054      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f1e:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2238      	movs	r2, #56	; 0x38
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d138      	bne.n	8002f9c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f2a:	4b2a      	ldr	r3, [pc, #168]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2203      	movs	r2, #3
 8002f30:	4013      	ands	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f34:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	2207      	movs	r2, #7
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d10d      	bne.n	8002f64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	4824      	ldr	r0, [pc, #144]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x100>)
 8002f4c:	f7fd f8e2 	bl	8000114 <__udivsi3>
 8002f50:	0003      	movs	r3, r0
 8002f52:	0019      	movs	r1, r3
 8002f54:	4b1f      	ldr	r3, [pc, #124]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	227f      	movs	r2, #127	; 0x7f
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	434b      	muls	r3, r1
 8002f60:	617b      	str	r3, [r7, #20]
        break;
 8002f62:	e00d      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	481c      	ldr	r0, [pc, #112]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f68:	f7fd f8d4 	bl	8000114 <__udivsi3>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	0019      	movs	r1, r3
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	0a1b      	lsrs	r3, r3, #8
 8002f76:	227f      	movs	r2, #127	; 0x7f
 8002f78:	4013      	ands	r3, r2
 8002f7a:	434b      	muls	r3, r1
 8002f7c:	617b      	str	r3, [r7, #20]
        break;
 8002f7e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	0f5b      	lsrs	r3, r3, #29
 8002f86:	2207      	movs	r2, #7
 8002f88:	4013      	ands	r3, r2
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	6978      	ldr	r0, [r7, #20]
 8002f92:	f7fd f8bf 	bl	8000114 <__udivsi3>
 8002f96:	0003      	movs	r3, r0
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	e015      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2238      	movs	r2, #56	; 0x38
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d103      	bne.n	8002fb0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2238      	movs	r2, #56	; 0x38
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b18      	cmp	r3, #24
 8002fba:	d103      	bne.n	8002fc4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002fbc:	23fa      	movs	r3, #250	; 0xfa
 8002fbe:	01db      	lsls	r3, r3, #7
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	e001      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fc8:	693b      	ldr	r3, [r7, #16]
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b006      	add	sp, #24
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	00f42400 	.word	0x00f42400
 8002fdc:	007a1200 	.word	0x007a1200

08002fe0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe4:	4b02      	ldr	r3, [pc, #8]	; (8002ff0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	0018      	movs	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	20000000 	.word	0x20000000

08002ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff4:	b5b0      	push	{r4, r5, r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002ff8:	f7ff fff2 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8002ffc:	0004      	movs	r4, r0
 8002ffe:	f7ff fb49 	bl	8002694 <LL_RCC_GetAPB1Prescaler>
 8003002:	0003      	movs	r3, r0
 8003004:	0b1a      	lsrs	r2, r3, #12
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003008:	0092      	lsls	r2, r2, #2
 800300a:	58d3      	ldr	r3, [r2, r3]
 800300c:	221f      	movs	r2, #31
 800300e:	4013      	ands	r3, r2
 8003010:	40dc      	lsrs	r4, r3
 8003012:	0023      	movs	r3, r4
}
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	bdb0      	pop	{r4, r5, r7, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	0800485c 	.word	0x0800485c

08003020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003028:	2313      	movs	r3, #19
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003030:	2312      	movs	r3, #18
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	029b      	lsls	r3, r3, #10
 8003040:	4013      	ands	r3, r2
 8003042:	d100      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003044:	e0a3      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003046:	2011      	movs	r0, #17
 8003048:	183b      	adds	r3, r7, r0
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800304e:	4b86      	ldr	r3, [pc, #536]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	055b      	lsls	r3, r3, #21
 8003056:	4013      	ands	r3, r2
 8003058:	d110      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	4b83      	ldr	r3, [pc, #524]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800305c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800305e:	4b82      	ldr	r3, [pc, #520]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003060:	2180      	movs	r1, #128	; 0x80
 8003062:	0549      	lsls	r1, r1, #21
 8003064:	430a      	orrs	r2, r1
 8003066:	63da      	str	r2, [r3, #60]	; 0x3c
 8003068:	4b7f      	ldr	r3, [pc, #508]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800306a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	055b      	lsls	r3, r3, #21
 8003070:	4013      	ands	r3, r2
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003076:	183b      	adds	r3, r7, r0
 8003078:	2201      	movs	r2, #1
 800307a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800307c:	4b7b      	ldr	r3, [pc, #492]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b7a      	ldr	r3, [pc, #488]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003082:	2180      	movs	r1, #128	; 0x80
 8003084:	0049      	lsls	r1, r1, #1
 8003086:	430a      	orrs	r2, r1
 8003088:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800308a:	f7fe f851 	bl	8001130 <HAL_GetTick>
 800308e:	0003      	movs	r3, r0
 8003090:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003092:	e00b      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003094:	f7fe f84c 	bl	8001130 <HAL_GetTick>
 8003098:	0002      	movs	r2, r0
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d904      	bls.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80030a2:	2313      	movs	r3, #19
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	2203      	movs	r2, #3
 80030a8:	701a      	strb	r2, [r3, #0]
        break;
 80030aa:	e005      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ac:	4b6f      	ldr	r3, [pc, #444]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4013      	ands	r3, r2
 80030b6:	d0ed      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80030b8:	2313      	movs	r3, #19
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d154      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030c2:	4b69      	ldr	r3, [pc, #420]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030c6:	23c0      	movs	r3, #192	; 0xc0
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4013      	ands	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d019      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d014      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030de:	4b62      	ldr	r3, [pc, #392]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	4a63      	ldr	r2, [pc, #396]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030e8:	4b5f      	ldr	r3, [pc, #380]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030ec:	4b5e      	ldr	r3, [pc, #376]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030ee:	2180      	movs	r1, #128	; 0x80
 80030f0:	0249      	lsls	r1, r1, #9
 80030f2:	430a      	orrs	r2, r1
 80030f4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030f6:	4b5c      	ldr	r3, [pc, #368]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030fa:	4b5b      	ldr	r3, [pc, #364]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030fc:	495d      	ldr	r1, [pc, #372]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030fe:	400a      	ands	r2, r1
 8003100:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003102:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2201      	movs	r2, #1
 800310c:	4013      	ands	r3, r2
 800310e:	d016      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe f80e 	bl	8001130 <HAL_GetTick>
 8003114:	0003      	movs	r3, r0
 8003116:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003118:	e00c      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311a:	f7fe f809 	bl	8001130 <HAL_GetTick>
 800311e:	0002      	movs	r2, r0
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	4a54      	ldr	r2, [pc, #336]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d904      	bls.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800312a:	2313      	movs	r3, #19
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	2203      	movs	r2, #3
 8003130:	701a      	strb	r2, [r3, #0]
            break;
 8003132:	e004      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003134:	4b4c      	ldr	r3, [pc, #304]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	2202      	movs	r2, #2
 800313a:	4013      	ands	r3, r2
 800313c:	d0ed      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800313e:	2313      	movs	r3, #19
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10a      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003148:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800314a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314c:	4a48      	ldr	r2, [pc, #288]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800314e:	4013      	ands	r3, r2
 8003150:	0019      	movs	r1, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	4b44      	ldr	r3, [pc, #272]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003158:	430a      	orrs	r2, r1
 800315a:	65da      	str	r2, [r3, #92]	; 0x5c
 800315c:	e00c      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800315e:	2312      	movs	r3, #18
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	2213      	movs	r2, #19
 8003164:	18ba      	adds	r2, r7, r2
 8003166:	7812      	ldrb	r2, [r2, #0]
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	e005      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316c:	2312      	movs	r3, #18
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	2213      	movs	r2, #19
 8003172:	18ba      	adds	r2, r7, r2
 8003174:	7812      	ldrb	r2, [r2, #0]
 8003176:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003178:	2311      	movs	r3, #17
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d105      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003182:	4b39      	ldr	r3, [pc, #228]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003186:	4b38      	ldr	r3, [pc, #224]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003188:	493c      	ldr	r1, [pc, #240]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800318a:	400a      	ands	r2, r1
 800318c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2201      	movs	r2, #1
 8003194:	4013      	ands	r3, r2
 8003196:	d009      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003198:	4b33      	ldr	r3, [pc, #204]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	2203      	movs	r2, #3
 800319e:	4393      	bics	r3, r2
 80031a0:	0019      	movs	r1, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	4b30      	ldr	r3, [pc, #192]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031a8:	430a      	orrs	r2, r1
 80031aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2202      	movs	r2, #2
 80031b2:	4013      	ands	r3, r2
 80031b4:	d009      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031b6:	4b2c      	ldr	r3, [pc, #176]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	220c      	movs	r2, #12
 80031bc:	4393      	bics	r3, r2
 80031be:	0019      	movs	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	4b28      	ldr	r3, [pc, #160]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031c6:	430a      	orrs	r2, r1
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2220      	movs	r2, #32
 80031d0:	4013      	ands	r3, r2
 80031d2:	d009      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031d4:	4b24      	ldr	r3, [pc, #144]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d8:	4a29      	ldr	r2, [pc, #164]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	4013      	ands	r3, r2
 80031dc:	0019      	movs	r1, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	4b21      	ldr	r3, [pc, #132]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031e4:	430a      	orrs	r2, r1
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	01db      	lsls	r3, r3, #7
 80031f0:	4013      	ands	r3, r2
 80031f2:	d015      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031f4:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	0899      	lsrs	r1, r3, #2
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	4b19      	ldr	r3, [pc, #100]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003202:	430a      	orrs	r2, r1
 8003204:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	05db      	lsls	r3, r3, #23
 800320e:	429a      	cmp	r2, r3
 8003210:	d106      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003212:	4b15      	ldr	r3, [pc, #84]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003218:	2180      	movs	r1, #128	; 0x80
 800321a:	0249      	lsls	r1, r1, #9
 800321c:	430a      	orrs	r2, r1
 800321e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	2380      	movs	r3, #128	; 0x80
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	4013      	ands	r3, r2
 800322a:	d016      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	4a14      	ldr	r2, [pc, #80]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003232:	4013      	ands	r3, r2
 8003234:	0019      	movs	r1, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800323c:	430a      	orrs	r2, r1
 800323e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	01db      	lsls	r3, r3, #7
 8003248:	429a      	cmp	r2, r3
 800324a:	d106      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003252:	2180      	movs	r1, #128	; 0x80
 8003254:	0249      	lsls	r1, r1, #9
 8003256:	430a      	orrs	r2, r1
 8003258:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800325a:	2312      	movs	r3, #18
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	781b      	ldrb	r3, [r3, #0]
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	b006      	add	sp, #24
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40021000 	.word	0x40021000
 800326c:	40007000 	.word	0x40007000
 8003270:	fffffcff 	.word	0xfffffcff
 8003274:	fffeffff 	.word	0xfffeffff
 8003278:	00001388 	.word	0x00001388
 800327c:	efffffff 	.word	0xefffffff
 8003280:	ffffcfff 	.word	0xffffcfff
 8003284:	ffff3fff 	.word	0xffff3fff

08003288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e046      	b.n	8003328 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2288      	movs	r2, #136	; 0x88
 800329e:	589b      	ldr	r3, [r3, r2]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d107      	bne.n	80032b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2284      	movs	r2, #132	; 0x84
 80032a8:	2100      	movs	r1, #0
 80032aa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	0018      	movs	r0, r3
 80032b0:	f7fd fd84 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2288      	movs	r2, #136	; 0x88
 80032b8:	2124      	movs	r1, #36	; 0x24
 80032ba:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2101      	movs	r1, #1
 80032c8:	438a      	bics	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f000 f8cc 	bl	800346c <UART_SetConfig>
 80032d4:	0003      	movs	r3, r0
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e024      	b.n	8003328 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f000 fa63 	bl	80037b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	490d      	ldr	r1, [pc, #52]	; (8003330 <HAL_UART_Init+0xa8>)
 80032fa:	400a      	ands	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	212a      	movs	r1, #42	; 0x2a
 800330a:	438a      	bics	r2, r1
 800330c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2101      	movs	r1, #1
 800331a:	430a      	orrs	r2, r1
 800331c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	0018      	movs	r0, r3
 8003322:	f000 fafb 	bl	800391c <UART_CheckIdleState>
 8003326:	0003      	movs	r3, r0
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b002      	add	sp, #8
 800332e:	bd80      	pop	{r7, pc}
 8003330:	ffffb7ff 	.word	0xffffb7ff

08003334 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af02      	add	r7, sp, #8
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	1dbb      	adds	r3, r7, #6
 8003342:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2288      	movs	r2, #136	; 0x88
 8003348:	589b      	ldr	r3, [r3, r2]
 800334a:	2b20      	cmp	r3, #32
 800334c:	d000      	beq.n	8003350 <HAL_UART_Transmit+0x1c>
 800334e:	e088      	b.n	8003462 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_UART_Transmit+0x2a>
 8003356:	1dbb      	adds	r3, r7, #6
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e080      	b.n	8003464 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	015b      	lsls	r3, r3, #5
 800336a:	429a      	cmp	r2, r3
 800336c:	d109      	bne.n	8003382 <HAL_UART_Transmit+0x4e>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d105      	bne.n	8003382 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2201      	movs	r2, #1
 800337a:	4013      	ands	r3, r2
 800337c:	d001      	beq.n	8003382 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e070      	b.n	8003464 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2290      	movs	r2, #144	; 0x90
 8003386:	2100      	movs	r1, #0
 8003388:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2288      	movs	r2, #136	; 0x88
 800338e:	2121      	movs	r1, #33	; 0x21
 8003390:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003392:	f7fd fecd 	bl	8001130 <HAL_GetTick>
 8003396:	0003      	movs	r3, r0
 8003398:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1dba      	adds	r2, r7, #6
 800339e:	2154      	movs	r1, #84	; 0x54
 80033a0:	8812      	ldrh	r2, [r2, #0]
 80033a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1dba      	adds	r2, r7, #6
 80033a8:	2156      	movs	r1, #86	; 0x56
 80033aa:	8812      	ldrh	r2, [r2, #0]
 80033ac:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	2380      	movs	r3, #128	; 0x80
 80033b4:	015b      	lsls	r3, r3, #5
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d108      	bne.n	80033cc <HAL_UART_Transmit+0x98>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d104      	bne.n	80033cc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	e003      	b.n	80033d4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033d4:	e02c      	b.n	8003430 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	0013      	movs	r3, r2
 80033e0:	2200      	movs	r2, #0
 80033e2:	2180      	movs	r1, #128	; 0x80
 80033e4:	f000 fae8 	bl	80039b8 <UART_WaitOnFlagUntilTimeout>
 80033e8:	1e03      	subs	r3, r0, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e039      	b.n	8003464 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10b      	bne.n	800340e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	001a      	movs	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	05d2      	lsls	r2, r2, #23
 8003402:	0dd2      	lsrs	r2, r2, #23
 8003404:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	3302      	adds	r3, #2
 800340a:	61bb      	str	r3, [r7, #24]
 800340c:	e007      	b.n	800341e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	3301      	adds	r3, #1
 800341c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2256      	movs	r2, #86	; 0x56
 8003422:	5a9b      	ldrh	r3, [r3, r2]
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b299      	uxth	r1, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2256      	movs	r2, #86	; 0x56
 800342e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2256      	movs	r2, #86	; 0x56
 8003434:	5a9b      	ldrh	r3, [r3, r2]
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1cc      	bne.n	80033d6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	0013      	movs	r3, r2
 8003446:	2200      	movs	r2, #0
 8003448:	2140      	movs	r1, #64	; 0x40
 800344a:	f000 fab5 	bl	80039b8 <UART_WaitOnFlagUntilTimeout>
 800344e:	1e03      	subs	r3, r0, #0
 8003450:	d001      	beq.n	8003456 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e006      	b.n	8003464 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2288      	movs	r2, #136	; 0x88
 800345a:	2120      	movs	r1, #32
 800345c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
  }
}
 8003464:	0018      	movs	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	b008      	add	sp, #32
 800346a:	bd80      	pop	{r7, pc}

0800346c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003474:	231a      	movs	r3, #26
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	4313      	orrs	r3, r2
 8003492:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4abc      	ldr	r2, [pc, #752]	; (800378c <UART_SetConfig+0x320>)
 800349c:	4013      	ands	r3, r2
 800349e:	0019      	movs	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4ab7      	ldr	r2, [pc, #732]	; (8003790 <UART_SetConfig+0x324>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	0019      	movs	r1, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	4aae      	ldr	r2, [pc, #696]	; (8003794 <UART_SetConfig+0x328>)
 80034da:	4013      	ands	r3, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	220f      	movs	r2, #15
 80034f0:	4393      	bics	r3, r2
 80034f2:	0019      	movs	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4aa4      	ldr	r2, [pc, #656]	; (8003798 <UART_SetConfig+0x32c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d127      	bne.n	800355a <UART_SetConfig+0xee>
 800350a:	4ba4      	ldr	r3, [pc, #656]	; (800379c <UART_SetConfig+0x330>)
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	2203      	movs	r2, #3
 8003510:	4013      	ands	r3, r2
 8003512:	2b03      	cmp	r3, #3
 8003514:	d017      	beq.n	8003546 <UART_SetConfig+0xda>
 8003516:	d81b      	bhi.n	8003550 <UART_SetConfig+0xe4>
 8003518:	2b02      	cmp	r3, #2
 800351a:	d00a      	beq.n	8003532 <UART_SetConfig+0xc6>
 800351c:	d818      	bhi.n	8003550 <UART_SetConfig+0xe4>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <UART_SetConfig+0xbc>
 8003522:	2b01      	cmp	r3, #1
 8003524:	d00a      	beq.n	800353c <UART_SetConfig+0xd0>
 8003526:	e013      	b.n	8003550 <UART_SetConfig+0xe4>
 8003528:	231b      	movs	r3, #27
 800352a:	18fb      	adds	r3, r7, r3
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
 8003530:	e058      	b.n	80035e4 <UART_SetConfig+0x178>
 8003532:	231b      	movs	r3, #27
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	2202      	movs	r2, #2
 8003538:	701a      	strb	r2, [r3, #0]
 800353a:	e053      	b.n	80035e4 <UART_SetConfig+0x178>
 800353c:	231b      	movs	r3, #27
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	2204      	movs	r2, #4
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	e04e      	b.n	80035e4 <UART_SetConfig+0x178>
 8003546:	231b      	movs	r3, #27
 8003548:	18fb      	adds	r3, r7, r3
 800354a:	2208      	movs	r2, #8
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	e049      	b.n	80035e4 <UART_SetConfig+0x178>
 8003550:	231b      	movs	r3, #27
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	2210      	movs	r2, #16
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	e044      	b.n	80035e4 <UART_SetConfig+0x178>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a90      	ldr	r2, [pc, #576]	; (80037a0 <UART_SetConfig+0x334>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d127      	bne.n	80035b4 <UART_SetConfig+0x148>
 8003564:	4b8d      	ldr	r3, [pc, #564]	; (800379c <UART_SetConfig+0x330>)
 8003566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003568:	220c      	movs	r2, #12
 800356a:	4013      	ands	r3, r2
 800356c:	2b0c      	cmp	r3, #12
 800356e:	d017      	beq.n	80035a0 <UART_SetConfig+0x134>
 8003570:	d81b      	bhi.n	80035aa <UART_SetConfig+0x13e>
 8003572:	2b08      	cmp	r3, #8
 8003574:	d00a      	beq.n	800358c <UART_SetConfig+0x120>
 8003576:	d818      	bhi.n	80035aa <UART_SetConfig+0x13e>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <UART_SetConfig+0x116>
 800357c:	2b04      	cmp	r3, #4
 800357e:	d00a      	beq.n	8003596 <UART_SetConfig+0x12a>
 8003580:	e013      	b.n	80035aa <UART_SetConfig+0x13e>
 8003582:	231b      	movs	r3, #27
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
 800358a:	e02b      	b.n	80035e4 <UART_SetConfig+0x178>
 800358c:	231b      	movs	r3, #27
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	2202      	movs	r2, #2
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e026      	b.n	80035e4 <UART_SetConfig+0x178>
 8003596:	231b      	movs	r3, #27
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	2204      	movs	r2, #4
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	e021      	b.n	80035e4 <UART_SetConfig+0x178>
 80035a0:	231b      	movs	r3, #27
 80035a2:	18fb      	adds	r3, r7, r3
 80035a4:	2208      	movs	r2, #8
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	e01c      	b.n	80035e4 <UART_SetConfig+0x178>
 80035aa:	231b      	movs	r3, #27
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	2210      	movs	r2, #16
 80035b0:	701a      	strb	r2, [r3, #0]
 80035b2:	e017      	b.n	80035e4 <UART_SetConfig+0x178>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a7a      	ldr	r2, [pc, #488]	; (80037a4 <UART_SetConfig+0x338>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d104      	bne.n	80035c8 <UART_SetConfig+0x15c>
 80035be:	231b      	movs	r3, #27
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	2200      	movs	r2, #0
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	e00d      	b.n	80035e4 <UART_SetConfig+0x178>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a76      	ldr	r2, [pc, #472]	; (80037a8 <UART_SetConfig+0x33c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d104      	bne.n	80035dc <UART_SetConfig+0x170>
 80035d2:	231b      	movs	r3, #27
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	e003      	b.n	80035e4 <UART_SetConfig+0x178>
 80035dc:	231b      	movs	r3, #27
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	2210      	movs	r2, #16
 80035e2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d000      	beq.n	80035f2 <UART_SetConfig+0x186>
 80035f0:	e065      	b.n	80036be <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80035f2:	231b      	movs	r3, #27
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d015      	beq.n	8003628 <UART_SetConfig+0x1bc>
 80035fc:	dc18      	bgt.n	8003630 <UART_SetConfig+0x1c4>
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d00d      	beq.n	800361e <UART_SetConfig+0x1b2>
 8003602:	dc15      	bgt.n	8003630 <UART_SetConfig+0x1c4>
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <UART_SetConfig+0x1a2>
 8003608:	2b02      	cmp	r3, #2
 800360a:	d005      	beq.n	8003618 <UART_SetConfig+0x1ac>
 800360c:	e010      	b.n	8003630 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800360e:	f7ff fcf1 	bl	8002ff4 <HAL_RCC_GetPCLK1Freq>
 8003612:	0003      	movs	r3, r0
 8003614:	617b      	str	r3, [r7, #20]
        break;
 8003616:	e012      	b.n	800363e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003618:	4b64      	ldr	r3, [pc, #400]	; (80037ac <UART_SetConfig+0x340>)
 800361a:	617b      	str	r3, [r7, #20]
        break;
 800361c:	e00f      	b.n	800363e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800361e:	f7ff fc5d 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8003622:	0003      	movs	r3, r0
 8003624:	617b      	str	r3, [r7, #20]
        break;
 8003626:	e00a      	b.n	800363e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	617b      	str	r3, [r7, #20]
        break;
 800362e:	e006      	b.n	800363e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003634:	231a      	movs	r3, #26
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
        break;
 800363c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d100      	bne.n	8003646 <UART_SetConfig+0x1da>
 8003644:	e08d      	b.n	8003762 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800364a:	4b59      	ldr	r3, [pc, #356]	; (80037b0 <UART_SetConfig+0x344>)
 800364c:	0052      	lsls	r2, r2, #1
 800364e:	5ad3      	ldrh	r3, [r2, r3]
 8003650:	0019      	movs	r1, r3
 8003652:	6978      	ldr	r0, [r7, #20]
 8003654:	f7fc fd5e 	bl	8000114 <__udivsi3>
 8003658:	0003      	movs	r3, r0
 800365a:	005a      	lsls	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	085b      	lsrs	r3, r3, #1
 8003662:	18d2      	adds	r2, r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	0019      	movs	r1, r3
 800366a:	0010      	movs	r0, r2
 800366c:	f7fc fd52 	bl	8000114 <__udivsi3>
 8003670:	0003      	movs	r3, r0
 8003672:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b0f      	cmp	r3, #15
 8003678:	d91c      	bls.n	80036b4 <UART_SetConfig+0x248>
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	2380      	movs	r3, #128	; 0x80
 800367e:	025b      	lsls	r3, r3, #9
 8003680:	429a      	cmp	r2, r3
 8003682:	d217      	bcs.n	80036b4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	b29a      	uxth	r2, r3
 8003688:	200e      	movs	r0, #14
 800368a:	183b      	adds	r3, r7, r0
 800368c:	210f      	movs	r1, #15
 800368e:	438a      	bics	r2, r1
 8003690:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	085b      	lsrs	r3, r3, #1
 8003696:	b29b      	uxth	r3, r3
 8003698:	2207      	movs	r2, #7
 800369a:	4013      	ands	r3, r2
 800369c:	b299      	uxth	r1, r3
 800369e:	183b      	adds	r3, r7, r0
 80036a0:	183a      	adds	r2, r7, r0
 80036a2:	8812      	ldrh	r2, [r2, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	183a      	adds	r2, r7, r0
 80036ae:	8812      	ldrh	r2, [r2, #0]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	e056      	b.n	8003762 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80036b4:	231a      	movs	r3, #26
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
 80036bc:	e051      	b.n	8003762 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036be:	231b      	movs	r3, #27
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d015      	beq.n	80036f4 <UART_SetConfig+0x288>
 80036c8:	dc18      	bgt.n	80036fc <UART_SetConfig+0x290>
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d00d      	beq.n	80036ea <UART_SetConfig+0x27e>
 80036ce:	dc15      	bgt.n	80036fc <UART_SetConfig+0x290>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <UART_SetConfig+0x26e>
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d005      	beq.n	80036e4 <UART_SetConfig+0x278>
 80036d8:	e010      	b.n	80036fc <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036da:	f7ff fc8b 	bl	8002ff4 <HAL_RCC_GetPCLK1Freq>
 80036de:	0003      	movs	r3, r0
 80036e0:	617b      	str	r3, [r7, #20]
        break;
 80036e2:	e012      	b.n	800370a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036e4:	4b31      	ldr	r3, [pc, #196]	; (80037ac <UART_SetConfig+0x340>)
 80036e6:	617b      	str	r3, [r7, #20]
        break;
 80036e8:	e00f      	b.n	800370a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ea:	f7ff fbf7 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 80036ee:	0003      	movs	r3, r0
 80036f0:	617b      	str	r3, [r7, #20]
        break;
 80036f2:	e00a      	b.n	800370a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	617b      	str	r3, [r7, #20]
        break;
 80036fa:	e006      	b.n	800370a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003700:	231a      	movs	r3, #26
 8003702:	18fb      	adds	r3, r7, r3
 8003704:	2201      	movs	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
        break;
 8003708:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d028      	beq.n	8003762 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003714:	4b26      	ldr	r3, [pc, #152]	; (80037b0 <UART_SetConfig+0x344>)
 8003716:	0052      	lsls	r2, r2, #1
 8003718:	5ad3      	ldrh	r3, [r2, r3]
 800371a:	0019      	movs	r1, r3
 800371c:	6978      	ldr	r0, [r7, #20]
 800371e:	f7fc fcf9 	bl	8000114 <__udivsi3>
 8003722:	0003      	movs	r3, r0
 8003724:	001a      	movs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	085b      	lsrs	r3, r3, #1
 800372c:	18d2      	adds	r2, r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	0019      	movs	r1, r3
 8003734:	0010      	movs	r0, r2
 8003736:	f7fc fced 	bl	8000114 <__udivsi3>
 800373a:	0003      	movs	r3, r0
 800373c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b0f      	cmp	r3, #15
 8003742:	d90a      	bls.n	800375a <UART_SetConfig+0x2ee>
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	025b      	lsls	r3, r3, #9
 800374a:	429a      	cmp	r2, r3
 800374c:	d205      	bcs.n	800375a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	b29a      	uxth	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60da      	str	r2, [r3, #12]
 8003758:	e003      	b.n	8003762 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800375a:	231a      	movs	r3, #26
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	226a      	movs	r2, #106	; 0x6a
 8003766:	2101      	movs	r1, #1
 8003768:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2268      	movs	r2, #104	; 0x68
 800376e:	2101      	movs	r1, #1
 8003770:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800377e:	231a      	movs	r3, #26
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	781b      	ldrb	r3, [r3, #0]
}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	b008      	add	sp, #32
 800378a:	bd80      	pop	{r7, pc}
 800378c:	cfff69f3 	.word	0xcfff69f3
 8003790:	ffffcfff 	.word	0xffffcfff
 8003794:	11fff4ff 	.word	0x11fff4ff
 8003798:	40013800 	.word	0x40013800
 800379c:	40021000 	.word	0x40021000
 80037a0:	40004400 	.word	0x40004400
 80037a4:	40004800 	.word	0x40004800
 80037a8:	40004c00 	.word	0x40004c00
 80037ac:	00f42400 	.word	0x00f42400
 80037b0:	0800487c 	.word	0x0800487c

080037b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	2201      	movs	r2, #1
 80037c2:	4013      	ands	r3, r2
 80037c4:	d00b      	beq.n	80037de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a4a      	ldr	r2, [pc, #296]	; (80038f8 <UART_AdvFeatureConfig+0x144>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	2202      	movs	r2, #2
 80037e4:	4013      	ands	r3, r2
 80037e6:	d00b      	beq.n	8003800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4a43      	ldr	r2, [pc, #268]	; (80038fc <UART_AdvFeatureConfig+0x148>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	0019      	movs	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	2204      	movs	r2, #4
 8003806:	4013      	ands	r3, r2
 8003808:	d00b      	beq.n	8003822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4a3b      	ldr	r2, [pc, #236]	; (8003900 <UART_AdvFeatureConfig+0x14c>)
 8003812:	4013      	ands	r3, r2
 8003814:	0019      	movs	r1, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	2208      	movs	r2, #8
 8003828:	4013      	ands	r3, r2
 800382a:	d00b      	beq.n	8003844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4a34      	ldr	r2, [pc, #208]	; (8003904 <UART_AdvFeatureConfig+0x150>)
 8003834:	4013      	ands	r3, r2
 8003836:	0019      	movs	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	2210      	movs	r2, #16
 800384a:	4013      	ands	r3, r2
 800384c:	d00b      	beq.n	8003866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4a2c      	ldr	r2, [pc, #176]	; (8003908 <UART_AdvFeatureConfig+0x154>)
 8003856:	4013      	ands	r3, r2
 8003858:	0019      	movs	r1, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	2220      	movs	r2, #32
 800386c:	4013      	ands	r3, r2
 800386e:	d00b      	beq.n	8003888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	4a25      	ldr	r2, [pc, #148]	; (800390c <UART_AdvFeatureConfig+0x158>)
 8003878:	4013      	ands	r3, r2
 800387a:	0019      	movs	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	2240      	movs	r2, #64	; 0x40
 800388e:	4013      	ands	r3, r2
 8003890:	d01d      	beq.n	80038ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a1d      	ldr	r2, [pc, #116]	; (8003910 <UART_AdvFeatureConfig+0x15c>)
 800389a:	4013      	ands	r3, r2
 800389c:	0019      	movs	r1, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	035b      	lsls	r3, r3, #13
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d10b      	bne.n	80038ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4a15      	ldr	r2, [pc, #84]	; (8003914 <UART_AdvFeatureConfig+0x160>)
 80038be:	4013      	ands	r3, r2
 80038c0:	0019      	movs	r1, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	2280      	movs	r2, #128	; 0x80
 80038d4:	4013      	ands	r3, r2
 80038d6:	d00b      	beq.n	80038f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <UART_AdvFeatureConfig+0x164>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	0019      	movs	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]
  }
}
 80038f0:	46c0      	nop			; (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b002      	add	sp, #8
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	fffdffff 	.word	0xfffdffff
 80038fc:	fffeffff 	.word	0xfffeffff
 8003900:	fffbffff 	.word	0xfffbffff
 8003904:	ffff7fff 	.word	0xffff7fff
 8003908:	ffffefff 	.word	0xffffefff
 800390c:	ffffdfff 	.word	0xffffdfff
 8003910:	ffefffff 	.word	0xffefffff
 8003914:	ff9fffff 	.word	0xff9fffff
 8003918:	fff7ffff 	.word	0xfff7ffff

0800391c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af02      	add	r7, sp, #8
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2290      	movs	r2, #144	; 0x90
 8003928:	2100      	movs	r1, #0
 800392a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800392c:	f7fd fc00 	bl	8001130 <HAL_GetTick>
 8003930:	0003      	movs	r3, r0
 8003932:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2208      	movs	r2, #8
 800393c:	4013      	ands	r3, r2
 800393e:	2b08      	cmp	r3, #8
 8003940:	d10c      	bne.n	800395c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2280      	movs	r2, #128	; 0x80
 8003946:	0391      	lsls	r1, r2, #14
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4a1a      	ldr	r2, [pc, #104]	; (80039b4 <UART_CheckIdleState+0x98>)
 800394c:	9200      	str	r2, [sp, #0]
 800394e:	2200      	movs	r2, #0
 8003950:	f000 f832 	bl	80039b8 <UART_WaitOnFlagUntilTimeout>
 8003954:	1e03      	subs	r3, r0, #0
 8003956:	d001      	beq.n	800395c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e026      	b.n	80039aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2204      	movs	r2, #4
 8003964:	4013      	ands	r3, r2
 8003966:	2b04      	cmp	r3, #4
 8003968:	d10c      	bne.n	8003984 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2280      	movs	r2, #128	; 0x80
 800396e:	03d1      	lsls	r1, r2, #15
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4a10      	ldr	r2, [pc, #64]	; (80039b4 <UART_CheckIdleState+0x98>)
 8003974:	9200      	str	r2, [sp, #0]
 8003976:	2200      	movs	r2, #0
 8003978:	f000 f81e 	bl	80039b8 <UART_WaitOnFlagUntilTimeout>
 800397c:	1e03      	subs	r3, r0, #0
 800397e:	d001      	beq.n	8003984 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e012      	b.n	80039aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2288      	movs	r2, #136	; 0x88
 8003988:	2120      	movs	r1, #32
 800398a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	228c      	movs	r2, #140	; 0x8c
 8003990:	2120      	movs	r1, #32
 8003992:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2284      	movs	r2, #132	; 0x84
 80039a4:	2100      	movs	r1, #0
 80039a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	0018      	movs	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b004      	add	sp, #16
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	01ffffff 	.word	0x01ffffff

080039b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b094      	sub	sp, #80	; 0x50
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	1dfb      	adds	r3, r7, #7
 80039c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c8:	e0a7      	b.n	8003b1a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039cc:	3301      	adds	r3, #1
 80039ce:	d100      	bne.n	80039d2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80039d0:	e0a3      	b.n	8003b1a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d2:	f7fd fbad 	bl	8001130 <HAL_GetTick>
 80039d6:	0002      	movs	r2, r0
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d13f      	bne.n	8003a68 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e8:	f3ef 8310 	mrs	r3, PRIMASK
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80039f0:	647b      	str	r3, [r7, #68]	; 0x44
 80039f2:	2301      	movs	r3, #1
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	f383 8810 	msr	PRIMASK, r3
}
 80039fc:	46c0      	nop			; (mov r8, r8)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	494e      	ldr	r1, [pc, #312]	; (8003b44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003a0a:	400a      	ands	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a10:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	f383 8810 	msr	PRIMASK, r3
}
 8003a18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a22:	643b      	str	r3, [r7, #64]	; 0x40
 8003a24:	2301      	movs	r3, #1
 8003a26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2a:	f383 8810 	msr	PRIMASK, r3
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	438a      	bics	r2, r1
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a46:	f383 8810 	msr	PRIMASK, r3
}
 8003a4a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2288      	movs	r2, #136	; 0x88
 8003a50:	2120      	movs	r1, #32
 8003a52:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	228c      	movs	r2, #140	; 0x8c
 8003a58:	2120      	movs	r1, #32
 8003a5a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2284      	movs	r2, #132	; 0x84
 8003a60:	2100      	movs	r1, #0
 8003a62:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e069      	b.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2204      	movs	r2, #4
 8003a70:	4013      	ands	r3, r2
 8003a72:	d052      	beq.n	8003b1a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69da      	ldr	r2, [r3, #28]
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	401a      	ands	r2, r3
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d148      	bne.n	8003b1a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2280      	movs	r2, #128	; 0x80
 8003a8e:	0112      	lsls	r2, r2, #4
 8003a90:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a92:	f3ef 8310 	mrs	r3, PRIMASK
 8003a96:	613b      	str	r3, [r7, #16]
  return(result);
 8003a98:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f383 8810 	msr	PRIMASK, r3
}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4924      	ldr	r1, [pc, #144]	; (8003b44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003ab4:	400a      	ands	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f383 8810 	msr	PRIMASK, r3
}
 8003ac2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003aca:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ace:	2301      	movs	r3, #1
 8003ad0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	f383 8810 	msr	PRIMASK, r3
}
 8003ad8:	46c0      	nop			; (mov r8, r8)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	438a      	bics	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]
 8003aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	f383 8810 	msr	PRIMASK, r3
}
 8003af4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2288      	movs	r2, #136	; 0x88
 8003afa:	2120      	movs	r1, #32
 8003afc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	228c      	movs	r2, #140	; 0x8c
 8003b02:	2120      	movs	r1, #32
 8003b04:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2290      	movs	r2, #144	; 0x90
 8003b0a:	2120      	movs	r1, #32
 8003b0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2284      	movs	r2, #132	; 0x84
 8003b12:	2100      	movs	r1, #0
 8003b14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e010      	b.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	4013      	ands	r3, r2
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	425a      	negs	r2, r3
 8003b2a:	4153      	adcs	r3, r2
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	001a      	movs	r2, r3
 8003b30:	1dfb      	adds	r3, r7, #7
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d100      	bne.n	8003b3a <UART_WaitOnFlagUntilTimeout+0x182>
 8003b38:	e747      	b.n	80039ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b014      	add	sp, #80	; 0x50
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	fffffe5f 	.word	0xfffffe5f

08003b48 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e05d      	b.n	8003c1c <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2288      	movs	r2, #136	; 0x88
 8003b64:	589b      	ldr	r3, [r3, r2]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d107      	bne.n	8003b7a <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2284      	movs	r2, #132	; 0x84
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	0018      	movs	r0, r3
 8003b76:	f7fd f921 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2288      	movs	r2, #136	; 0x88
 8003b7e:	2124      	movs	r1, #36	; 0x24
 8003b80:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	438a      	bics	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	0018      	movs	r0, r3
 8003b96:	f7ff fc69 	bl	800346c <UART_SetConfig>
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RS485Ex_Init+0x5c>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e03b      	b.n	8003c1c <HAL_RS485Ex_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_RS485Ex_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f7ff fe00 	bl	80037b4 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2180      	movs	r1, #128	; 0x80
 8003bc0:	01c9      	lsls	r1, r1, #7
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <HAL_RS485Ex_Init+0xdc>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	0019      	movs	r1, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	055b      	lsls	r3, r3, #21
 8003be0:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	041b      	lsls	r3, r3, #16
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a0d      	ldr	r2, [pc, #52]	; (8003c28 <HAL_RS485Ex_Init+0xe0>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	0019      	movs	r1, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	0018      	movs	r0, r3
 8003c16:	f7ff fe81 	bl	800391c <UART_CheckIdleState>
 8003c1a:	0003      	movs	r3, r0
}
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b006      	add	sp, #24
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	ffff7fff 	.word	0xffff7fff
 8003c28:	fc00ffff 	.word	0xfc00ffff

08003c2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2284      	movs	r2, #132	; 0x84
 8003c38:	5c9b      	ldrb	r3, [r3, r2]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e027      	b.n	8003c92 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2284      	movs	r2, #132	; 0x84
 8003c46:	2101      	movs	r1, #1
 8003c48:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2288      	movs	r2, #136	; 0x88
 8003c4e:	2124      	movs	r1, #36	; 0x24
 8003c50:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2101      	movs	r1, #1
 8003c66:	438a      	bics	r2, r1
 8003c68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4a0b      	ldr	r2, [pc, #44]	; (8003c9c <HAL_UARTEx_DisableFifoMode+0x70>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2288      	movs	r2, #136	; 0x88
 8003c84:	2120      	movs	r1, #32
 8003c86:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2284      	movs	r2, #132	; 0x84
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	0018      	movs	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b004      	add	sp, #16
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	dfffffff 	.word	0xdfffffff

08003ca0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2284      	movs	r2, #132	; 0x84
 8003cae:	5c9b      	ldrb	r3, [r3, r2]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e02e      	b.n	8003d16 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2284      	movs	r2, #132	; 0x84
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2288      	movs	r2, #136	; 0x88
 8003cc4:	2124      	movs	r1, #36	; 0x24
 8003cc6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2101      	movs	r1, #1
 8003cdc:	438a      	bics	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	08d9      	lsrs	r1, r3, #3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f000 f854 	bl	8003da4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2288      	movs	r2, #136	; 0x88
 8003d08:	2120      	movs	r1, #32
 8003d0a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2284      	movs	r2, #132	; 0x84
 8003d10:	2100      	movs	r1, #0
 8003d12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	0018      	movs	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b004      	add	sp, #16
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2284      	movs	r2, #132	; 0x84
 8003d2e:	5c9b      	ldrb	r3, [r3, r2]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e02f      	b.n	8003d98 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2284      	movs	r2, #132	; 0x84
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2288      	movs	r2, #136	; 0x88
 8003d44:	2124      	movs	r1, #36	; 0x24
 8003d46:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	438a      	bics	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	4a0e      	ldr	r2, [pc, #56]	; (8003da0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f000 f813 	bl	8003da4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2288      	movs	r2, #136	; 0x88
 8003d8a:	2120      	movs	r1, #32
 8003d8c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2284      	movs	r2, #132	; 0x84
 8003d92:	2100      	movs	r1, #0
 8003d94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	0018      	movs	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b004      	add	sp, #16
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	f1ffffff 	.word	0xf1ffffff

08003da4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d108      	bne.n	8003dc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	226a      	movs	r2, #106	; 0x6a
 8003db8:	2101      	movs	r1, #1
 8003dba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2268      	movs	r2, #104	; 0x68
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003dc4:	e043      	b.n	8003e4e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003dc6:	260f      	movs	r6, #15
 8003dc8:	19bb      	adds	r3, r7, r6
 8003dca:	2208      	movs	r2, #8
 8003dcc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003dce:	200e      	movs	r0, #14
 8003dd0:	183b      	adds	r3, r7, r0
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	0e5b      	lsrs	r3, r3, #25
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	240d      	movs	r4, #13
 8003de2:	193b      	adds	r3, r7, r4
 8003de4:	2107      	movs	r1, #7
 8003de6:	400a      	ands	r2, r1
 8003de8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	0f5b      	lsrs	r3, r3, #29
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	250c      	movs	r5, #12
 8003df6:	197b      	adds	r3, r7, r5
 8003df8:	2107      	movs	r1, #7
 8003dfa:	400a      	ands	r2, r1
 8003dfc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dfe:	183b      	adds	r3, r7, r0
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	197a      	adds	r2, r7, r5
 8003e04:	7812      	ldrb	r2, [r2, #0]
 8003e06:	4914      	ldr	r1, [pc, #80]	; (8003e58 <UARTEx_SetNbDataToProcess+0xb4>)
 8003e08:	5c8a      	ldrb	r2, [r1, r2]
 8003e0a:	435a      	muls	r2, r3
 8003e0c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e0e:	197b      	adds	r3, r7, r5
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	4a12      	ldr	r2, [pc, #72]	; (8003e5c <UARTEx_SetNbDataToProcess+0xb8>)
 8003e14:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e16:	0019      	movs	r1, r3
 8003e18:	f7fc fa06 	bl	8000228 <__divsi3>
 8003e1c:	0003      	movs	r3, r0
 8003e1e:	b299      	uxth	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	226a      	movs	r2, #106	; 0x6a
 8003e24:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e26:	19bb      	adds	r3, r7, r6
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	193a      	adds	r2, r7, r4
 8003e2c:	7812      	ldrb	r2, [r2, #0]
 8003e2e:	490a      	ldr	r1, [pc, #40]	; (8003e58 <UARTEx_SetNbDataToProcess+0xb4>)
 8003e30:	5c8a      	ldrb	r2, [r1, r2]
 8003e32:	435a      	muls	r2, r3
 8003e34:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e36:	193b      	adds	r3, r7, r4
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <UARTEx_SetNbDataToProcess+0xb8>)
 8003e3c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e3e:	0019      	movs	r1, r3
 8003e40:	f7fc f9f2 	bl	8000228 <__divsi3>
 8003e44:	0003      	movs	r3, r0
 8003e46:	b299      	uxth	r1, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2268      	movs	r2, #104	; 0x68
 8003e4c:	5299      	strh	r1, [r3, r2]
}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b005      	add	sp, #20
 8003e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	08004894 	.word	0x08004894
 8003e5c:	0800489c 	.word	0x0800489c

08003e60 <__errno>:
 8003e60:	4b01      	ldr	r3, [pc, #4]	; (8003e68 <__errno+0x8>)
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	4770      	bx	lr
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	2000000c 	.word	0x2000000c

08003e6c <__libc_init_array>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	2600      	movs	r6, #0
 8003e70:	4d0c      	ldr	r5, [pc, #48]	; (8003ea4 <__libc_init_array+0x38>)
 8003e72:	4c0d      	ldr	r4, [pc, #52]	; (8003ea8 <__libc_init_array+0x3c>)
 8003e74:	1b64      	subs	r4, r4, r5
 8003e76:	10a4      	asrs	r4, r4, #2
 8003e78:	42a6      	cmp	r6, r4
 8003e7a:	d109      	bne.n	8003e90 <__libc_init_array+0x24>
 8003e7c:	2600      	movs	r6, #0
 8003e7e:	f000 fc8b 	bl	8004798 <_init>
 8003e82:	4d0a      	ldr	r5, [pc, #40]	; (8003eac <__libc_init_array+0x40>)
 8003e84:	4c0a      	ldr	r4, [pc, #40]	; (8003eb0 <__libc_init_array+0x44>)
 8003e86:	1b64      	subs	r4, r4, r5
 8003e88:	10a4      	asrs	r4, r4, #2
 8003e8a:	42a6      	cmp	r6, r4
 8003e8c:	d105      	bne.n	8003e9a <__libc_init_array+0x2e>
 8003e8e:	bd70      	pop	{r4, r5, r6, pc}
 8003e90:	00b3      	lsls	r3, r6, #2
 8003e92:	58eb      	ldr	r3, [r5, r3]
 8003e94:	4798      	blx	r3
 8003e96:	3601      	adds	r6, #1
 8003e98:	e7ee      	b.n	8003e78 <__libc_init_array+0xc>
 8003e9a:	00b3      	lsls	r3, r6, #2
 8003e9c:	58eb      	ldr	r3, [r5, r3]
 8003e9e:	4798      	blx	r3
 8003ea0:	3601      	adds	r6, #1
 8003ea2:	e7f2      	b.n	8003e8a <__libc_init_array+0x1e>
 8003ea4:	080048d8 	.word	0x080048d8
 8003ea8:	080048d8 	.word	0x080048d8
 8003eac:	080048d8 	.word	0x080048d8
 8003eb0:	080048dc 	.word	0x080048dc

08003eb4 <memset>:
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	1882      	adds	r2, r0, r2
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d100      	bne.n	8003ebe <memset+0xa>
 8003ebc:	4770      	bx	lr
 8003ebe:	7019      	strb	r1, [r3, #0]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	e7f9      	b.n	8003eb8 <memset+0x4>

08003ec4 <siprintf>:
 8003ec4:	b40e      	push	{r1, r2, r3}
 8003ec6:	b500      	push	{lr}
 8003ec8:	490b      	ldr	r1, [pc, #44]	; (8003ef8 <siprintf+0x34>)
 8003eca:	b09c      	sub	sp, #112	; 0x70
 8003ecc:	ab1d      	add	r3, sp, #116	; 0x74
 8003ece:	9002      	str	r0, [sp, #8]
 8003ed0:	9006      	str	r0, [sp, #24]
 8003ed2:	9107      	str	r1, [sp, #28]
 8003ed4:	9104      	str	r1, [sp, #16]
 8003ed6:	4809      	ldr	r0, [pc, #36]	; (8003efc <siprintf+0x38>)
 8003ed8:	4909      	ldr	r1, [pc, #36]	; (8003f00 <siprintf+0x3c>)
 8003eda:	cb04      	ldmia	r3!, {r2}
 8003edc:	9105      	str	r1, [sp, #20]
 8003ede:	6800      	ldr	r0, [r0, #0]
 8003ee0:	a902      	add	r1, sp, #8
 8003ee2:	9301      	str	r3, [sp, #4]
 8003ee4:	f000 f870 	bl	8003fc8 <_svfiprintf_r>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9a02      	ldr	r2, [sp, #8]
 8003eec:	7013      	strb	r3, [r2, #0]
 8003eee:	b01c      	add	sp, #112	; 0x70
 8003ef0:	bc08      	pop	{r3}
 8003ef2:	b003      	add	sp, #12
 8003ef4:	4718      	bx	r3
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	7fffffff 	.word	0x7fffffff
 8003efc:	2000000c 	.word	0x2000000c
 8003f00:	ffff0208 	.word	0xffff0208

08003f04 <__ssputs_r>:
 8003f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f06:	688e      	ldr	r6, [r1, #8]
 8003f08:	b085      	sub	sp, #20
 8003f0a:	0007      	movs	r7, r0
 8003f0c:	000c      	movs	r4, r1
 8003f0e:	9203      	str	r2, [sp, #12]
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	429e      	cmp	r6, r3
 8003f14:	d83c      	bhi.n	8003f90 <__ssputs_r+0x8c>
 8003f16:	2390      	movs	r3, #144	; 0x90
 8003f18:	898a      	ldrh	r2, [r1, #12]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	421a      	tst	r2, r3
 8003f1e:	d034      	beq.n	8003f8a <__ssputs_r+0x86>
 8003f20:	6909      	ldr	r1, [r1, #16]
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	6960      	ldr	r0, [r4, #20]
 8003f26:	1a5b      	subs	r3, r3, r1
 8003f28:	9302      	str	r3, [sp, #8]
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	4343      	muls	r3, r0
 8003f2e:	0fdd      	lsrs	r5, r3, #31
 8003f30:	18ed      	adds	r5, r5, r3
 8003f32:	9b01      	ldr	r3, [sp, #4]
 8003f34:	9802      	ldr	r0, [sp, #8]
 8003f36:	3301      	adds	r3, #1
 8003f38:	181b      	adds	r3, r3, r0
 8003f3a:	106d      	asrs	r5, r5, #1
 8003f3c:	42ab      	cmp	r3, r5
 8003f3e:	d900      	bls.n	8003f42 <__ssputs_r+0x3e>
 8003f40:	001d      	movs	r5, r3
 8003f42:	0553      	lsls	r3, r2, #21
 8003f44:	d532      	bpl.n	8003fac <__ssputs_r+0xa8>
 8003f46:	0029      	movs	r1, r5
 8003f48:	0038      	movs	r0, r7
 8003f4a:	f000 fb53 	bl	80045f4 <_malloc_r>
 8003f4e:	1e06      	subs	r6, r0, #0
 8003f50:	d109      	bne.n	8003f66 <__ssputs_r+0x62>
 8003f52:	230c      	movs	r3, #12
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	2340      	movs	r3, #64	; 0x40
 8003f58:	2001      	movs	r0, #1
 8003f5a:	89a2      	ldrh	r2, [r4, #12]
 8003f5c:	4240      	negs	r0, r0
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	81a3      	strh	r3, [r4, #12]
 8003f62:	b005      	add	sp, #20
 8003f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f66:	9a02      	ldr	r2, [sp, #8]
 8003f68:	6921      	ldr	r1, [r4, #16]
 8003f6a:	f000 faba 	bl	80044e2 <memcpy>
 8003f6e:	89a3      	ldrh	r3, [r4, #12]
 8003f70:	4a14      	ldr	r2, [pc, #80]	; (8003fc4 <__ssputs_r+0xc0>)
 8003f72:	401a      	ands	r2, r3
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	4313      	orrs	r3, r2
 8003f78:	81a3      	strh	r3, [r4, #12]
 8003f7a:	9b02      	ldr	r3, [sp, #8]
 8003f7c:	6126      	str	r6, [r4, #16]
 8003f7e:	18f6      	adds	r6, r6, r3
 8003f80:	6026      	str	r6, [r4, #0]
 8003f82:	6165      	str	r5, [r4, #20]
 8003f84:	9e01      	ldr	r6, [sp, #4]
 8003f86:	1aed      	subs	r5, r5, r3
 8003f88:	60a5      	str	r5, [r4, #8]
 8003f8a:	9b01      	ldr	r3, [sp, #4]
 8003f8c:	429e      	cmp	r6, r3
 8003f8e:	d900      	bls.n	8003f92 <__ssputs_r+0x8e>
 8003f90:	9e01      	ldr	r6, [sp, #4]
 8003f92:	0032      	movs	r2, r6
 8003f94:	9903      	ldr	r1, [sp, #12]
 8003f96:	6820      	ldr	r0, [r4, #0]
 8003f98:	f000 faac 	bl	80044f4 <memmove>
 8003f9c:	68a3      	ldr	r3, [r4, #8]
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	1b9b      	subs	r3, r3, r6
 8003fa2:	60a3      	str	r3, [r4, #8]
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	199e      	adds	r6, r3, r6
 8003fa8:	6026      	str	r6, [r4, #0]
 8003faa:	e7da      	b.n	8003f62 <__ssputs_r+0x5e>
 8003fac:	002a      	movs	r2, r5
 8003fae:	0038      	movs	r0, r7
 8003fb0:	f000 fb96 	bl	80046e0 <_realloc_r>
 8003fb4:	1e06      	subs	r6, r0, #0
 8003fb6:	d1e0      	bne.n	8003f7a <__ssputs_r+0x76>
 8003fb8:	0038      	movs	r0, r7
 8003fba:	6921      	ldr	r1, [r4, #16]
 8003fbc:	f000 faae 	bl	800451c <_free_r>
 8003fc0:	e7c7      	b.n	8003f52 <__ssputs_r+0x4e>
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	fffffb7f 	.word	0xfffffb7f

08003fc8 <_svfiprintf_r>:
 8003fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fca:	b0a1      	sub	sp, #132	; 0x84
 8003fcc:	9003      	str	r0, [sp, #12]
 8003fce:	001d      	movs	r5, r3
 8003fd0:	898b      	ldrh	r3, [r1, #12]
 8003fd2:	000f      	movs	r7, r1
 8003fd4:	0016      	movs	r6, r2
 8003fd6:	061b      	lsls	r3, r3, #24
 8003fd8:	d511      	bpl.n	8003ffe <_svfiprintf_r+0x36>
 8003fda:	690b      	ldr	r3, [r1, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10e      	bne.n	8003ffe <_svfiprintf_r+0x36>
 8003fe0:	2140      	movs	r1, #64	; 0x40
 8003fe2:	f000 fb07 	bl	80045f4 <_malloc_r>
 8003fe6:	6038      	str	r0, [r7, #0]
 8003fe8:	6138      	str	r0, [r7, #16]
 8003fea:	2800      	cmp	r0, #0
 8003fec:	d105      	bne.n	8003ffa <_svfiprintf_r+0x32>
 8003fee:	230c      	movs	r3, #12
 8003ff0:	9a03      	ldr	r2, [sp, #12]
 8003ff2:	3801      	subs	r0, #1
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	b021      	add	sp, #132	; 0x84
 8003ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ffa:	2340      	movs	r3, #64	; 0x40
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	2300      	movs	r3, #0
 8004000:	ac08      	add	r4, sp, #32
 8004002:	6163      	str	r3, [r4, #20]
 8004004:	3320      	adds	r3, #32
 8004006:	7663      	strb	r3, [r4, #25]
 8004008:	3310      	adds	r3, #16
 800400a:	76a3      	strb	r3, [r4, #26]
 800400c:	9507      	str	r5, [sp, #28]
 800400e:	0035      	movs	r5, r6
 8004010:	782b      	ldrb	r3, [r5, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <_svfiprintf_r+0x52>
 8004016:	2b25      	cmp	r3, #37	; 0x25
 8004018:	d147      	bne.n	80040aa <_svfiprintf_r+0xe2>
 800401a:	1bab      	subs	r3, r5, r6
 800401c:	9305      	str	r3, [sp, #20]
 800401e:	42b5      	cmp	r5, r6
 8004020:	d00c      	beq.n	800403c <_svfiprintf_r+0x74>
 8004022:	0032      	movs	r2, r6
 8004024:	0039      	movs	r1, r7
 8004026:	9803      	ldr	r0, [sp, #12]
 8004028:	f7ff ff6c 	bl	8003f04 <__ssputs_r>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d100      	bne.n	8004032 <_svfiprintf_r+0x6a>
 8004030:	e0ae      	b.n	8004190 <_svfiprintf_r+0x1c8>
 8004032:	6962      	ldr	r2, [r4, #20]
 8004034:	9b05      	ldr	r3, [sp, #20]
 8004036:	4694      	mov	ip, r2
 8004038:	4463      	add	r3, ip
 800403a:	6163      	str	r3, [r4, #20]
 800403c:	782b      	ldrb	r3, [r5, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d100      	bne.n	8004044 <_svfiprintf_r+0x7c>
 8004042:	e0a5      	b.n	8004190 <_svfiprintf_r+0x1c8>
 8004044:	2201      	movs	r2, #1
 8004046:	2300      	movs	r3, #0
 8004048:	4252      	negs	r2, r2
 800404a:	6062      	str	r2, [r4, #4]
 800404c:	a904      	add	r1, sp, #16
 800404e:	3254      	adds	r2, #84	; 0x54
 8004050:	1852      	adds	r2, r2, r1
 8004052:	1c6e      	adds	r6, r5, #1
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	60e3      	str	r3, [r4, #12]
 8004058:	60a3      	str	r3, [r4, #8]
 800405a:	7013      	strb	r3, [r2, #0]
 800405c:	65a3      	str	r3, [r4, #88]	; 0x58
 800405e:	2205      	movs	r2, #5
 8004060:	7831      	ldrb	r1, [r6, #0]
 8004062:	4854      	ldr	r0, [pc, #336]	; (80041b4 <_svfiprintf_r+0x1ec>)
 8004064:	f000 fa32 	bl	80044cc <memchr>
 8004068:	1c75      	adds	r5, r6, #1
 800406a:	2800      	cmp	r0, #0
 800406c:	d11f      	bne.n	80040ae <_svfiprintf_r+0xe6>
 800406e:	6822      	ldr	r2, [r4, #0]
 8004070:	06d3      	lsls	r3, r2, #27
 8004072:	d504      	bpl.n	800407e <_svfiprintf_r+0xb6>
 8004074:	2353      	movs	r3, #83	; 0x53
 8004076:	a904      	add	r1, sp, #16
 8004078:	185b      	adds	r3, r3, r1
 800407a:	2120      	movs	r1, #32
 800407c:	7019      	strb	r1, [r3, #0]
 800407e:	0713      	lsls	r3, r2, #28
 8004080:	d504      	bpl.n	800408c <_svfiprintf_r+0xc4>
 8004082:	2353      	movs	r3, #83	; 0x53
 8004084:	a904      	add	r1, sp, #16
 8004086:	185b      	adds	r3, r3, r1
 8004088:	212b      	movs	r1, #43	; 0x2b
 800408a:	7019      	strb	r1, [r3, #0]
 800408c:	7833      	ldrb	r3, [r6, #0]
 800408e:	2b2a      	cmp	r3, #42	; 0x2a
 8004090:	d016      	beq.n	80040c0 <_svfiprintf_r+0xf8>
 8004092:	0035      	movs	r5, r6
 8004094:	2100      	movs	r1, #0
 8004096:	200a      	movs	r0, #10
 8004098:	68e3      	ldr	r3, [r4, #12]
 800409a:	782a      	ldrb	r2, [r5, #0]
 800409c:	1c6e      	adds	r6, r5, #1
 800409e:	3a30      	subs	r2, #48	; 0x30
 80040a0:	2a09      	cmp	r2, #9
 80040a2:	d94e      	bls.n	8004142 <_svfiprintf_r+0x17a>
 80040a4:	2900      	cmp	r1, #0
 80040a6:	d111      	bne.n	80040cc <_svfiprintf_r+0x104>
 80040a8:	e017      	b.n	80040da <_svfiprintf_r+0x112>
 80040aa:	3501      	adds	r5, #1
 80040ac:	e7b0      	b.n	8004010 <_svfiprintf_r+0x48>
 80040ae:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <_svfiprintf_r+0x1ec>)
 80040b0:	6822      	ldr	r2, [r4, #0]
 80040b2:	1ac0      	subs	r0, r0, r3
 80040b4:	2301      	movs	r3, #1
 80040b6:	4083      	lsls	r3, r0
 80040b8:	4313      	orrs	r3, r2
 80040ba:	002e      	movs	r6, r5
 80040bc:	6023      	str	r3, [r4, #0]
 80040be:	e7ce      	b.n	800405e <_svfiprintf_r+0x96>
 80040c0:	9b07      	ldr	r3, [sp, #28]
 80040c2:	1d19      	adds	r1, r3, #4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	9107      	str	r1, [sp, #28]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	db01      	blt.n	80040d0 <_svfiprintf_r+0x108>
 80040cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80040ce:	e004      	b.n	80040da <_svfiprintf_r+0x112>
 80040d0:	425b      	negs	r3, r3
 80040d2:	60e3      	str	r3, [r4, #12]
 80040d4:	2302      	movs	r3, #2
 80040d6:	4313      	orrs	r3, r2
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	782b      	ldrb	r3, [r5, #0]
 80040dc:	2b2e      	cmp	r3, #46	; 0x2e
 80040de:	d10a      	bne.n	80040f6 <_svfiprintf_r+0x12e>
 80040e0:	786b      	ldrb	r3, [r5, #1]
 80040e2:	2b2a      	cmp	r3, #42	; 0x2a
 80040e4:	d135      	bne.n	8004152 <_svfiprintf_r+0x18a>
 80040e6:	9b07      	ldr	r3, [sp, #28]
 80040e8:	3502      	adds	r5, #2
 80040ea:	1d1a      	adds	r2, r3, #4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	9207      	str	r2, [sp, #28]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	db2b      	blt.n	800414c <_svfiprintf_r+0x184>
 80040f4:	9309      	str	r3, [sp, #36]	; 0x24
 80040f6:	4e30      	ldr	r6, [pc, #192]	; (80041b8 <_svfiprintf_r+0x1f0>)
 80040f8:	2203      	movs	r2, #3
 80040fa:	0030      	movs	r0, r6
 80040fc:	7829      	ldrb	r1, [r5, #0]
 80040fe:	f000 f9e5 	bl	80044cc <memchr>
 8004102:	2800      	cmp	r0, #0
 8004104:	d006      	beq.n	8004114 <_svfiprintf_r+0x14c>
 8004106:	2340      	movs	r3, #64	; 0x40
 8004108:	1b80      	subs	r0, r0, r6
 800410a:	4083      	lsls	r3, r0
 800410c:	6822      	ldr	r2, [r4, #0]
 800410e:	3501      	adds	r5, #1
 8004110:	4313      	orrs	r3, r2
 8004112:	6023      	str	r3, [r4, #0]
 8004114:	7829      	ldrb	r1, [r5, #0]
 8004116:	2206      	movs	r2, #6
 8004118:	4828      	ldr	r0, [pc, #160]	; (80041bc <_svfiprintf_r+0x1f4>)
 800411a:	1c6e      	adds	r6, r5, #1
 800411c:	7621      	strb	r1, [r4, #24]
 800411e:	f000 f9d5 	bl	80044cc <memchr>
 8004122:	2800      	cmp	r0, #0
 8004124:	d03c      	beq.n	80041a0 <_svfiprintf_r+0x1d8>
 8004126:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <_svfiprintf_r+0x1f8>)
 8004128:	2b00      	cmp	r3, #0
 800412a:	d125      	bne.n	8004178 <_svfiprintf_r+0x1b0>
 800412c:	2207      	movs	r2, #7
 800412e:	9b07      	ldr	r3, [sp, #28]
 8004130:	3307      	adds	r3, #7
 8004132:	4393      	bics	r3, r2
 8004134:	3308      	adds	r3, #8
 8004136:	9307      	str	r3, [sp, #28]
 8004138:	6963      	ldr	r3, [r4, #20]
 800413a:	9a04      	ldr	r2, [sp, #16]
 800413c:	189b      	adds	r3, r3, r2
 800413e:	6163      	str	r3, [r4, #20]
 8004140:	e765      	b.n	800400e <_svfiprintf_r+0x46>
 8004142:	4343      	muls	r3, r0
 8004144:	0035      	movs	r5, r6
 8004146:	2101      	movs	r1, #1
 8004148:	189b      	adds	r3, r3, r2
 800414a:	e7a6      	b.n	800409a <_svfiprintf_r+0xd2>
 800414c:	2301      	movs	r3, #1
 800414e:	425b      	negs	r3, r3
 8004150:	e7d0      	b.n	80040f4 <_svfiprintf_r+0x12c>
 8004152:	2300      	movs	r3, #0
 8004154:	200a      	movs	r0, #10
 8004156:	001a      	movs	r2, r3
 8004158:	3501      	adds	r5, #1
 800415a:	6063      	str	r3, [r4, #4]
 800415c:	7829      	ldrb	r1, [r5, #0]
 800415e:	1c6e      	adds	r6, r5, #1
 8004160:	3930      	subs	r1, #48	; 0x30
 8004162:	2909      	cmp	r1, #9
 8004164:	d903      	bls.n	800416e <_svfiprintf_r+0x1a6>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0c5      	beq.n	80040f6 <_svfiprintf_r+0x12e>
 800416a:	9209      	str	r2, [sp, #36]	; 0x24
 800416c:	e7c3      	b.n	80040f6 <_svfiprintf_r+0x12e>
 800416e:	4342      	muls	r2, r0
 8004170:	0035      	movs	r5, r6
 8004172:	2301      	movs	r3, #1
 8004174:	1852      	adds	r2, r2, r1
 8004176:	e7f1      	b.n	800415c <_svfiprintf_r+0x194>
 8004178:	ab07      	add	r3, sp, #28
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	003a      	movs	r2, r7
 800417e:	0021      	movs	r1, r4
 8004180:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <_svfiprintf_r+0x1fc>)
 8004182:	9803      	ldr	r0, [sp, #12]
 8004184:	e000      	b.n	8004188 <_svfiprintf_r+0x1c0>
 8004186:	bf00      	nop
 8004188:	9004      	str	r0, [sp, #16]
 800418a:	9b04      	ldr	r3, [sp, #16]
 800418c:	3301      	adds	r3, #1
 800418e:	d1d3      	bne.n	8004138 <_svfiprintf_r+0x170>
 8004190:	89bb      	ldrh	r3, [r7, #12]
 8004192:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004194:	065b      	lsls	r3, r3, #25
 8004196:	d400      	bmi.n	800419a <_svfiprintf_r+0x1d2>
 8004198:	e72d      	b.n	8003ff6 <_svfiprintf_r+0x2e>
 800419a:	2001      	movs	r0, #1
 800419c:	4240      	negs	r0, r0
 800419e:	e72a      	b.n	8003ff6 <_svfiprintf_r+0x2e>
 80041a0:	ab07      	add	r3, sp, #28
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	003a      	movs	r2, r7
 80041a6:	0021      	movs	r1, r4
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <_svfiprintf_r+0x1fc>)
 80041aa:	9803      	ldr	r0, [sp, #12]
 80041ac:	f000 f87c 	bl	80042a8 <_printf_i>
 80041b0:	e7ea      	b.n	8004188 <_svfiprintf_r+0x1c0>
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	080048a4 	.word	0x080048a4
 80041b8:	080048aa 	.word	0x080048aa
 80041bc:	080048ae 	.word	0x080048ae
 80041c0:	00000000 	.word	0x00000000
 80041c4:	08003f05 	.word	0x08003f05

080041c8 <_printf_common>:
 80041c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041ca:	0015      	movs	r5, r2
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	688a      	ldr	r2, [r1, #8]
 80041d0:	690b      	ldr	r3, [r1, #16]
 80041d2:	000c      	movs	r4, r1
 80041d4:	9000      	str	r0, [sp, #0]
 80041d6:	4293      	cmp	r3, r2
 80041d8:	da00      	bge.n	80041dc <_printf_common+0x14>
 80041da:	0013      	movs	r3, r2
 80041dc:	0022      	movs	r2, r4
 80041de:	602b      	str	r3, [r5, #0]
 80041e0:	3243      	adds	r2, #67	; 0x43
 80041e2:	7812      	ldrb	r2, [r2, #0]
 80041e4:	2a00      	cmp	r2, #0
 80041e6:	d001      	beq.n	80041ec <_printf_common+0x24>
 80041e8:	3301      	adds	r3, #1
 80041ea:	602b      	str	r3, [r5, #0]
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	069b      	lsls	r3, r3, #26
 80041f0:	d502      	bpl.n	80041f8 <_printf_common+0x30>
 80041f2:	682b      	ldr	r3, [r5, #0]
 80041f4:	3302      	adds	r3, #2
 80041f6:	602b      	str	r3, [r5, #0]
 80041f8:	6822      	ldr	r2, [r4, #0]
 80041fa:	2306      	movs	r3, #6
 80041fc:	0017      	movs	r7, r2
 80041fe:	401f      	ands	r7, r3
 8004200:	421a      	tst	r2, r3
 8004202:	d027      	beq.n	8004254 <_printf_common+0x8c>
 8004204:	0023      	movs	r3, r4
 8004206:	3343      	adds	r3, #67	; 0x43
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	1e5a      	subs	r2, r3, #1
 800420c:	4193      	sbcs	r3, r2
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	0692      	lsls	r2, r2, #26
 8004212:	d430      	bmi.n	8004276 <_printf_common+0xae>
 8004214:	0022      	movs	r2, r4
 8004216:	9901      	ldr	r1, [sp, #4]
 8004218:	9800      	ldr	r0, [sp, #0]
 800421a:	9e08      	ldr	r6, [sp, #32]
 800421c:	3243      	adds	r2, #67	; 0x43
 800421e:	47b0      	blx	r6
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	d025      	beq.n	8004270 <_printf_common+0xa8>
 8004224:	2306      	movs	r3, #6
 8004226:	6820      	ldr	r0, [r4, #0]
 8004228:	682a      	ldr	r2, [r5, #0]
 800422a:	68e1      	ldr	r1, [r4, #12]
 800422c:	2500      	movs	r5, #0
 800422e:	4003      	ands	r3, r0
 8004230:	2b04      	cmp	r3, #4
 8004232:	d103      	bne.n	800423c <_printf_common+0x74>
 8004234:	1a8d      	subs	r5, r1, r2
 8004236:	43eb      	mvns	r3, r5
 8004238:	17db      	asrs	r3, r3, #31
 800423a:	401d      	ands	r5, r3
 800423c:	68a3      	ldr	r3, [r4, #8]
 800423e:	6922      	ldr	r2, [r4, #16]
 8004240:	4293      	cmp	r3, r2
 8004242:	dd01      	ble.n	8004248 <_printf_common+0x80>
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	18ed      	adds	r5, r5, r3
 8004248:	2700      	movs	r7, #0
 800424a:	42bd      	cmp	r5, r7
 800424c:	d120      	bne.n	8004290 <_printf_common+0xc8>
 800424e:	2000      	movs	r0, #0
 8004250:	e010      	b.n	8004274 <_printf_common+0xac>
 8004252:	3701      	adds	r7, #1
 8004254:	68e3      	ldr	r3, [r4, #12]
 8004256:	682a      	ldr	r2, [r5, #0]
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	42bb      	cmp	r3, r7
 800425c:	ddd2      	ble.n	8004204 <_printf_common+0x3c>
 800425e:	0022      	movs	r2, r4
 8004260:	2301      	movs	r3, #1
 8004262:	9901      	ldr	r1, [sp, #4]
 8004264:	9800      	ldr	r0, [sp, #0]
 8004266:	9e08      	ldr	r6, [sp, #32]
 8004268:	3219      	adds	r2, #25
 800426a:	47b0      	blx	r6
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	d1f0      	bne.n	8004252 <_printf_common+0x8a>
 8004270:	2001      	movs	r0, #1
 8004272:	4240      	negs	r0, r0
 8004274:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004276:	2030      	movs	r0, #48	; 0x30
 8004278:	18e1      	adds	r1, r4, r3
 800427a:	3143      	adds	r1, #67	; 0x43
 800427c:	7008      	strb	r0, [r1, #0]
 800427e:	0021      	movs	r1, r4
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	3145      	adds	r1, #69	; 0x45
 8004284:	7809      	ldrb	r1, [r1, #0]
 8004286:	18a2      	adds	r2, r4, r2
 8004288:	3243      	adds	r2, #67	; 0x43
 800428a:	3302      	adds	r3, #2
 800428c:	7011      	strb	r1, [r2, #0]
 800428e:	e7c1      	b.n	8004214 <_printf_common+0x4c>
 8004290:	0022      	movs	r2, r4
 8004292:	2301      	movs	r3, #1
 8004294:	9901      	ldr	r1, [sp, #4]
 8004296:	9800      	ldr	r0, [sp, #0]
 8004298:	9e08      	ldr	r6, [sp, #32]
 800429a:	321a      	adds	r2, #26
 800429c:	47b0      	blx	r6
 800429e:	1c43      	adds	r3, r0, #1
 80042a0:	d0e6      	beq.n	8004270 <_printf_common+0xa8>
 80042a2:	3701      	adds	r7, #1
 80042a4:	e7d1      	b.n	800424a <_printf_common+0x82>
	...

080042a8 <_printf_i>:
 80042a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042aa:	b08b      	sub	sp, #44	; 0x2c
 80042ac:	9206      	str	r2, [sp, #24]
 80042ae:	000a      	movs	r2, r1
 80042b0:	3243      	adds	r2, #67	; 0x43
 80042b2:	9307      	str	r3, [sp, #28]
 80042b4:	9005      	str	r0, [sp, #20]
 80042b6:	9204      	str	r2, [sp, #16]
 80042b8:	7e0a      	ldrb	r2, [r1, #24]
 80042ba:	000c      	movs	r4, r1
 80042bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80042be:	2a78      	cmp	r2, #120	; 0x78
 80042c0:	d807      	bhi.n	80042d2 <_printf_i+0x2a>
 80042c2:	2a62      	cmp	r2, #98	; 0x62
 80042c4:	d809      	bhi.n	80042da <_printf_i+0x32>
 80042c6:	2a00      	cmp	r2, #0
 80042c8:	d100      	bne.n	80042cc <_printf_i+0x24>
 80042ca:	e0c1      	b.n	8004450 <_printf_i+0x1a8>
 80042cc:	2a58      	cmp	r2, #88	; 0x58
 80042ce:	d100      	bne.n	80042d2 <_printf_i+0x2a>
 80042d0:	e08c      	b.n	80043ec <_printf_i+0x144>
 80042d2:	0026      	movs	r6, r4
 80042d4:	3642      	adds	r6, #66	; 0x42
 80042d6:	7032      	strb	r2, [r6, #0]
 80042d8:	e022      	b.n	8004320 <_printf_i+0x78>
 80042da:	0010      	movs	r0, r2
 80042dc:	3863      	subs	r0, #99	; 0x63
 80042de:	2815      	cmp	r0, #21
 80042e0:	d8f7      	bhi.n	80042d2 <_printf_i+0x2a>
 80042e2:	f7fb ff0d 	bl	8000100 <__gnu_thumb1_case_shi>
 80042e6:	0016      	.short	0x0016
 80042e8:	fff6001f 	.word	0xfff6001f
 80042ec:	fff6fff6 	.word	0xfff6fff6
 80042f0:	001ffff6 	.word	0x001ffff6
 80042f4:	fff6fff6 	.word	0xfff6fff6
 80042f8:	fff6fff6 	.word	0xfff6fff6
 80042fc:	003600a8 	.word	0x003600a8
 8004300:	fff6009a 	.word	0xfff6009a
 8004304:	00b9fff6 	.word	0x00b9fff6
 8004308:	0036fff6 	.word	0x0036fff6
 800430c:	fff6fff6 	.word	0xfff6fff6
 8004310:	009e      	.short	0x009e
 8004312:	0026      	movs	r6, r4
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	3642      	adds	r6, #66	; 0x42
 8004318:	1d11      	adds	r1, r2, #4
 800431a:	6019      	str	r1, [r3, #0]
 800431c:	6813      	ldr	r3, [r2, #0]
 800431e:	7033      	strb	r3, [r6, #0]
 8004320:	2301      	movs	r3, #1
 8004322:	e0a7      	b.n	8004474 <_printf_i+0x1cc>
 8004324:	6808      	ldr	r0, [r1, #0]
 8004326:	6819      	ldr	r1, [r3, #0]
 8004328:	1d0a      	adds	r2, r1, #4
 800432a:	0605      	lsls	r5, r0, #24
 800432c:	d50b      	bpl.n	8004346 <_printf_i+0x9e>
 800432e:	680d      	ldr	r5, [r1, #0]
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	2d00      	cmp	r5, #0
 8004334:	da03      	bge.n	800433e <_printf_i+0x96>
 8004336:	232d      	movs	r3, #45	; 0x2d
 8004338:	9a04      	ldr	r2, [sp, #16]
 800433a:	426d      	negs	r5, r5
 800433c:	7013      	strb	r3, [r2, #0]
 800433e:	4b61      	ldr	r3, [pc, #388]	; (80044c4 <_printf_i+0x21c>)
 8004340:	270a      	movs	r7, #10
 8004342:	9303      	str	r3, [sp, #12]
 8004344:	e01b      	b.n	800437e <_printf_i+0xd6>
 8004346:	680d      	ldr	r5, [r1, #0]
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	0641      	lsls	r1, r0, #25
 800434c:	d5f1      	bpl.n	8004332 <_printf_i+0x8a>
 800434e:	b22d      	sxth	r5, r5
 8004350:	e7ef      	b.n	8004332 <_printf_i+0x8a>
 8004352:	680d      	ldr	r5, [r1, #0]
 8004354:	6819      	ldr	r1, [r3, #0]
 8004356:	1d08      	adds	r0, r1, #4
 8004358:	6018      	str	r0, [r3, #0]
 800435a:	062e      	lsls	r6, r5, #24
 800435c:	d501      	bpl.n	8004362 <_printf_i+0xba>
 800435e:	680d      	ldr	r5, [r1, #0]
 8004360:	e003      	b.n	800436a <_printf_i+0xc2>
 8004362:	066d      	lsls	r5, r5, #25
 8004364:	d5fb      	bpl.n	800435e <_printf_i+0xb6>
 8004366:	680d      	ldr	r5, [r1, #0]
 8004368:	b2ad      	uxth	r5, r5
 800436a:	4b56      	ldr	r3, [pc, #344]	; (80044c4 <_printf_i+0x21c>)
 800436c:	2708      	movs	r7, #8
 800436e:	9303      	str	r3, [sp, #12]
 8004370:	2a6f      	cmp	r2, #111	; 0x6f
 8004372:	d000      	beq.n	8004376 <_printf_i+0xce>
 8004374:	3702      	adds	r7, #2
 8004376:	0023      	movs	r3, r4
 8004378:	2200      	movs	r2, #0
 800437a:	3343      	adds	r3, #67	; 0x43
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	6863      	ldr	r3, [r4, #4]
 8004380:	60a3      	str	r3, [r4, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	db03      	blt.n	800438e <_printf_i+0xe6>
 8004386:	2204      	movs	r2, #4
 8004388:	6821      	ldr	r1, [r4, #0]
 800438a:	4391      	bics	r1, r2
 800438c:	6021      	str	r1, [r4, #0]
 800438e:	2d00      	cmp	r5, #0
 8004390:	d102      	bne.n	8004398 <_printf_i+0xf0>
 8004392:	9e04      	ldr	r6, [sp, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00c      	beq.n	80043b2 <_printf_i+0x10a>
 8004398:	9e04      	ldr	r6, [sp, #16]
 800439a:	0028      	movs	r0, r5
 800439c:	0039      	movs	r1, r7
 800439e:	f7fb ff3f 	bl	8000220 <__aeabi_uidivmod>
 80043a2:	9b03      	ldr	r3, [sp, #12]
 80043a4:	3e01      	subs	r6, #1
 80043a6:	5c5b      	ldrb	r3, [r3, r1]
 80043a8:	7033      	strb	r3, [r6, #0]
 80043aa:	002b      	movs	r3, r5
 80043ac:	0005      	movs	r5, r0
 80043ae:	429f      	cmp	r7, r3
 80043b0:	d9f3      	bls.n	800439a <_printf_i+0xf2>
 80043b2:	2f08      	cmp	r7, #8
 80043b4:	d109      	bne.n	80043ca <_printf_i+0x122>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	07db      	lsls	r3, r3, #31
 80043ba:	d506      	bpl.n	80043ca <_printf_i+0x122>
 80043bc:	6863      	ldr	r3, [r4, #4]
 80043be:	6922      	ldr	r2, [r4, #16]
 80043c0:	4293      	cmp	r3, r2
 80043c2:	dc02      	bgt.n	80043ca <_printf_i+0x122>
 80043c4:	2330      	movs	r3, #48	; 0x30
 80043c6:	3e01      	subs	r6, #1
 80043c8:	7033      	strb	r3, [r6, #0]
 80043ca:	9b04      	ldr	r3, [sp, #16]
 80043cc:	1b9b      	subs	r3, r3, r6
 80043ce:	6123      	str	r3, [r4, #16]
 80043d0:	9b07      	ldr	r3, [sp, #28]
 80043d2:	0021      	movs	r1, r4
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	9805      	ldr	r0, [sp, #20]
 80043d8:	9b06      	ldr	r3, [sp, #24]
 80043da:	aa09      	add	r2, sp, #36	; 0x24
 80043dc:	f7ff fef4 	bl	80041c8 <_printf_common>
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	d14c      	bne.n	800447e <_printf_i+0x1d6>
 80043e4:	2001      	movs	r0, #1
 80043e6:	4240      	negs	r0, r0
 80043e8:	b00b      	add	sp, #44	; 0x2c
 80043ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ec:	3145      	adds	r1, #69	; 0x45
 80043ee:	700a      	strb	r2, [r1, #0]
 80043f0:	4a34      	ldr	r2, [pc, #208]	; (80044c4 <_printf_i+0x21c>)
 80043f2:	9203      	str	r2, [sp, #12]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	6821      	ldr	r1, [r4, #0]
 80043f8:	ca20      	ldmia	r2!, {r5}
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	0608      	lsls	r0, r1, #24
 80043fe:	d516      	bpl.n	800442e <_printf_i+0x186>
 8004400:	07cb      	lsls	r3, r1, #31
 8004402:	d502      	bpl.n	800440a <_printf_i+0x162>
 8004404:	2320      	movs	r3, #32
 8004406:	4319      	orrs	r1, r3
 8004408:	6021      	str	r1, [r4, #0]
 800440a:	2710      	movs	r7, #16
 800440c:	2d00      	cmp	r5, #0
 800440e:	d1b2      	bne.n	8004376 <_printf_i+0xce>
 8004410:	2320      	movs	r3, #32
 8004412:	6822      	ldr	r2, [r4, #0]
 8004414:	439a      	bics	r2, r3
 8004416:	6022      	str	r2, [r4, #0]
 8004418:	e7ad      	b.n	8004376 <_printf_i+0xce>
 800441a:	2220      	movs	r2, #32
 800441c:	6809      	ldr	r1, [r1, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	6022      	str	r2, [r4, #0]
 8004422:	0022      	movs	r2, r4
 8004424:	2178      	movs	r1, #120	; 0x78
 8004426:	3245      	adds	r2, #69	; 0x45
 8004428:	7011      	strb	r1, [r2, #0]
 800442a:	4a27      	ldr	r2, [pc, #156]	; (80044c8 <_printf_i+0x220>)
 800442c:	e7e1      	b.n	80043f2 <_printf_i+0x14a>
 800442e:	0648      	lsls	r0, r1, #25
 8004430:	d5e6      	bpl.n	8004400 <_printf_i+0x158>
 8004432:	b2ad      	uxth	r5, r5
 8004434:	e7e4      	b.n	8004400 <_printf_i+0x158>
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	680d      	ldr	r5, [r1, #0]
 800443a:	1d10      	adds	r0, r2, #4
 800443c:	6949      	ldr	r1, [r1, #20]
 800443e:	6018      	str	r0, [r3, #0]
 8004440:	6813      	ldr	r3, [r2, #0]
 8004442:	062e      	lsls	r6, r5, #24
 8004444:	d501      	bpl.n	800444a <_printf_i+0x1a2>
 8004446:	6019      	str	r1, [r3, #0]
 8004448:	e002      	b.n	8004450 <_printf_i+0x1a8>
 800444a:	066d      	lsls	r5, r5, #25
 800444c:	d5fb      	bpl.n	8004446 <_printf_i+0x19e>
 800444e:	8019      	strh	r1, [r3, #0]
 8004450:	2300      	movs	r3, #0
 8004452:	9e04      	ldr	r6, [sp, #16]
 8004454:	6123      	str	r3, [r4, #16]
 8004456:	e7bb      	b.n	80043d0 <_printf_i+0x128>
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	1d11      	adds	r1, r2, #4
 800445c:	6019      	str	r1, [r3, #0]
 800445e:	6816      	ldr	r6, [r2, #0]
 8004460:	2100      	movs	r1, #0
 8004462:	0030      	movs	r0, r6
 8004464:	6862      	ldr	r2, [r4, #4]
 8004466:	f000 f831 	bl	80044cc <memchr>
 800446a:	2800      	cmp	r0, #0
 800446c:	d001      	beq.n	8004472 <_printf_i+0x1ca>
 800446e:	1b80      	subs	r0, r0, r6
 8004470:	6060      	str	r0, [r4, #4]
 8004472:	6863      	ldr	r3, [r4, #4]
 8004474:	6123      	str	r3, [r4, #16]
 8004476:	2300      	movs	r3, #0
 8004478:	9a04      	ldr	r2, [sp, #16]
 800447a:	7013      	strb	r3, [r2, #0]
 800447c:	e7a8      	b.n	80043d0 <_printf_i+0x128>
 800447e:	6923      	ldr	r3, [r4, #16]
 8004480:	0032      	movs	r2, r6
 8004482:	9906      	ldr	r1, [sp, #24]
 8004484:	9805      	ldr	r0, [sp, #20]
 8004486:	9d07      	ldr	r5, [sp, #28]
 8004488:	47a8      	blx	r5
 800448a:	1c43      	adds	r3, r0, #1
 800448c:	d0aa      	beq.n	80043e4 <_printf_i+0x13c>
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	079b      	lsls	r3, r3, #30
 8004492:	d415      	bmi.n	80044c0 <_printf_i+0x218>
 8004494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004496:	68e0      	ldr	r0, [r4, #12]
 8004498:	4298      	cmp	r0, r3
 800449a:	daa5      	bge.n	80043e8 <_printf_i+0x140>
 800449c:	0018      	movs	r0, r3
 800449e:	e7a3      	b.n	80043e8 <_printf_i+0x140>
 80044a0:	0022      	movs	r2, r4
 80044a2:	2301      	movs	r3, #1
 80044a4:	9906      	ldr	r1, [sp, #24]
 80044a6:	9805      	ldr	r0, [sp, #20]
 80044a8:	9e07      	ldr	r6, [sp, #28]
 80044aa:	3219      	adds	r2, #25
 80044ac:	47b0      	blx	r6
 80044ae:	1c43      	adds	r3, r0, #1
 80044b0:	d098      	beq.n	80043e4 <_printf_i+0x13c>
 80044b2:	3501      	adds	r5, #1
 80044b4:	68e3      	ldr	r3, [r4, #12]
 80044b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	42ab      	cmp	r3, r5
 80044bc:	dcf0      	bgt.n	80044a0 <_printf_i+0x1f8>
 80044be:	e7e9      	b.n	8004494 <_printf_i+0x1ec>
 80044c0:	2500      	movs	r5, #0
 80044c2:	e7f7      	b.n	80044b4 <_printf_i+0x20c>
 80044c4:	080048b5 	.word	0x080048b5
 80044c8:	080048c6 	.word	0x080048c6

080044cc <memchr>:
 80044cc:	b2c9      	uxtb	r1, r1
 80044ce:	1882      	adds	r2, r0, r2
 80044d0:	4290      	cmp	r0, r2
 80044d2:	d101      	bne.n	80044d8 <memchr+0xc>
 80044d4:	2000      	movs	r0, #0
 80044d6:	4770      	bx	lr
 80044d8:	7803      	ldrb	r3, [r0, #0]
 80044da:	428b      	cmp	r3, r1
 80044dc:	d0fb      	beq.n	80044d6 <memchr+0xa>
 80044de:	3001      	adds	r0, #1
 80044e0:	e7f6      	b.n	80044d0 <memchr+0x4>

080044e2 <memcpy>:
 80044e2:	2300      	movs	r3, #0
 80044e4:	b510      	push	{r4, lr}
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d100      	bne.n	80044ec <memcpy+0xa>
 80044ea:	bd10      	pop	{r4, pc}
 80044ec:	5ccc      	ldrb	r4, [r1, r3]
 80044ee:	54c4      	strb	r4, [r0, r3]
 80044f0:	3301      	adds	r3, #1
 80044f2:	e7f8      	b.n	80044e6 <memcpy+0x4>

080044f4 <memmove>:
 80044f4:	b510      	push	{r4, lr}
 80044f6:	4288      	cmp	r0, r1
 80044f8:	d902      	bls.n	8004500 <memmove+0xc>
 80044fa:	188b      	adds	r3, r1, r2
 80044fc:	4298      	cmp	r0, r3
 80044fe:	d303      	bcc.n	8004508 <memmove+0x14>
 8004500:	2300      	movs	r3, #0
 8004502:	e007      	b.n	8004514 <memmove+0x20>
 8004504:	5c8b      	ldrb	r3, [r1, r2]
 8004506:	5483      	strb	r3, [r0, r2]
 8004508:	3a01      	subs	r2, #1
 800450a:	d2fb      	bcs.n	8004504 <memmove+0x10>
 800450c:	bd10      	pop	{r4, pc}
 800450e:	5ccc      	ldrb	r4, [r1, r3]
 8004510:	54c4      	strb	r4, [r0, r3]
 8004512:	3301      	adds	r3, #1
 8004514:	429a      	cmp	r2, r3
 8004516:	d1fa      	bne.n	800450e <memmove+0x1a>
 8004518:	e7f8      	b.n	800450c <memmove+0x18>
	...

0800451c <_free_r>:
 800451c:	b570      	push	{r4, r5, r6, lr}
 800451e:	0005      	movs	r5, r0
 8004520:	2900      	cmp	r1, #0
 8004522:	d010      	beq.n	8004546 <_free_r+0x2a>
 8004524:	1f0c      	subs	r4, r1, #4
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	da00      	bge.n	800452e <_free_r+0x12>
 800452c:	18e4      	adds	r4, r4, r3
 800452e:	0028      	movs	r0, r5
 8004530:	f000 f918 	bl	8004764 <__malloc_lock>
 8004534:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <_free_r+0x90>)
 8004536:	6813      	ldr	r3, [r2, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d105      	bne.n	8004548 <_free_r+0x2c>
 800453c:	6063      	str	r3, [r4, #4]
 800453e:	6014      	str	r4, [r2, #0]
 8004540:	0028      	movs	r0, r5
 8004542:	f000 f917 	bl	8004774 <__malloc_unlock>
 8004546:	bd70      	pop	{r4, r5, r6, pc}
 8004548:	42a3      	cmp	r3, r4
 800454a:	d908      	bls.n	800455e <_free_r+0x42>
 800454c:	6821      	ldr	r1, [r4, #0]
 800454e:	1860      	adds	r0, r4, r1
 8004550:	4283      	cmp	r3, r0
 8004552:	d1f3      	bne.n	800453c <_free_r+0x20>
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	1841      	adds	r1, r0, r1
 800455a:	6021      	str	r1, [r4, #0]
 800455c:	e7ee      	b.n	800453c <_free_r+0x20>
 800455e:	001a      	movs	r2, r3
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <_free_r+0x4e>
 8004566:	42a3      	cmp	r3, r4
 8004568:	d9f9      	bls.n	800455e <_free_r+0x42>
 800456a:	6811      	ldr	r1, [r2, #0]
 800456c:	1850      	adds	r0, r2, r1
 800456e:	42a0      	cmp	r0, r4
 8004570:	d10b      	bne.n	800458a <_free_r+0x6e>
 8004572:	6820      	ldr	r0, [r4, #0]
 8004574:	1809      	adds	r1, r1, r0
 8004576:	1850      	adds	r0, r2, r1
 8004578:	6011      	str	r1, [r2, #0]
 800457a:	4283      	cmp	r3, r0
 800457c:	d1e0      	bne.n	8004540 <_free_r+0x24>
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	1841      	adds	r1, r0, r1
 8004584:	6011      	str	r1, [r2, #0]
 8004586:	6053      	str	r3, [r2, #4]
 8004588:	e7da      	b.n	8004540 <_free_r+0x24>
 800458a:	42a0      	cmp	r0, r4
 800458c:	d902      	bls.n	8004594 <_free_r+0x78>
 800458e:	230c      	movs	r3, #12
 8004590:	602b      	str	r3, [r5, #0]
 8004592:	e7d5      	b.n	8004540 <_free_r+0x24>
 8004594:	6821      	ldr	r1, [r4, #0]
 8004596:	1860      	adds	r0, r4, r1
 8004598:	4283      	cmp	r3, r0
 800459a:	d103      	bne.n	80045a4 <_free_r+0x88>
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	1841      	adds	r1, r0, r1
 80045a2:	6021      	str	r1, [r4, #0]
 80045a4:	6063      	str	r3, [r4, #4]
 80045a6:	6054      	str	r4, [r2, #4]
 80045a8:	e7ca      	b.n	8004540 <_free_r+0x24>
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	20000364 	.word	0x20000364

080045b0 <sbrk_aligned>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	4e0f      	ldr	r6, [pc, #60]	; (80045f0 <sbrk_aligned+0x40>)
 80045b4:	000d      	movs	r5, r1
 80045b6:	6831      	ldr	r1, [r6, #0]
 80045b8:	0004      	movs	r4, r0
 80045ba:	2900      	cmp	r1, #0
 80045bc:	d102      	bne.n	80045c4 <sbrk_aligned+0x14>
 80045be:	f000 f8bf 	bl	8004740 <_sbrk_r>
 80045c2:	6030      	str	r0, [r6, #0]
 80045c4:	0029      	movs	r1, r5
 80045c6:	0020      	movs	r0, r4
 80045c8:	f000 f8ba 	bl	8004740 <_sbrk_r>
 80045cc:	1c43      	adds	r3, r0, #1
 80045ce:	d00a      	beq.n	80045e6 <sbrk_aligned+0x36>
 80045d0:	2303      	movs	r3, #3
 80045d2:	1cc5      	adds	r5, r0, #3
 80045d4:	439d      	bics	r5, r3
 80045d6:	42a8      	cmp	r0, r5
 80045d8:	d007      	beq.n	80045ea <sbrk_aligned+0x3a>
 80045da:	1a29      	subs	r1, r5, r0
 80045dc:	0020      	movs	r0, r4
 80045de:	f000 f8af 	bl	8004740 <_sbrk_r>
 80045e2:	1c43      	adds	r3, r0, #1
 80045e4:	d101      	bne.n	80045ea <sbrk_aligned+0x3a>
 80045e6:	2501      	movs	r5, #1
 80045e8:	426d      	negs	r5, r5
 80045ea:	0028      	movs	r0, r5
 80045ec:	bd70      	pop	{r4, r5, r6, pc}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	20000368 	.word	0x20000368

080045f4 <_malloc_r>:
 80045f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045f6:	2203      	movs	r2, #3
 80045f8:	1ccb      	adds	r3, r1, #3
 80045fa:	4393      	bics	r3, r2
 80045fc:	3308      	adds	r3, #8
 80045fe:	0006      	movs	r6, r0
 8004600:	001f      	movs	r7, r3
 8004602:	2b0c      	cmp	r3, #12
 8004604:	d232      	bcs.n	800466c <_malloc_r+0x78>
 8004606:	270c      	movs	r7, #12
 8004608:	42b9      	cmp	r1, r7
 800460a:	d831      	bhi.n	8004670 <_malloc_r+0x7c>
 800460c:	0030      	movs	r0, r6
 800460e:	f000 f8a9 	bl	8004764 <__malloc_lock>
 8004612:	4d32      	ldr	r5, [pc, #200]	; (80046dc <_malloc_r+0xe8>)
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	001c      	movs	r4, r3
 8004618:	2c00      	cmp	r4, #0
 800461a:	d12e      	bne.n	800467a <_malloc_r+0x86>
 800461c:	0039      	movs	r1, r7
 800461e:	0030      	movs	r0, r6
 8004620:	f7ff ffc6 	bl	80045b0 <sbrk_aligned>
 8004624:	0004      	movs	r4, r0
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	d11e      	bne.n	8004668 <_malloc_r+0x74>
 800462a:	682c      	ldr	r4, [r5, #0]
 800462c:	0025      	movs	r5, r4
 800462e:	2d00      	cmp	r5, #0
 8004630:	d14a      	bne.n	80046c8 <_malloc_r+0xd4>
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	0029      	movs	r1, r5
 8004636:	18e3      	adds	r3, r4, r3
 8004638:	0030      	movs	r0, r6
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	f000 f880 	bl	8004740 <_sbrk_r>
 8004640:	9b01      	ldr	r3, [sp, #4]
 8004642:	4283      	cmp	r3, r0
 8004644:	d143      	bne.n	80046ce <_malloc_r+0xda>
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	3703      	adds	r7, #3
 800464a:	1aff      	subs	r7, r7, r3
 800464c:	2303      	movs	r3, #3
 800464e:	439f      	bics	r7, r3
 8004650:	3708      	adds	r7, #8
 8004652:	2f0c      	cmp	r7, #12
 8004654:	d200      	bcs.n	8004658 <_malloc_r+0x64>
 8004656:	270c      	movs	r7, #12
 8004658:	0039      	movs	r1, r7
 800465a:	0030      	movs	r0, r6
 800465c:	f7ff ffa8 	bl	80045b0 <sbrk_aligned>
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	d034      	beq.n	80046ce <_malloc_r+0xda>
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	19df      	adds	r7, r3, r7
 8004668:	6027      	str	r7, [r4, #0]
 800466a:	e013      	b.n	8004694 <_malloc_r+0xa0>
 800466c:	2b00      	cmp	r3, #0
 800466e:	dacb      	bge.n	8004608 <_malloc_r+0x14>
 8004670:	230c      	movs	r3, #12
 8004672:	2500      	movs	r5, #0
 8004674:	6033      	str	r3, [r6, #0]
 8004676:	0028      	movs	r0, r5
 8004678:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800467a:	6822      	ldr	r2, [r4, #0]
 800467c:	1bd1      	subs	r1, r2, r7
 800467e:	d420      	bmi.n	80046c2 <_malloc_r+0xce>
 8004680:	290b      	cmp	r1, #11
 8004682:	d917      	bls.n	80046b4 <_malloc_r+0xc0>
 8004684:	19e2      	adds	r2, r4, r7
 8004686:	6027      	str	r7, [r4, #0]
 8004688:	42a3      	cmp	r3, r4
 800468a:	d111      	bne.n	80046b0 <_malloc_r+0xbc>
 800468c:	602a      	str	r2, [r5, #0]
 800468e:	6863      	ldr	r3, [r4, #4]
 8004690:	6011      	str	r1, [r2, #0]
 8004692:	6053      	str	r3, [r2, #4]
 8004694:	0030      	movs	r0, r6
 8004696:	0025      	movs	r5, r4
 8004698:	f000 f86c 	bl	8004774 <__malloc_unlock>
 800469c:	2207      	movs	r2, #7
 800469e:	350b      	adds	r5, #11
 80046a0:	1d23      	adds	r3, r4, #4
 80046a2:	4395      	bics	r5, r2
 80046a4:	1aea      	subs	r2, r5, r3
 80046a6:	429d      	cmp	r5, r3
 80046a8:	d0e5      	beq.n	8004676 <_malloc_r+0x82>
 80046aa:	1b5b      	subs	r3, r3, r5
 80046ac:	50a3      	str	r3, [r4, r2]
 80046ae:	e7e2      	b.n	8004676 <_malloc_r+0x82>
 80046b0:	605a      	str	r2, [r3, #4]
 80046b2:	e7ec      	b.n	800468e <_malloc_r+0x9a>
 80046b4:	6862      	ldr	r2, [r4, #4]
 80046b6:	42a3      	cmp	r3, r4
 80046b8:	d101      	bne.n	80046be <_malloc_r+0xca>
 80046ba:	602a      	str	r2, [r5, #0]
 80046bc:	e7ea      	b.n	8004694 <_malloc_r+0xa0>
 80046be:	605a      	str	r2, [r3, #4]
 80046c0:	e7e8      	b.n	8004694 <_malloc_r+0xa0>
 80046c2:	0023      	movs	r3, r4
 80046c4:	6864      	ldr	r4, [r4, #4]
 80046c6:	e7a7      	b.n	8004618 <_malloc_r+0x24>
 80046c8:	002c      	movs	r4, r5
 80046ca:	686d      	ldr	r5, [r5, #4]
 80046cc:	e7af      	b.n	800462e <_malloc_r+0x3a>
 80046ce:	230c      	movs	r3, #12
 80046d0:	0030      	movs	r0, r6
 80046d2:	6033      	str	r3, [r6, #0]
 80046d4:	f000 f84e 	bl	8004774 <__malloc_unlock>
 80046d8:	e7cd      	b.n	8004676 <_malloc_r+0x82>
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	20000364 	.word	0x20000364

080046e0 <_realloc_r>:
 80046e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046e2:	0007      	movs	r7, r0
 80046e4:	000e      	movs	r6, r1
 80046e6:	0014      	movs	r4, r2
 80046e8:	2900      	cmp	r1, #0
 80046ea:	d105      	bne.n	80046f8 <_realloc_r+0x18>
 80046ec:	0011      	movs	r1, r2
 80046ee:	f7ff ff81 	bl	80045f4 <_malloc_r>
 80046f2:	0005      	movs	r5, r0
 80046f4:	0028      	movs	r0, r5
 80046f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046f8:	2a00      	cmp	r2, #0
 80046fa:	d103      	bne.n	8004704 <_realloc_r+0x24>
 80046fc:	f7ff ff0e 	bl	800451c <_free_r>
 8004700:	0025      	movs	r5, r4
 8004702:	e7f7      	b.n	80046f4 <_realloc_r+0x14>
 8004704:	f000 f83e 	bl	8004784 <_malloc_usable_size_r>
 8004708:	9001      	str	r0, [sp, #4]
 800470a:	4284      	cmp	r4, r0
 800470c:	d803      	bhi.n	8004716 <_realloc_r+0x36>
 800470e:	0035      	movs	r5, r6
 8004710:	0843      	lsrs	r3, r0, #1
 8004712:	42a3      	cmp	r3, r4
 8004714:	d3ee      	bcc.n	80046f4 <_realloc_r+0x14>
 8004716:	0021      	movs	r1, r4
 8004718:	0038      	movs	r0, r7
 800471a:	f7ff ff6b 	bl	80045f4 <_malloc_r>
 800471e:	1e05      	subs	r5, r0, #0
 8004720:	d0e8      	beq.n	80046f4 <_realloc_r+0x14>
 8004722:	9b01      	ldr	r3, [sp, #4]
 8004724:	0022      	movs	r2, r4
 8004726:	429c      	cmp	r4, r3
 8004728:	d900      	bls.n	800472c <_realloc_r+0x4c>
 800472a:	001a      	movs	r2, r3
 800472c:	0031      	movs	r1, r6
 800472e:	0028      	movs	r0, r5
 8004730:	f7ff fed7 	bl	80044e2 <memcpy>
 8004734:	0031      	movs	r1, r6
 8004736:	0038      	movs	r0, r7
 8004738:	f7ff fef0 	bl	800451c <_free_r>
 800473c:	e7da      	b.n	80046f4 <_realloc_r+0x14>
	...

08004740 <_sbrk_r>:
 8004740:	2300      	movs	r3, #0
 8004742:	b570      	push	{r4, r5, r6, lr}
 8004744:	4d06      	ldr	r5, [pc, #24]	; (8004760 <_sbrk_r+0x20>)
 8004746:	0004      	movs	r4, r0
 8004748:	0008      	movs	r0, r1
 800474a:	602b      	str	r3, [r5, #0]
 800474c:	f7fc fc0e 	bl	8000f6c <_sbrk>
 8004750:	1c43      	adds	r3, r0, #1
 8004752:	d103      	bne.n	800475c <_sbrk_r+0x1c>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d000      	beq.n	800475c <_sbrk_r+0x1c>
 800475a:	6023      	str	r3, [r4, #0]
 800475c:	bd70      	pop	{r4, r5, r6, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	2000036c 	.word	0x2000036c

08004764 <__malloc_lock>:
 8004764:	b510      	push	{r4, lr}
 8004766:	4802      	ldr	r0, [pc, #8]	; (8004770 <__malloc_lock+0xc>)
 8004768:	f000 f814 	bl	8004794 <__retarget_lock_acquire_recursive>
 800476c:	bd10      	pop	{r4, pc}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	20000370 	.word	0x20000370

08004774 <__malloc_unlock>:
 8004774:	b510      	push	{r4, lr}
 8004776:	4802      	ldr	r0, [pc, #8]	; (8004780 <__malloc_unlock+0xc>)
 8004778:	f000 f80d 	bl	8004796 <__retarget_lock_release_recursive>
 800477c:	bd10      	pop	{r4, pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	20000370 	.word	0x20000370

08004784 <_malloc_usable_size_r>:
 8004784:	1f0b      	subs	r3, r1, #4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	1f18      	subs	r0, r3, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	da01      	bge.n	8004792 <_malloc_usable_size_r+0xe>
 800478e:	580b      	ldr	r3, [r1, r0]
 8004790:	18c0      	adds	r0, r0, r3
 8004792:	4770      	bx	lr

08004794 <__retarget_lock_acquire_recursive>:
 8004794:	4770      	bx	lr

08004796 <__retarget_lock_release_recursive>:
 8004796:	4770      	bx	lr

08004798 <_init>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr

080047a4 <_fini>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr
