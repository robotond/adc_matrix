
adc_matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037bc  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08003874  08003874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003afc  08003afc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003afc  08003afc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003afc  08003afc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003afc  08003afc  00013afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b00  08003b00  00013b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000000c  08003b10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08003b10  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8e5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002075  00000000  00000000  0002d919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002f990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  00030450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a73  00000000  00000000  00030e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d985  00000000  00000000  000478bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ecc6  00000000  00000000  00055240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3f06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025cc  00000000  00000000  000e3f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800385c 	.word	0x0800385c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	0800385c 	.word	0x0800385c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <calculateCRC16>:
 */

#ifndef CPPLIBS_CRC_H_
#define CPPLIBS_CRC_H_

uint16_t calculateCRC16(uint8_t *buf, uint16_t len){
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	000a      	movs	r2, r1
 80003f6:	1cbb      	adds	r3, r7, #2
 80003f8:	801a      	strh	r2, [r3, #0]
		0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
		0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
		0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
		0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
	};
	uint16_t crc = 0;
 80003fa:	230e      	movs	r3, #14
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	2200      	movs	r2, #0
 8000400:	801a      	strh	r2, [r3, #0]
	while (len--) {
 8000402:	e017      	b.n	8000434 <calculateCRC16+0x48>
		crc = (crc << 8) ^ lookup_table[(crc >> 8) ^ *buf++];
 8000404:	240e      	movs	r4, #14
 8000406:	193b      	adds	r3, r7, r4
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	021b      	lsls	r3, r3, #8
 800040c:	b21a      	sxth	r2, r3
 800040e:	193b      	adds	r3, r7, r4
 8000410:	881b      	ldrh	r3, [r3, #0]
 8000412:	0a1b      	lsrs	r3, r3, #8
 8000414:	b29b      	uxth	r3, r3
 8000416:	0018      	movs	r0, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	1c59      	adds	r1, r3, #1
 800041c:	6079      	str	r1, [r7, #4]
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	0001      	movs	r1, r0
 8000422:	4059      	eors	r1, r3
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <calculateCRC16+0x64>)
 8000426:	0049      	lsls	r1, r1, #1
 8000428:	5acb      	ldrh	r3, [r1, r3]
 800042a:	b21b      	sxth	r3, r3
 800042c:	4053      	eors	r3, r2
 800042e:	b21a      	sxth	r2, r3
 8000430:	193b      	adds	r3, r7, r4
 8000432:	801a      	strh	r2, [r3, #0]
	while (len--) {
 8000434:	1cbb      	adds	r3, r7, #2
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	1cba      	adds	r2, r7, #2
 800043a:	1e59      	subs	r1, r3, #1
 800043c:	8011      	strh	r1, [r2, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d1e0      	bne.n	8000404 <calculateCRC16+0x18>
	}
	return crc;
 8000442:	230e      	movs	r3, #14
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	881b      	ldrh	r3, [r3, #0]
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b005      	add	sp, #20
 800044e:	bd90      	pop	{r4, r7, pc}
 8000450:	08003874 	.word	0x08003874

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000458:	f000 fd7a 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f823 	bl	80004a6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f000 f9ce 	bl	8000800 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000464:	f000 f87a 	bl	800055c <MX_ADC1_Init>
  MX_CRC_Init();
 8000468:	f000 f91a 	bl	80006a0 <MX_CRC_Init>
  MX_USART1_UART_Init();
 800046c:	f000 f93c 	bl	80006e8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000470:	f000 f988 	bl	8000784 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// wait for rising edge
	while (HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin));
 8000474:	46c0      	nop			; (mov r8, r8)
 8000476:	23a0      	movs	r3, #160	; 0xa0
 8000478:	05db      	lsls	r3, r3, #23
 800047a:	2140      	movs	r1, #64	; 0x40
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fd57 	bl	8001f30 <HAL_GPIO_ReadPin>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d1f7      	bne.n	8000476 <main+0x22>

	doMeasurements();
 8000486:	f000 fbb5 	bl	8000bf4 <doMeasurements>

	// fill temperatures buffer
	fillTemp();
 800048a:	f000 fae1 	bl	8000a50 <fillTemp>

	// send
	sendData();
 800048e:	f000 fb33 	bl	8000af8 <sendData>

	// wait for falling edge
	while (!HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin));
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	23a0      	movs	r3, #160	; 0xa0
 8000496:	05db      	lsls	r3, r3, #23
 8000498:	2140      	movs	r1, #64	; 0x40
 800049a:	0018      	movs	r0, r3
 800049c:	f001 fd48 	bl	8001f30 <HAL_GPIO_ReadPin>
 80004a0:	1e03      	subs	r3, r0, #0
 80004a2:	d0f7      	beq.n	8000494 <main+0x40>
	while (HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin));
 80004a4:	e7e6      	b.n	8000474 <main+0x20>

080004a6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a6:	b590      	push	{r4, r7, lr}
 80004a8:	b093      	sub	sp, #76	; 0x4c
 80004aa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ac:	2414      	movs	r4, #20
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	0018      	movs	r0, r3
 80004b2:	2334      	movs	r3, #52	; 0x34
 80004b4:	001a      	movs	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	f003 f9c7 	bl	800384a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	0018      	movs	r0, r3
 80004c0:	2310      	movs	r3, #16
 80004c2:	001a      	movs	r2, r3
 80004c4:	2100      	movs	r1, #0
 80004c6:	f003 f9c0 	bl	800384a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 fd68 	bl	8001fa4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	2202      	movs	r2, #2
 80004d8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	2280      	movs	r2, #128	; 0x80
 80004de:	0052      	lsls	r2, r2, #1
 80004e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004e2:	0021      	movs	r1, r4
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2200      	movs	r2, #0
 80004e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2240      	movs	r2, #64	; 0x40
 80004ee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2202      	movs	r2, #2
 80004f4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2202      	movs	r2, #2
 80004fa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2208      	movs	r2, #8
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV32;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	22f8      	movs	r2, #248	; 0xf8
 800050c:	0392      	lsls	r2, r2, #14
 800050e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	0592      	lsls	r2, r2, #22
 8000516:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000518:	187b      	adds	r3, r7, r1
 800051a:	0018      	movs	r0, r3
 800051c:	f001 fd8e 	bl	800203c <HAL_RCC_OscConfig>
 8000520:	1e03      	subs	r3, r0, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000524:	f000 fb80 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2207      	movs	r2, #7
 800052c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2202      	movs	r2, #2
 8000532:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2200      	movs	r2, #0
 800053e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2102      	movs	r1, #2
 8000544:	0018      	movs	r0, r3
 8000546:	f002 f889 	bl	800265c <HAL_RCC_ClockConfig>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800054e:	f000 fb6b 	bl	8000c28 <Error_Handler>
  }
}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b013      	add	sp, #76	; 0x4c
 8000558:	bd90      	pop	{r4, r7, pc}
	...

0800055c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	0018      	movs	r0, r3
 8000566:	230c      	movs	r3, #12
 8000568:	001a      	movs	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	f003 f96d 	bl	800384a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000570:	4b46      	ldr	r3, [pc, #280]	; (800068c <MX_ADC1_Init+0x130>)
 8000572:	4a47      	ldr	r2, [pc, #284]	; (8000690 <MX_ADC1_Init+0x134>)
 8000574:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000576:	4b45      	ldr	r3, [pc, #276]	; (800068c <MX_ADC1_Init+0x130>)
 8000578:	2280      	movs	r2, #128	; 0x80
 800057a:	0612      	lsls	r2, r2, #24
 800057c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800057e:	4b43      	ldr	r3, [pc, #268]	; (800068c <MX_ADC1_Init+0x130>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000584:	4b41      	ldr	r3, [pc, #260]	; (800068c <MX_ADC1_Init+0x130>)
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800058a:	4b40      	ldr	r3, [pc, #256]	; (800068c <MX_ADC1_Init+0x130>)
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	0392      	lsls	r2, r2, #14
 8000590:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000592:	4b3e      	ldr	r3, [pc, #248]	; (800068c <MX_ADC1_Init+0x130>)
 8000594:	2204      	movs	r2, #4
 8000596:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000598:	4b3c      	ldr	r3, [pc, #240]	; (800068c <MX_ADC1_Init+0x130>)
 800059a:	2200      	movs	r2, #0
 800059c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800059e:	4b3b      	ldr	r3, [pc, #236]	; (800068c <MX_ADC1_Init+0x130>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a4:	4b39      	ldr	r3, [pc, #228]	; (800068c <MX_ADC1_Init+0x130>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 80005aa:	4b38      	ldr	r3, [pc, #224]	; (800068c <MX_ADC1_Init+0x130>)
 80005ac:	2204      	movs	r2, #4
 80005ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80005b0:	4b36      	ldr	r3, [pc, #216]	; (800068c <MX_ADC1_Init+0x130>)
 80005b2:	2220      	movs	r2, #32
 80005b4:	2101      	movs	r1, #1
 80005b6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b8:	4b34      	ldr	r3, [pc, #208]	; (800068c <MX_ADC1_Init+0x130>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005be:	4b33      	ldr	r3, [pc, #204]	; (800068c <MX_ADC1_Init+0x130>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c4:	4b31      	ldr	r3, [pc, #196]	; (800068c <MX_ADC1_Init+0x130>)
 80005c6:	222c      	movs	r2, #44	; 0x2c
 80005c8:	2100      	movs	r1, #0
 80005ca:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005cc:	4b2f      	ldr	r3, [pc, #188]	; (800068c <MX_ADC1_Init+0x130>)
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	0152      	lsls	r2, r2, #5
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80005d4:	4b2d      	ldr	r3, [pc, #180]	; (800068c <MX_ADC1_Init+0x130>)
 80005d6:	2207      	movs	r2, #7
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80005da:	4b2c      	ldr	r3, [pc, #176]	; (800068c <MX_ADC1_Init+0x130>)
 80005dc:	2200      	movs	r2, #0
 80005de:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80005e0:	4b2a      	ldr	r3, [pc, #168]	; (800068c <MX_ADC1_Init+0x130>)
 80005e2:	223c      	movs	r2, #60	; 0x3c
 80005e4:	2100      	movs	r1, #0
 80005e6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <MX_ADC1_Init+0x130>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ee:	4b27      	ldr	r3, [pc, #156]	; (800068c <MX_ADC1_Init+0x130>)
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fe31 	bl	8001258 <HAL_ADC_Init>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 80005fa:	f000 fb15 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2201      	movs	r2, #1
 8000602:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000610:	1d3a      	adds	r2, r7, #4
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_ADC1_Init+0x130>)
 8000614:	0011      	movs	r1, r2
 8000616:	0018      	movs	r0, r3
 8000618:	f000 ffc6 	bl	80015a8 <HAL_ADC_ConfigChannel>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000620:	f000 fb02 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <MX_ADC1_Init+0x138>)
 8000628:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2204      	movs	r2, #4
 800062e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	1d3a      	adds	r2, r7, #4
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_ADC1_Init+0x130>)
 8000634:	0011      	movs	r1, r2
 8000636:	0018      	movs	r0, r3
 8000638:	f000 ffb6 	bl	80015a8 <HAL_ADC_ConfigChannel>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000640:	f000 faf2 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	4a14      	ldr	r2, [pc, #80]	; (8000698 <MX_ADC1_Init+0x13c>)
 8000648:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2208      	movs	r2, #8
 800064e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000650:	1d3a      	adds	r2, r7, #4
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_ADC1_Init+0x130>)
 8000654:	0011      	movs	r1, r2
 8000656:	0018      	movs	r0, r3
 8000658:	f000 ffa6 	bl	80015a8 <HAL_ADC_ConfigChannel>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000660:	f000 fae2 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	4a0d      	ldr	r2, [pc, #52]	; (800069c <MX_ADC1_Init+0x140>)
 8000668:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	220c      	movs	r2, #12
 800066e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000670:	1d3a      	adds	r2, r7, #4
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_ADC1_Init+0x130>)
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 ff96 	bl	80015a8 <HAL_ADC_ConfigChannel>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8000680:	f000 fad2 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b004      	add	sp, #16
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000028 	.word	0x20000028
 8000690:	40012400 	.word	0x40012400
 8000694:	04000002 	.word	0x04000002
 8000698:	08000004 	.word	0x08000004
 800069c:	0c000008 	.word	0x0c000008

080006a0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_CRC_Init+0x40>)
 80006a6:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <MX_CRC_Init+0x44>)
 80006a8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <MX_CRC_Init+0x40>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_CRC_Init+0x40>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_CRC_Init+0x40>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_CRC_Init+0x40>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_CRC_Init+0x40>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <MX_CRC_Init+0x40>)
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 f9f8 	bl	8001ac0 <HAL_CRC_Init>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006d4:	f000 faa8 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	40023000 	.word	0x40023000

080006e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006ec:	4b23      	ldr	r3, [pc, #140]	; (800077c <MX_USART1_UART_Init+0x94>)
 80006ee:	4a24      	ldr	r2, [pc, #144]	; (8000780 <MX_USART1_UART_Init+0x98>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006f2:	4b22      	ldr	r3, [pc, #136]	; (800077c <MX_USART1_UART_Init+0x94>)
 80006f4:	22e1      	movs	r2, #225	; 0xe1
 80006f6:	0252      	lsls	r2, r2, #9
 80006f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_USART1_UART_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_USART1_UART_Init+0x94>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_USART1_UART_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_USART1_UART_Init+0x94>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_USART1_UART_Init+0x94>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_USART1_UART_Init+0x94>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_USART1_UART_Init+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_USART1_UART_Init+0x94>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_USART1_UART_Init+0x94>)
 800072c:	2200      	movs	r2, #0
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_USART1_UART_Init+0x94>)
 8000732:	0018      	movs	r0, r3
 8000734:	f002 fa70 	bl	8002c18 <HAL_UART_Init>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800073c:	f000 fa74 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART1_UART_Init+0x94>)
 8000742:	2100      	movs	r1, #0
 8000744:	0018      	movs	r0, r3
 8000746:	f002 ff73 	bl	8003630 <HAL_UARTEx_SetTxFifoThreshold>
 800074a:	1e03      	subs	r3, r0, #0
 800074c:	d001      	beq.n	8000752 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800074e:	f000 fa6b 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_USART1_UART_Init+0x94>)
 8000754:	2100      	movs	r1, #0
 8000756:	0018      	movs	r0, r3
 8000758:	f002 ffaa 	bl	80036b0 <HAL_UARTEx_SetRxFifoThreshold>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000760:	f000 fa62 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <MX_USART1_UART_Init+0x94>)
 8000766:	0018      	movs	r0, r3
 8000768:	f002 ff28 	bl	80035bc <HAL_UARTEx_DisableFifoMode>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000770:	f000 fa5a 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	200000b0 	.word	0x200000b0
 8000780:	40013800 	.word	0x40013800

08000784 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_USART3_UART_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <MX_USART3_UART_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_USART3_UART_Init+0x74>)
 8000790:	22e1      	movs	r2, #225	; 0xe1
 8000792:	0252      	lsls	r2, r2, #9
 8000794:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_USART3_UART_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_USART3_UART_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_USART3_UART_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_USART3_UART_Init+0x74>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_USART3_UART_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_USART3_UART_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_USART3_UART_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c0:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_USART3_UART_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART3_UART_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80007cc:	480a      	ldr	r0, [pc, #40]	; (80007f8 <MX_USART3_UART_Init+0x74>)
 80007ce:	2300      	movs	r3, #0
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	f002 fe80 	bl	80034d8 <HAL_RS485Ex_Init>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 80007dc:	f000 fa24 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <MX_USART3_UART_Init+0x74>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <MX_USART3_UART_Init+0x74>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2120      	movs	r1, #32
 80007ec:	430a      	orrs	r2, r1
 80007ee:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART3_Init 2 */

}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	20000144 	.word	0x20000144
 80007fc:	40004800 	.word	0x40004800

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b08b      	sub	sp, #44	; 0x2c
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	2414      	movs	r4, #20
 8000808:	193b      	adds	r3, r7, r4
 800080a:	0018      	movs	r0, r3
 800080c:	2314      	movs	r3, #20
 800080e:	001a      	movs	r2, r3
 8000810:	2100      	movs	r1, #0
 8000812:	f003 f81a 	bl	800384a <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b5a      	ldr	r3, [pc, #360]	; (8000980 <MX_GPIO_Init+0x180>)
 8000818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081a:	4b59      	ldr	r3, [pc, #356]	; (8000980 <MX_GPIO_Init+0x180>)
 800081c:	2104      	movs	r1, #4
 800081e:	430a      	orrs	r2, r1
 8000820:	635a      	str	r2, [r3, #52]	; 0x34
 8000822:	4b57      	ldr	r3, [pc, #348]	; (8000980 <MX_GPIO_Init+0x180>)
 8000824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000826:	2204      	movs	r2, #4
 8000828:	4013      	ands	r3, r2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b54      	ldr	r3, [pc, #336]	; (8000980 <MX_GPIO_Init+0x180>)
 8000830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000832:	4b53      	ldr	r3, [pc, #332]	; (8000980 <MX_GPIO_Init+0x180>)
 8000834:	2101      	movs	r1, #1
 8000836:	430a      	orrs	r2, r1
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
 800083a:	4b51      	ldr	r3, [pc, #324]	; (8000980 <MX_GPIO_Init+0x180>)
 800083c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800083e:	2201      	movs	r2, #1
 8000840:	4013      	ands	r3, r2
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b4e      	ldr	r3, [pc, #312]	; (8000980 <MX_GPIO_Init+0x180>)
 8000848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800084a:	4b4d      	ldr	r3, [pc, #308]	; (8000980 <MX_GPIO_Init+0x180>)
 800084c:	2102      	movs	r1, #2
 800084e:	430a      	orrs	r2, r1
 8000850:	635a      	str	r2, [r3, #52]	; 0x34
 8000852:	4b4b      	ldr	r3, [pc, #300]	; (8000980 <MX_GPIO_Init+0x180>)
 8000854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000856:	2202      	movs	r2, #2
 8000858:	4013      	ands	r3, r2
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	4b48      	ldr	r3, [pc, #288]	; (8000980 <MX_GPIO_Init+0x180>)
 8000860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000862:	4b47      	ldr	r3, [pc, #284]	; (8000980 <MX_GPIO_Init+0x180>)
 8000864:	2108      	movs	r1, #8
 8000866:	430a      	orrs	r2, r1
 8000868:	635a      	str	r2, [r3, #52]	; 0x34
 800086a:	4b45      	ldr	r3, [pc, #276]	; (8000980 <MX_GPIO_Init+0x180>)
 800086c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800086e:	2208      	movs	r2, #8
 8000870:	4013      	ands	r3, r2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_Pin|GREEN_Pin|RED_Pin|PC7_Pin
 8000876:	4943      	ldr	r1, [pc, #268]	; (8000984 <MX_GPIO_Init+0x184>)
 8000878:	4b43      	ldr	r3, [pc, #268]	; (8000988 <MX_GPIO_Init+0x188>)
 800087a:	2200      	movs	r2, #0
 800087c:	0018      	movs	r0, r3
 800087e:	f001 fb74 	bl	8001f6a <HAL_GPIO_WritePin>
                          |PC7C7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, GPIO_PIN_SET);
 8000882:	23a0      	movs	r3, #160	; 0xa0
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	2201      	movs	r2, #1
 8000888:	2180      	movs	r1, #128	; 0x80
 800088a:	0018      	movs	r0, r3
 800088c:	f001 fb6d 	bl	8001f6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin, GPIO_PIN_SET);
 8000890:	493e      	ldr	r1, [pc, #248]	; (800098c <MX_GPIO_Init+0x18c>)
 8000892:	4b3f      	ldr	r3, [pc, #252]	; (8000990 <MX_GPIO_Init+0x190>)
 8000894:	2201      	movs	r2, #1
 8000896:	0018      	movs	r0, r3
 8000898:	f001 fb67 	bl	8001f6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB12_Pin|PB13_Pin|PB15_Pin|PB3_Pin
 800089c:	493d      	ldr	r1, [pc, #244]	; (8000994 <MX_GPIO_Init+0x194>)
 800089e:	4b3c      	ldr	r3, [pc, #240]	; (8000990 <MX_GPIO_Init+0x190>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	0018      	movs	r0, r3
 80008a4:	f001 fb61 	bl	8001f6a <HAL_GPIO_WritePin>
                          |PB4_Pin|COL4_Pin|COL3_Pin|COL2_Pin
                          |COL1_Pin|COL0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA8_Pin|PA11_Pin|PA12_Pin|PA15_Pin, GPIO_PIN_RESET);
 80008a8:	2399      	movs	r3, #153	; 0x99
 80008aa:	0219      	lsls	r1, r3, #8
 80008ac:	23a0      	movs	r3, #160	; 0xa0
 80008ae:	05db      	lsls	r3, r3, #23
 80008b0:	2200      	movs	r2, #0
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 fb59 	bl	8001f6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD0_Pin|PD1_Pin|PD2_Pin|PD3_Pin, GPIO_PIN_RESET);
 80008b8:	4b37      	ldr	r3, [pc, #220]	; (8000998 <MX_GPIO_Init+0x198>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	210f      	movs	r1, #15
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 fb53 	bl	8001f6a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLUE_Pin GREEN_Pin RED_Pin PC7_Pin
                           PC7C7_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin|GREEN_Pin|RED_Pin|PC7_Pin
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	4a2f      	ldr	r2, [pc, #188]	; (8000984 <MX_GPIO_Init+0x184>)
 80008c8:	601a      	str	r2, [r3, #0]
                          |PC7C7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	2201      	movs	r2, #1
 80008ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	4a2a      	ldr	r2, [pc, #168]	; (8000988 <MX_GPIO_Init+0x188>)
 80008e0:	0019      	movs	r1, r3
 80008e2:	0010      	movs	r0, r2
 80008e4:	f001 f9c0 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_Pin */
  GPIO_InitStruct.Pin = START_Pin;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2240      	movs	r2, #64	; 0x40
 80008ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 80008fa:	193a      	adds	r2, r7, r4
 80008fc:	23a0      	movs	r3, #160	; 0xa0
 80008fe:	05db      	lsls	r3, r3, #23
 8000900:	0011      	movs	r1, r2
 8000902:	0018      	movs	r0, r3
 8000904:	f001 f9b0 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : R0_Pin PA8_Pin PA11_Pin PA12_Pin
                           PA15_Pin */
  GPIO_InitStruct.Pin = R0_Pin|PA8_Pin|PA11_Pin|PA12_Pin
 8000908:	193b      	adds	r3, r7, r4
 800090a:	4a24      	ldr	r2, [pc, #144]	; (800099c <MX_GPIO_Init+0x19c>)
 800090c:	601a      	str	r2, [r3, #0]
                          |PA15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2201      	movs	r2, #1
 8000912:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	193a      	adds	r2, r7, r4
 8000922:	23a0      	movs	r3, #160	; 0xa0
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	0011      	movs	r1, r2
 8000928:	0018      	movs	r0, r3
 800092a:	f001 f99d 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin
                           PB12_Pin PB13_Pin PB15_Pin PB3_Pin
                           PB4_Pin COL4_Pin COL3_Pin COL2_Pin
                           COL1_Pin COL0_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin
 800092e:	193b      	adds	r3, r7, r4
 8000930:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <MX_GPIO_Init+0x1a0>)
 8000932:	601a      	str	r2, [r3, #0]
                          |PB12_Pin|PB13_Pin|PB15_Pin|PB3_Pin
                          |PB4_Pin|COL4_Pin|COL3_Pin|COL2_Pin
                          |COL1_Pin|COL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2201      	movs	r2, #1
 8000938:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	193b      	adds	r3, r7, r4
 8000948:	4a11      	ldr	r2, [pc, #68]	; (8000990 <MX_GPIO_Init+0x190>)
 800094a:	0019      	movs	r1, r3
 800094c:	0010      	movs	r0, r2
 800094e:	f001 f98b 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0_Pin PD1_Pin PD2_Pin PD3_Pin */
  GPIO_InitStruct.Pin = PD0_Pin|PD1_Pin|PD2_Pin|PD3_Pin;
 8000952:	0021      	movs	r1, r4
 8000954:	187b      	adds	r3, r7, r1
 8000956:	220f      	movs	r2, #15
 8000958:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2201      	movs	r2, #1
 800095e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096c:	187b      	adds	r3, r7, r1
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <MX_GPIO_Init+0x198>)
 8000970:	0019      	movs	r1, r3
 8000972:	0010      	movs	r0, r2
 8000974:	f001 f978 	bl	8001c68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b00b      	add	sp, #44	; 0x2c
 800097e:	bd90      	pop	{r4, r7, pc}
 8000980:	40021000 	.word	0x40021000
 8000984:	0000e0c0 	.word	0x0000e0c0
 8000988:	50000800 	.word	0x50000800
 800098c:	00000407 	.word	0x00000407
 8000990:	50000400 	.word	0x50000400
 8000994:	0000b3f8 	.word	0x0000b3f8
 8000998:	50000c00 	.word	0x50000c00
 800099c:	00009980 	.word	0x00009980
 80009a0:	0000b7ff 	.word	0x0000b7ff

080009a4 <min>:
 * own function definitions
 *
 *
 */

int16_t min(int16_t a, int16_t b){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	0002      	movs	r2, r0
 80009ac:	1dbb      	adds	r3, r7, #6
 80009ae:	801a      	strh	r2, [r3, #0]
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	1c0a      	adds	r2, r1, #0
 80009b4:	801a      	strh	r2, [r3, #0]
	if (a > b) return b;
 80009b6:	1dba      	adds	r2, r7, #6
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2100      	movs	r1, #0
 80009bc:	5e52      	ldrsh	r2, [r2, r1]
 80009be:	2100      	movs	r1, #0
 80009c0:	5e5b      	ldrsh	r3, [r3, r1]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	dd03      	ble.n	80009ce <min+0x2a>
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	5e9b      	ldrsh	r3, [r3, r2]
 80009cc:	e002      	b.n	80009d4 <min+0x30>
	return a;
 80009ce:	1dbb      	adds	r3, r7, #6
 80009d0:	2200      	movs	r2, #0
 80009d2:	5e9b      	ldrsh	r3, [r3, r2]
}
 80009d4:	0018      	movs	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b002      	add	sp, #8
 80009da:	bd80      	pop	{r7, pc}

080009dc <max>:

int16_t max(int16_t a, int16_t b){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	0002      	movs	r2, r0
 80009e4:	1dbb      	adds	r3, r7, #6
 80009e6:	801a      	strh	r2, [r3, #0]
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	1c0a      	adds	r2, r1, #0
 80009ec:	801a      	strh	r2, [r3, #0]
	if (a > b) return a;
 80009ee:	1dba      	adds	r2, r7, #6
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2100      	movs	r1, #0
 80009f4:	5e52      	ldrsh	r2, [r2, r1]
 80009f6:	2100      	movs	r1, #0
 80009f8:	5e5b      	ldrsh	r3, [r3, r1]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	dd03      	ble.n	8000a06 <max+0x2a>
 80009fe:	1dbb      	adds	r3, r7, #6
 8000a00:	2200      	movs	r2, #0
 8000a02:	5e9b      	ldrsh	r3, [r3, r2]
 8000a04:	e002      	b.n	8000a0c <max+0x30>
	return b;
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	5e9b      	ldrsh	r3, [r3, r2]
}
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b002      	add	sp, #8
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <prepareTemp>:

void prepareTemp(int16_t measured, uint8_t* pPrepared){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	0002      	movs	r2, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	1dbb      	adds	r3, r7, #6
 8000a20:	801a      	strh	r2, [r3, #0]
	*pPrepared = min(max((measured + TEMP_OFFSET), 1), 254);
 8000a22:	1dbb      	adds	r3, r7, #6
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	331f      	adds	r3, #31
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	b21b      	sxth	r3, r3
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff ffd4 	bl	80009dc <max>
 8000a34:	0003      	movs	r3, r0
 8000a36:	21fe      	movs	r1, #254	; 0xfe
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff ffb3 	bl	80009a4 <min>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	701a      	strb	r2, [r3, #0]
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b002      	add	sp, #8
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <fillTemp>:

void fillTemp(){
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b087      	sub	sp, #28
 8000a54:	af00      	add	r7, sp, #0
	int mltp = (NUM_RAW_DATA / NUM_TEMPERATURES);
 8000a56:	2302      	movs	r3, #2
 8000a58:	60bb      	str	r3, [r7, #8]
	int base = NUM_RAW_DATA / mltp;
 8000a5a:	68b9      	ldr	r1, [r7, #8]
 8000a5c:	2010      	movs	r0, #16
 8000a5e:	f7ff fbd9 	bl	8000214 <__divsi3>
 8000a62:	0003      	movs	r3, r0
 8000a64:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < base; i++){
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	e037      	b.n	8000adc <fillTemp+0x8c>
		int16_t value = 0;
 8000a6c:	2312      	movs	r3, #18
 8000a6e:	18fb      	adds	r3, r7, r3
 8000a70:	2200      	movs	r2, #0
 8000a72:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < mltp; j++){
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	e012      	b.n	8000aa0 <fillTemp+0x50>
			value += temps_measured[i * mltp + j];
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	68ba      	ldr	r2, [r7, #8]
 8000a7e:	435a      	muls	r2, r3
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	18d2      	adds	r2, r2, r3
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <fillTemp+0xa0>)
 8000a86:	0052      	lsls	r2, r2, #1
 8000a88:	5ed3      	ldrsh	r3, [r2, r3]
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	2112      	movs	r1, #18
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	18d3      	adds	r3, r2, r3
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < mltp; j++){
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	dbe8      	blt.n	8000a7a <fillTemp+0x2a>
		}
		value /= mltp;
 8000aa8:	2412      	movs	r4, #18
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	2200      	movs	r2, #0
 8000aae:	5e9b      	ldrsh	r3, [r3, r2]
 8000ab0:	68b9      	ldr	r1, [r7, #8]
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f7ff fbae 	bl	8000214 <__divsi3>
 8000ab8:	0003      	movs	r3, r0
 8000aba:	001a      	movs	r2, r3
 8000abc:	0021      	movs	r1, r4
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	801a      	strh	r2, [r3, #0]
		prepareTemp(value, &temps_to_send[i]);
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <fillTemp+0xa4>)
 8000ac6:	18d2      	adds	r2, r2, r3
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2100      	movs	r1, #0
 8000acc:	5e5b      	ldrsh	r3, [r3, r1]
 8000ace:	0011      	movs	r1, r2
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff ff9f 	bl	8000a14 <prepareTemp>
	for (int i = 0; i < base; i++){
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	dbc3      	blt.n	8000a6c <fillTemp+0x1c>
	}
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b007      	add	sp, #28
 8000aec:	bd90      	pop	{r4, r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	200001d8 	.word	0x200001d8
 8000af4:	200001f8 	.word	0x200001f8

08000af8 <sendData>:

void sendData(){
 8000af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afa:	46ce      	mov	lr, r9
 8000afc:	4647      	mov	r7, r8
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b089      	sub	sp, #36	; 0x24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	466e      	mov	r6, sp
 8000b06:	46b0      	mov	r8, r6
	uint8_t packet_len = NUM_TEMPERATURES + 2;
 8000b08:	260f      	movs	r6, #15
 8000b0a:	0032      	movs	r2, r6
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	18f3      	adds	r3, r6, r3
 8000b10:	19de      	adds	r6, r3, r7
 8000b12:	230a      	movs	r3, #10
 8000b14:	469c      	mov	ip, r3
 8000b16:	4663      	mov	r3, ip
 8000b18:	7033      	strb	r3, [r6, #0]
	uint8_t packet[packet_len];
 8000b1a:	0016      	movs	r6, r2
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	18f3      	adds	r3, r6, r3
 8000b20:	19de      	adds	r6, r3, r7
 8000b22:	7836      	ldrb	r6, [r6, #0]
 8000b24:	46b4      	mov	ip, r6
 8000b26:	2301      	movs	r3, #1
 8000b28:	425b      	negs	r3, r3
 8000b2a:	4699      	mov	r9, r3
 8000b2c:	44cc      	add	ip, r9
 8000b2e:	4663      	mov	r3, ip
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	60be      	str	r6, [r7, #8]
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	0f5b      	lsrs	r3, r3, #29
 8000b3c:	469c      	mov	ip, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	00d9      	lsls	r1, r3, #3
 8000b42:	4663      	mov	r3, ip
 8000b44:	4319      	orrs	r1, r3
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	00d8      	lsls	r0, r3, #3
 8000b4a:	0034      	movs	r4, r6
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	000d      	movs	r5, r1
 8000b50:	0f61      	lsrs	r1, r4, #29
 8000b52:	00eb      	lsls	r3, r5, #3
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	430b      	orrs	r3, r1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	00e3      	lsls	r3, r4, #3
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	0033      	movs	r3, r6
 8000b62:	3307      	adds	r3, #7
 8000b64:	08db      	lsrs	r3, r3, #3
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	466a      	mov	r2, sp
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	469d      	mov	sp, r3
 8000b6e:	466b      	mov	r3, sp
 8000b70:	3300      	adds	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
	memcpy(packet, temps_to_send, NUM_TEMPERATURES);
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <sendData+0xf4>)
 8000b78:	0010      	movs	r0, r2
 8000b7a:	0019      	movs	r1, r3
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	001a      	movs	r2, r3
 8000b80:	f002 fe5a 	bl	8003838 <memcpy>
	uint16_t crc = calculateCRC16(temps_to_send, NUM_TEMPERATURES);
 8000b84:	2312      	movs	r3, #18
 8000b86:	18fc      	adds	r4, r7, r3
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <sendData+0xf4>)
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f7ff fc2d 	bl	80003ec <calculateCRC16>
 8000b92:	0003      	movs	r3, r0
 8000b94:	8023      	strh	r3, [r4, #0]
	packet[packet_len - 2] = crc >> 8;
 8000b96:	2312      	movs	r3, #18
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	200f      	movs	r0, #15
 8000ba2:	2310      	movs	r3, #16
 8000ba4:	18c3      	adds	r3, r0, r3
 8000ba6:	19db      	adds	r3, r3, r7
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	3b02      	subs	r3, #2
 8000bac:	b2d1      	uxtb	r1, r2
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	54d1      	strb	r1, [r2, r3]
	packet[packet_len - 1] = crc & 0xFF;
 8000bb2:	2310      	movs	r3, #16
 8000bb4:	18c3      	adds	r3, r0, r3
 8000bb6:	19db      	adds	r3, r3, r7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	2212      	movs	r2, #18
 8000bbe:	18ba      	adds	r2, r7, r2
 8000bc0:	8812      	ldrh	r2, [r2, #0]
 8000bc2:	b2d1      	uxtb	r1, r2
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit (&huart3, packet, packet_len, 10);
 8000bc8:	2310      	movs	r3, #16
 8000bca:	18c3      	adds	r3, r0, r3
 8000bcc:	19db      	adds	r3, r3, r7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	6979      	ldr	r1, [r7, #20]
 8000bd4:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <sendData+0xf8>)
 8000bd6:	230a      	movs	r3, #10
 8000bd8:	f002 f874 	bl	8002cc4 <HAL_UART_Transmit>
 8000bdc:	46c5      	mov	sp, r8
}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b009      	add	sp, #36	; 0x24
 8000be4:	bcc0      	pop	{r6, r7}
 8000be6:	46b9      	mov	r9, r7
 8000be8:	46b0      	mov	r8, r6
 8000bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bec:	200001f8 	.word	0x200001f8
 8000bf0:	20000144 	.word	0x20000144

08000bf4 <doMeasurements>:

void doMeasurements(){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
	//read_smooth();
	//HAL_ADC_Stop(&hadc1);

	// the goal is to fill temps_measured array with smoothed 16bit signeed temperature data
	// for testing purposes
	for (int i = 0; i < NUM_RAW_DATA; i++){
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	e008      	b.n	8000c12 <doMeasurements+0x1e>
		temps_measured[i] = i;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	b219      	sxth	r1, r3
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <doMeasurements+0x30>)
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	0052      	lsls	r2, r2, #1
 8000c0a:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < NUM_RAW_DATA; i++){
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	ddf3      	ble.n	8000c00 <doMeasurements+0xc>
	}
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b002      	add	sp, #8
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	200001d8 	.word	0x200001d8

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>
	...

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_MspInit+0x44>)
 8000c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_MspInit+0x44>)
 8000c40:	2101      	movs	r1, #1
 8000c42:	430a      	orrs	r2, r1
 8000c44:	641a      	str	r2, [r3, #64]	; 0x40
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_MspInit+0x44>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_MspInit+0x44>)
 8000c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_MspInit+0x44>)
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	0549      	lsls	r1, r1, #21
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_MspInit+0x44>)
 8000c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	055b      	lsls	r3, r3, #21
 8000c68:	4013      	ands	r3, r2
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b08b      	sub	sp, #44	; 0x2c
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	2414      	movs	r4, #20
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	0018      	movs	r0, r3
 8000c8a:	2314      	movs	r3, #20
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	f002 fddb 	bl	800384a <memset>
  if(hadc->Instance==ADC1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <HAL_ADC_MspInit+0x80>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d129      	bne.n	8000cf2 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_ADC_MspInit+0x84>)
 8000ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_ADC_MspInit+0x84>)
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	0349      	lsls	r1, r1, #13
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	641a      	str	r2, [r3, #64]	; 0x40
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_ADC_MspInit+0x84>)
 8000cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	035b      	lsls	r3, r3, #13
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_ADC_MspInit+0x84>)
 8000cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_ADC_MspInit+0x84>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_ADC_MspInit+0x84>)
 8000cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	221f      	movs	r2, #31
 8000cd6:	601a      	str	r2, [r3, #0]
                          |S4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	2203      	movs	r2, #3
 8000cdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	193a      	adds	r2, r7, r4
 8000ce6:	23a0      	movs	r3, #160	; 0xa0
 8000ce8:	05db      	lsls	r3, r3, #23
 8000cea:	0011      	movs	r1, r2
 8000cec:	0018      	movs	r0, r3
 8000cee:	f000 ffbb 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b00b      	add	sp, #44	; 0x2c
 8000cf8:	bd90      	pop	{r4, r7, pc}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	40012400 	.word	0x40012400
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_CRC_MspInit+0x38>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d10d      	bne.n	8000d32 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_CRC_MspInit+0x3c>)
 8000d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_CRC_MspInit+0x3c>)
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	0149      	lsls	r1, r1, #5
 8000d20:	430a      	orrs	r2, r1
 8000d22:	639a      	str	r2, [r3, #56]	; 0x38
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_CRC_MspInit+0x3c>)
 8000d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	015b      	lsls	r3, r3, #5
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b004      	add	sp, #16
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	40023000 	.word	0x40023000
 8000d40:	40021000 	.word	0x40021000

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b095      	sub	sp, #84	; 0x54
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	233c      	movs	r3, #60	; 0x3c
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	0018      	movs	r0, r3
 8000d52:	2314      	movs	r3, #20
 8000d54:	001a      	movs	r2, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	f002 fd77 	bl	800384a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d5c:	2420      	movs	r4, #32
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	0018      	movs	r0, r3
 8000d62:	231c      	movs	r3, #28
 8000d64:	001a      	movs	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	f002 fd6f 	bl	800384a <memset>
  if(huart->Instance==USART1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a50      	ldr	r2, [pc, #320]	; (8000eb4 <HAL_UART_MspInit+0x170>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d140      	bne.n	8000df8 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	2201      	movs	r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	0018      	movs	r0, r3
 8000d86:	f001 fe13 	bl	80029b0 <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	1e03      	subs	r3, r0, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d8e:	f7ff ff4b 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d92:	4b49      	ldr	r3, [pc, #292]	; (8000eb8 <HAL_UART_MspInit+0x174>)
 8000d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d96:	4b48      	ldr	r3, [pc, #288]	; (8000eb8 <HAL_UART_MspInit+0x174>)
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	01c9      	lsls	r1, r1, #7
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000da0:	4b45      	ldr	r3, [pc, #276]	; (8000eb8 <HAL_UART_MspInit+0x174>)
 8000da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	01db      	lsls	r3, r3, #7
 8000da8:	4013      	ands	r3, r2
 8000daa:	61fb      	str	r3, [r7, #28]
 8000dac:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <HAL_UART_MspInit+0x174>)
 8000db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000db2:	4b41      	ldr	r3, [pc, #260]	; (8000eb8 <HAL_UART_MspInit+0x174>)
 8000db4:	2101      	movs	r1, #1
 8000db6:	430a      	orrs	r2, r1
 8000db8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dba:	4b3f      	ldr	r3, [pc, #252]	; (8000eb8 <HAL_UART_MspInit+0x174>)
 8000dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dc6:	213c      	movs	r1, #60	; 0x3c
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	22c0      	movs	r2, #192	; 0xc0
 8000dcc:	00d2      	lsls	r2, r2, #3
 8000dce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2201      	movs	r2, #1
 8000de6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	187a      	adds	r2, r7, r1
 8000dea:	23a0      	movs	r3, #160	; 0xa0
 8000dec:	05db      	lsls	r3, r3, #23
 8000dee:	0011      	movs	r1, r2
 8000df0:	0018      	movs	r0, r3
 8000df2:	f000 ff39 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000df6:	e058      	b.n	8000eaa <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART3)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a2f      	ldr	r2, [pc, #188]	; (8000ebc <HAL_UART_MspInit+0x178>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d153      	bne.n	8000eaa <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e02:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <HAL_UART_MspInit+0x174>)
 8000e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e06:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <HAL_UART_MspInit+0x174>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	02c9      	lsls	r1, r1, #11
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <HAL_UART_MspInit+0x174>)
 8000e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	02db      	lsls	r3, r3, #11
 8000e18:	4013      	ands	r3, r2
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <HAL_UART_MspInit+0x174>)
 8000e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e22:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <HAL_UART_MspInit+0x174>)
 8000e24:	2101      	movs	r1, #1
 8000e26:	430a      	orrs	r2, r1
 8000e28:	635a      	str	r2, [r3, #52]	; 0x34
 8000e2a:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <HAL_UART_MspInit+0x174>)
 8000e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <HAL_UART_MspInit+0x174>)
 8000e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <HAL_UART_MspInit+0x174>)
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <HAL_UART_MspInit+0x174>)
 8000e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e46:	2202      	movs	r2, #2
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U3TX_Pin;
 8000e4e:	243c      	movs	r4, #60	; 0x3c
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	2220      	movs	r2, #32
 8000e54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	2202      	movs	r2, #2
 8000e5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(U3TX_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	193a      	adds	r2, r7, r4
 8000e70:	23a0      	movs	r3, #160	; 0xa0
 8000e72:	05db      	lsls	r3, r3, #23
 8000e74:	0011      	movs	r1, r2
 8000e76:	0018      	movs	r0, r3
 8000e78:	f000 fef6 	bl	8001c68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = U3RX_Pin|U3DE_Pin;
 8000e7c:	0021      	movs	r1, r4
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2290      	movs	r2, #144	; 0x90
 8000e82:	01d2      	lsls	r2, r2, #7
 8000e84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2202      	movs	r2, #2
 8000e8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_UART_MspInit+0x17c>)
 8000ea2:	0019      	movs	r1, r3
 8000ea4:	0010      	movs	r0, r2
 8000ea6:	f000 fedf 	bl	8001c68 <HAL_GPIO_Init>
}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b015      	add	sp, #84	; 0x54
 8000eb0:	bd90      	pop	{r4, r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	40013800 	.word	0x40013800
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40004800 	.word	0x40004800
 8000ec0:	50000400 	.word	0x50000400

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee8:	f000 f89c 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000efc:	480d      	ldr	r0, [pc, #52]	; (8000f34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000efe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f00:	f7ff fff7 	bl	8000ef2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f06:	490d      	ldr	r1, [pc, #52]	; (8000f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <LoopForever+0xe>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	; (8000f48 <LoopForever+0x16>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f2a:	f002 fc61 	bl	80037f0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f2e:	f7ff fa91 	bl	8000454 <main>

08000f32 <LoopForever>:

LoopForever:
  b LoopForever
 8000f32:	e7fe      	b.n	8000f32 <LoopForever>
  ldr   r0, =_estack
 8000f34:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f40:	08003b04 	.word	0x08003b04
  ldr r2, =_sbss
 8000f44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f48:	20000204 	.word	0x20000204

08000f4c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC1_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_Init+0x3c>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_Init+0x3c>)
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	0049      	lsls	r1, r1, #1
 8000f66:	430a      	orrs	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 f810 	bl	8000f90 <HAL_InitTick>
 8000f70:	1e03      	subs	r3, r0, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f74:	1dfb      	adds	r3, r7, #7
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	e001      	b.n	8000f80 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f7ff fe5a 	bl	8000c34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f80:	1dfb      	adds	r3, r7, #7
 8000f82:	781b      	ldrb	r3, [r3, #0]
}
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40022000 	.word	0x40022000

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f98:	230f      	movs	r3, #15
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_InitTick+0x88>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d02b      	beq.n	8001000 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	; (800101c <HAL_InitTick+0x8c>)
 8000faa:	681c      	ldr	r4, [r3, #0]
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <HAL_InitTick+0x88>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	23fa      	movs	r3, #250	; 0xfa
 8000fb4:	0098      	lsls	r0, r3, #2
 8000fb6:	f7ff f8a3 	bl	8000100 <__udivsi3>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	0020      	movs	r0, r4
 8000fc0:	f7ff f89e 	bl	8000100 <__udivsi3>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f000 fd6d 	bl	8001aa6 <HAL_SYSTICK_Config>
 8000fcc:	1e03      	subs	r3, r0, #0
 8000fce:	d112      	bne.n	8000ff6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d80a      	bhi.n	8000fec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	425b      	negs	r3, r3
 8000fdc:	2200      	movs	r2, #0
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f000 fd4c 	bl	8001a7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_InitTick+0x90>)
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	e00d      	b.n	8001008 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e008      	b.n	8001008 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
 8000ffe:	e003      	b.n	8001008 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001000:	230f      	movs	r3, #15
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001008:	230f      	movs	r3, #15
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	781b      	ldrb	r3, [r3, #0]
}
 800100e:	0018      	movs	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	b005      	add	sp, #20
 8001014:	bd90      	pop	{r4, r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	20000008 	.word	0x20000008
 800101c:	20000000 	.word	0x20000000
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_IncTick+0x1c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	001a      	movs	r2, r3
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_IncTick+0x20>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	18d2      	adds	r2, r2, r3
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_IncTick+0x20>)
 8001036:	601a      	str	r2, [r3, #0]
}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	20000008 	.word	0x20000008
 8001044:	20000200 	.word	0x20000200

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b02      	ldr	r3, [pc, #8]	; (8001058 <HAL_GetTick+0x10>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	0018      	movs	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	20000200 	.word	0x20000200

0800105c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800106c:	401a      	ands	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	431a      	orrs	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	601a      	str	r2, [r3, #0]
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b002      	add	sp, #8
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	fe3fffff 	.word	0xfe3fffff

08001084 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	23e0      	movs	r3, #224	; 0xe0
 8001092:	045b      	lsls	r3, r3, #17
 8001094:	4013      	ands	r3, r2
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}

0800109e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	2104      	movs	r1, #4
 80010b2:	400a      	ands	r2, r1
 80010b4:	2107      	movs	r1, #7
 80010b6:	4091      	lsls	r1, r2
 80010b8:	000a      	movs	r2, r1
 80010ba:	43d2      	mvns	r2, r2
 80010bc:	401a      	ands	r2, r3
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	2104      	movs	r1, #4
 80010c2:	400b      	ands	r3, r1
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	4099      	lsls	r1, r3
 80010c8:	000b      	movs	r3, r1
 80010ca:	431a      	orrs	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b004      	add	sp, #16
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	2104      	movs	r1, #4
 80010ea:	400a      	ands	r2, r1
 80010ec:	2107      	movs	r1, #7
 80010ee:	4091      	lsls	r1, r2
 80010f0:	000a      	movs	r2, r1
 80010f2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2104      	movs	r1, #4
 80010f8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80010fa:	40da      	lsrs	r2, r3
 80010fc:	0013      	movs	r3, r2
}
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}

08001106 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	211f      	movs	r1, #31
 800111a:	400a      	ands	r2, r1
 800111c:	210f      	movs	r1, #15
 800111e:	4091      	lsls	r1, r2
 8001120:	000a      	movs	r2, r1
 8001122:	43d2      	mvns	r2, r2
 8001124:	401a      	ands	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	0e9b      	lsrs	r3, r3, #26
 800112a:	210f      	movs	r1, #15
 800112c:	4019      	ands	r1, r3
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	201f      	movs	r0, #31
 8001132:	4003      	ands	r3, r0
 8001134:	4099      	lsls	r1, r3
 8001136:	000b      	movs	r3, r1
 8001138:	431a      	orrs	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b004      	add	sp, #16
 8001144:	bd80      	pop	{r7, pc}

08001146 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	035b      	lsls	r3, r3, #13
 8001158:	0b5b      	lsrs	r3, r3, #13
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b002      	add	sp, #8
 8001166:	bd80      	pop	{r7, pc}

08001168 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	0352      	lsls	r2, r2, #13
 800117a:	0b52      	lsrs	r2, r2, #13
 800117c:	43d2      	mvns	r2, r2
 800117e:	401a      	ands	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b002      	add	sp, #8
 800118a:	bd80      	pop	{r7, pc}

0800118c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	0212      	lsls	r2, r2, #8
 80011a0:	43d2      	mvns	r2, r2
 80011a2:	401a      	ands	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	400b      	ands	r3, r1
 80011ac:	4904      	ldr	r1, [pc, #16]	; (80011c0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80011ae:	400b      	ands	r3, r1
 80011b0:	431a      	orrs	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b004      	add	sp, #16
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	07ffff00 	.word	0x07ffff00

080011c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <LL_ADC_EnableInternalRegulator+0x24>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	0552      	lsls	r2, r2, #21
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	6fffffe8 	.word	0x6fffffe8

080011ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	055b      	lsls	r3, r3, #21
 80011fc:	401a      	ands	r2, r3
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	055b      	lsls	r3, r3, #21
 8001202:	429a      	cmp	r2, r3
 8001204:	d101      	bne.n	800120a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800120a:	2300      	movs	r3, #0
}
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}

08001214 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2201      	movs	r2, #1
 8001222:	4013      	ands	r3, r2
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <LL_ADC_IsEnabled+0x18>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <LL_ADC_IsEnabled+0x1a>
 800122c:	2300      	movs	r3, #0
}
 800122e:	0018      	movs	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	b002      	add	sp, #8
 8001234:	bd80      	pop	{r7, pc}

08001236 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2204      	movs	r2, #4
 8001244:	4013      	ands	r3, r2
 8001246:	2b04      	cmp	r3, #4
 8001248:	d101      	bne.n	800124e <LL_ADC_REG_IsConversionOngoing+0x18>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800124e:	2300      	movs	r3, #0
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	b002      	add	sp, #8
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001260:	231f      	movs	r3, #31
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e17f      	b.n	800157e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10a      	bne.n	800129c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	0018      	movs	r0, r3
 800128a:	f7ff fcf7 	bl	8000c7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2254      	movs	r2, #84	; 0x54
 8001298:	2100      	movs	r1, #0
 800129a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7ff ffa3 	bl	80011ec <LL_ADC_IsInternalRegulatorEnabled>
 80012a6:	1e03      	subs	r3, r0, #0
 80012a8:	d115      	bne.n	80012d6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	0018      	movs	r0, r3
 80012b0:	f7ff ff88 	bl	80011c4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012b4:	4bb4      	ldr	r3, [pc, #720]	; (8001588 <HAL_ADC_Init+0x330>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	49b4      	ldr	r1, [pc, #720]	; (800158c <HAL_ADC_Init+0x334>)
 80012ba:	0018      	movs	r0, r3
 80012bc:	f7fe ff20 	bl	8000100 <__udivsi3>
 80012c0:	0003      	movs	r3, r0
 80012c2:	3301      	adds	r3, #1
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012c8:	e002      	b.n	80012d0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f9      	bne.n	80012ca <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	0018      	movs	r0, r3
 80012dc:	f7ff ff86 	bl	80011ec <LL_ADC_IsInternalRegulatorEnabled>
 80012e0:	1e03      	subs	r3, r0, #0
 80012e2:	d10f      	bne.n	8001304 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e8:	2210      	movs	r2, #16
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f4:	2201      	movs	r2, #1
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80012fc:	231f      	movs	r3, #31
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff ff94 	bl	8001236 <LL_ADC_REG_IsConversionOngoing>
 800130e:	0003      	movs	r3, r0
 8001310:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	2210      	movs	r2, #16
 8001318:	4013      	ands	r3, r2
 800131a:	d000      	beq.n	800131e <HAL_ADC_Init+0xc6>
 800131c:	e122      	b.n	8001564 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d000      	beq.n	8001326 <HAL_ADC_Init+0xce>
 8001324:	e11e      	b.n	8001564 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	4a99      	ldr	r2, [pc, #612]	; (8001590 <HAL_ADC_Init+0x338>)
 800132c:	4013      	ands	r3, r2
 800132e:	2202      	movs	r2, #2
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	0018      	movs	r0, r3
 800133c:	f7ff ff6a 	bl	8001214 <LL_ADC_IsEnabled>
 8001340:	1e03      	subs	r3, r0, #0
 8001342:	d000      	beq.n	8001346 <HAL_ADC_Init+0xee>
 8001344:	e0ad      	b.n	80014a2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7e1b      	ldrb	r3, [r3, #24]
 800134e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001350:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7e5b      	ldrb	r3, [r3, #25]
 8001356:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001358:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7e9b      	ldrb	r3, [r3, #26]
 800135e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001360:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <HAL_ADC_Init+0x118>
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	015b      	lsls	r3, r3, #5
 800136e:	e000      	b.n	8001372 <HAL_ADC_Init+0x11a>
 8001370:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001372:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001378:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	2b00      	cmp	r3, #0
 8001380:	da04      	bge.n	800138c <HAL_ADC_Init+0x134>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	e001      	b.n	8001390 <HAL_ADC_Init+0x138>
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001390:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	212c      	movs	r1, #44	; 0x2c
 8001396:	5c5b      	ldrb	r3, [r3, r1]
 8001398:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800139a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2220      	movs	r2, #32
 80013a6:	5c9b      	ldrb	r3, [r3, r2]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d115      	bne.n	80013d8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7e9b      	ldrb	r3, [r3, #26]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d105      	bne.n	80013c0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2280      	movs	r2, #128	; 0x80
 80013b8:	0252      	lsls	r2, r2, #9
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	e00b      	b.n	80013d8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c4:	2220      	movs	r2, #32
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d0:	2201      	movs	r2, #1
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00a      	beq.n	80013f6 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e4:	23e0      	movs	r3, #224	; 0xe0
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013ee:	4313      	orrs	r3, r2
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	4a65      	ldr	r2, [pc, #404]	; (8001594 <HAL_ADC_Init+0x33c>)
 80013fe:	4013      	ands	r3, r2
 8001400:	0019      	movs	r1, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	430a      	orrs	r2, r1
 800140a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	0f9b      	lsrs	r3, r3, #30
 8001412:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001418:	4313      	orrs	r3, r2
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4313      	orrs	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	223c      	movs	r2, #60	; 0x3c
 8001424:	5c9b      	ldrb	r3, [r3, r2]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d111      	bne.n	800144e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	0f9b      	lsrs	r3, r3, #30
 8001430:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001436:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800143c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001442:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	4313      	orrs	r3, r2
 8001448:	2201      	movs	r2, #1
 800144a:	4313      	orrs	r3, r2
 800144c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	4a50      	ldr	r2, [pc, #320]	; (8001598 <HAL_ADC_Init+0x340>)
 8001456:	4013      	ands	r3, r2
 8001458:	0019      	movs	r1, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	430a      	orrs	r2, r1
 8001462:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	23c0      	movs	r3, #192	; 0xc0
 800146a:	061b      	lsls	r3, r3, #24
 800146c:	429a      	cmp	r2, r3
 800146e:	d018      	beq.n	80014a2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	05db      	lsls	r3, r3, #23
 8001478:	429a      	cmp	r2, r3
 800147a:	d012      	beq.n	80014a2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	061b      	lsls	r3, r3, #24
 8001484:	429a      	cmp	r2, r3
 8001486:	d00c      	beq.n	80014a2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001488:	4b44      	ldr	r3, [pc, #272]	; (800159c <HAL_ADC_Init+0x344>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a44      	ldr	r2, [pc, #272]	; (80015a0 <HAL_ADC_Init+0x348>)
 800148e:	4013      	ands	r3, r2
 8001490:	0019      	movs	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	23f0      	movs	r3, #240	; 0xf0
 8001498:	039b      	lsls	r3, r3, #14
 800149a:	401a      	ands	r2, r3
 800149c:	4b3f      	ldr	r3, [pc, #252]	; (800159c <HAL_ADC_Init+0x344>)
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014aa:	001a      	movs	r2, r3
 80014ac:	2100      	movs	r1, #0
 80014ae:	f7ff fdf6 	bl	800109e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ba:	493a      	ldr	r1, [pc, #232]	; (80015a4 <HAL_ADC_Init+0x34c>)
 80014bc:	001a      	movs	r2, r3
 80014be:	f7ff fdee 	bl	800109e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d109      	bne.n	80014de <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2110      	movs	r1, #16
 80014d6:	4249      	negs	r1, r1
 80014d8:	430a      	orrs	r2, r1
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
 80014dc:	e018      	b.n	8001510 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	039b      	lsls	r3, r3, #14
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d112      	bne.n	8001510 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	221c      	movs	r2, #28
 80014fa:	4013      	ands	r3, r2
 80014fc:	2210      	movs	r2, #16
 80014fe:	4252      	negs	r2, r2
 8001500:	409a      	lsls	r2, r3
 8001502:	0011      	movs	r1, r2
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2100      	movs	r1, #0
 8001516:	0018      	movs	r0, r3
 8001518:	f7ff fdde 	bl	80010d8 <LL_ADC_GetSamplingTimeCommonChannels>
 800151c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001522:	429a      	cmp	r2, r3
 8001524:	d10b      	bne.n	800153e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001530:	2203      	movs	r2, #3
 8001532:	4393      	bics	r3, r2
 8001534:	2201      	movs	r2, #1
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800153c:	e01c      	b.n	8001578 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	2212      	movs	r2, #18
 8001544:	4393      	bics	r3, r2
 8001546:	2210      	movs	r2, #16
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001552:	2201      	movs	r2, #1
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800155a:	231f      	movs	r3, #31
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001562:	e009      	b.n	8001578 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001568:	2210      	movs	r2, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001570:	231f      	movs	r3, #31
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001578:	231f      	movs	r3, #31
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	781b      	ldrb	r3, [r3, #0]
}
 800157e:	0018      	movs	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	b008      	add	sp, #32
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	20000000 	.word	0x20000000
 800158c:	00030d40 	.word	0x00030d40
 8001590:	fffffefd 	.word	0xfffffefd
 8001594:	fffe0201 	.word	0xfffe0201
 8001598:	1ffffc02 	.word	0x1ffffc02
 800159c:	40012708 	.word	0x40012708
 80015a0:	ffc3ffff 	.word	0xffc3ffff
 80015a4:	07ffff04 	.word	0x07ffff04

080015a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b2:	2317      	movs	r3, #23
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2254      	movs	r2, #84	; 0x54
 80015c2:	5c9b      	ldrb	r3, [r3, r2]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x24>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e1c0      	b.n	800194e <HAL_ADC_ConfigChannel+0x3a6>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2254      	movs	r2, #84	; 0x54
 80015d0:	2101      	movs	r1, #1
 80015d2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff fe2c 	bl	8001236 <LL_ADC_REG_IsConversionOngoing>
 80015de:	1e03      	subs	r3, r0, #0
 80015e0:	d000      	beq.n	80015e4 <HAL_ADC_ConfigChannel+0x3c>
 80015e2:	e1a3      	b.n	800192c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d100      	bne.n	80015ee <HAL_ADC_ConfigChannel+0x46>
 80015ec:	e143      	b.n	8001876 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	061b      	lsls	r3, r3, #24
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d004      	beq.n	8001604 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015fe:	4ac1      	ldr	r2, [pc, #772]	; (8001904 <HAL_ADC_ConfigChannel+0x35c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d108      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0019      	movs	r1, r3
 800160e:	0010      	movs	r0, r2
 8001610:	f7ff fd99 	bl	8001146 <LL_ADC_REG_SetSequencerChAdd>
 8001614:	e0c9      	b.n	80017aa <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	211f      	movs	r1, #31
 8001620:	400b      	ands	r3, r1
 8001622:	210f      	movs	r1, #15
 8001624:	4099      	lsls	r1, r3
 8001626:	000b      	movs	r3, r1
 8001628:	43db      	mvns	r3, r3
 800162a:	4013      	ands	r3, r2
 800162c:	0019      	movs	r1, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	035b      	lsls	r3, r3, #13
 8001634:	0b5b      	lsrs	r3, r3, #13
 8001636:	d105      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x9c>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	0e9b      	lsrs	r3, r3, #26
 800163e:	221f      	movs	r2, #31
 8001640:	4013      	ands	r3, r2
 8001642:	e098      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2201      	movs	r2, #1
 800164a:	4013      	ands	r3, r2
 800164c:	d000      	beq.n	8001650 <HAL_ADC_ConfigChannel+0xa8>
 800164e:	e091      	b.n	8001774 <HAL_ADC_ConfigChannel+0x1cc>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2202      	movs	r2, #2
 8001656:	4013      	ands	r3, r2
 8001658:	d000      	beq.n	800165c <HAL_ADC_ConfigChannel+0xb4>
 800165a:	e089      	b.n	8001770 <HAL_ADC_ConfigChannel+0x1c8>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2204      	movs	r2, #4
 8001662:	4013      	ands	r3, r2
 8001664:	d000      	beq.n	8001668 <HAL_ADC_ConfigChannel+0xc0>
 8001666:	e081      	b.n	800176c <HAL_ADC_ConfigChannel+0x1c4>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2208      	movs	r2, #8
 800166e:	4013      	ands	r3, r2
 8001670:	d000      	beq.n	8001674 <HAL_ADC_ConfigChannel+0xcc>
 8001672:	e079      	b.n	8001768 <HAL_ADC_ConfigChannel+0x1c0>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2210      	movs	r2, #16
 800167a:	4013      	ands	r3, r2
 800167c:	d000      	beq.n	8001680 <HAL_ADC_ConfigChannel+0xd8>
 800167e:	e071      	b.n	8001764 <HAL_ADC_ConfigChannel+0x1bc>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2220      	movs	r2, #32
 8001686:	4013      	ands	r3, r2
 8001688:	d000      	beq.n	800168c <HAL_ADC_ConfigChannel+0xe4>
 800168a:	e069      	b.n	8001760 <HAL_ADC_ConfigChannel+0x1b8>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2240      	movs	r2, #64	; 0x40
 8001692:	4013      	ands	r3, r2
 8001694:	d000      	beq.n	8001698 <HAL_ADC_ConfigChannel+0xf0>
 8001696:	e061      	b.n	800175c <HAL_ADC_ConfigChannel+0x1b4>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2280      	movs	r2, #128	; 0x80
 800169e:	4013      	ands	r3, r2
 80016a0:	d000      	beq.n	80016a4 <HAL_ADC_ConfigChannel+0xfc>
 80016a2:	e059      	b.n	8001758 <HAL_ADC_ConfigChannel+0x1b0>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4013      	ands	r3, r2
 80016ae:	d151      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x1ac>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4013      	ands	r3, r2
 80016ba:	d149      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1a8>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4013      	ands	r3, r2
 80016c6:	d141      	bne.n	800174c <HAL_ADC_ConfigChannel+0x1a4>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4013      	ands	r3, r2
 80016d2:	d139      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x1a0>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	015b      	lsls	r3, r3, #5
 80016dc:	4013      	ands	r3, r2
 80016de:	d131      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x19c>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	019b      	lsls	r3, r3, #6
 80016e8:	4013      	ands	r3, r2
 80016ea:	d129      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x198>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	01db      	lsls	r3, r3, #7
 80016f4:	4013      	ands	r3, r2
 80016f6:	d121      	bne.n	800173c <HAL_ADC_ConfigChannel+0x194>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	4013      	ands	r3, r2
 8001702:	d119      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x190>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	025b      	lsls	r3, r3, #9
 800170c:	4013      	ands	r3, r2
 800170e:	d111      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x18c>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	029b      	lsls	r3, r3, #10
 8001718:	4013      	ands	r3, r2
 800171a:	d109      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x188>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	02db      	lsls	r3, r3, #11
 8001724:	4013      	ands	r3, r2
 8001726:	d001      	beq.n	800172c <HAL_ADC_ConfigChannel+0x184>
 8001728:	2312      	movs	r3, #18
 800172a:	e024      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 800172c:	2300      	movs	r3, #0
 800172e:	e022      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001730:	2311      	movs	r3, #17
 8001732:	e020      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001734:	2310      	movs	r3, #16
 8001736:	e01e      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001738:	230f      	movs	r3, #15
 800173a:	e01c      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 800173c:	230e      	movs	r3, #14
 800173e:	e01a      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001740:	230d      	movs	r3, #13
 8001742:	e018      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001744:	230c      	movs	r3, #12
 8001746:	e016      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001748:	230b      	movs	r3, #11
 800174a:	e014      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 800174c:	230a      	movs	r3, #10
 800174e:	e012      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001750:	2309      	movs	r3, #9
 8001752:	e010      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001754:	2308      	movs	r3, #8
 8001756:	e00e      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001758:	2307      	movs	r3, #7
 800175a:	e00c      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 800175c:	2306      	movs	r3, #6
 800175e:	e00a      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001760:	2305      	movs	r3, #5
 8001762:	e008      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001764:	2304      	movs	r3, #4
 8001766:	e006      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001768:	2303      	movs	r3, #3
 800176a:	e004      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 800176c:	2302      	movs	r3, #2
 800176e:	e002      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ce>
 8001774:	2300      	movs	r3, #0
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	6852      	ldr	r2, [r2, #4]
 800177a:	201f      	movs	r0, #31
 800177c:	4002      	ands	r2, r0
 800177e:	4093      	lsls	r3, r2
 8001780:	000a      	movs	r2, r1
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	429a      	cmp	r2, r3
 8001796:	d808      	bhi.n	80017aa <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	6859      	ldr	r1, [r3, #4]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	001a      	movs	r2, r3
 80017a6:	f7ff fcae 	bl	8001106 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	6819      	ldr	r1, [r3, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	001a      	movs	r2, r3
 80017b8:	f7ff fce8 	bl	800118c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db00      	blt.n	80017c6 <HAL_ADC_ConfigChannel+0x21e>
 80017c4:	e0bc      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017c6:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_ADC_ConfigChannel+0x360>)
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff fc5b 	bl	8001084 <LL_ADC_GetCommonPathInternalCh>
 80017ce:	0003      	movs	r3, r0
 80017d0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a4d      	ldr	r2, [pc, #308]	; (800190c <HAL_ADC_ConfigChannel+0x364>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d122      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	041b      	lsls	r3, r3, #16
 80017e2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017e4:	d11d      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	0412      	lsls	r2, r2, #16
 80017ec:	4313      	orrs	r3, r2
 80017ee:	4a46      	ldr	r2, [pc, #280]	; (8001908 <HAL_ADC_ConfigChannel+0x360>)
 80017f0:	0019      	movs	r1, r3
 80017f2:	0010      	movs	r0, r2
 80017f4:	f7ff fc32 	bl	800105c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017f8:	4b45      	ldr	r3, [pc, #276]	; (8001910 <HAL_ADC_ConfigChannel+0x368>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4945      	ldr	r1, [pc, #276]	; (8001914 <HAL_ADC_ConfigChannel+0x36c>)
 80017fe:	0018      	movs	r0, r3
 8001800:	f7fe fc7e 	bl	8000100 <__udivsi3>
 8001804:	0003      	movs	r3, r0
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	0013      	movs	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	189b      	adds	r3, r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001812:	e002      	b.n	800181a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3b01      	subs	r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f9      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001820:	e08e      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a3c      	ldr	r2, [pc, #240]	; (8001918 <HAL_ADC_ConfigChannel+0x370>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d10e      	bne.n	800184a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	045b      	lsls	r3, r3, #17
 8001832:	4013      	ands	r3, r2
 8001834:	d109      	bne.n	800184a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	2280      	movs	r2, #128	; 0x80
 800183a:	0452      	lsls	r2, r2, #17
 800183c:	4313      	orrs	r3, r2
 800183e:	4a32      	ldr	r2, [pc, #200]	; (8001908 <HAL_ADC_ConfigChannel+0x360>)
 8001840:	0019      	movs	r1, r3
 8001842:	0010      	movs	r0, r2
 8001844:	f7ff fc0a 	bl	800105c <LL_ADC_SetCommonPathInternalCh>
 8001848:	e07a      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a33      	ldr	r2, [pc, #204]	; (800191c <HAL_ADC_ConfigChannel+0x374>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d000      	beq.n	8001856 <HAL_ADC_ConfigChannel+0x2ae>
 8001854:	e074      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	03db      	lsls	r3, r3, #15
 800185c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800185e:	d000      	beq.n	8001862 <HAL_ADC_ConfigChannel+0x2ba>
 8001860:	e06e      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	03d2      	lsls	r2, r2, #15
 8001868:	4313      	orrs	r3, r2
 800186a:	4a27      	ldr	r2, [pc, #156]	; (8001908 <HAL_ADC_ConfigChannel+0x360>)
 800186c:	0019      	movs	r1, r3
 800186e:	0010      	movs	r0, r2
 8001870:	f7ff fbf4 	bl	800105c <LL_ADC_SetCommonPathInternalCh>
 8001874:	e064      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691a      	ldr	r2, [r3, #16]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	061b      	lsls	r3, r3, #24
 800187e:	429a      	cmp	r2, r3
 8001880:	d004      	beq.n	800188c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001886:	4a1f      	ldr	r2, [pc, #124]	; (8001904 <HAL_ADC_ConfigChannel+0x35c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d107      	bne.n	800189c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	0019      	movs	r1, r3
 8001896:	0010      	movs	r0, r2
 8001898:	f7ff fc66 	bl	8001168 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	da4d      	bge.n	8001940 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_ADC_ConfigChannel+0x360>)
 80018a6:	0018      	movs	r0, r3
 80018a8:	f7ff fbec 	bl	8001084 <LL_ADC_GetCommonPathInternalCh>
 80018ac:	0003      	movs	r3, r0
 80018ae:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a15      	ldr	r2, [pc, #84]	; (800190c <HAL_ADC_ConfigChannel+0x364>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d108      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4a18      	ldr	r2, [pc, #96]	; (8001920 <HAL_ADC_ConfigChannel+0x378>)
 80018be:	4013      	ands	r3, r2
 80018c0:	4a11      	ldr	r2, [pc, #68]	; (8001908 <HAL_ADC_ConfigChannel+0x360>)
 80018c2:	0019      	movs	r1, r3
 80018c4:	0010      	movs	r0, r2
 80018c6:	f7ff fbc9 	bl	800105c <LL_ADC_SetCommonPathInternalCh>
 80018ca:	e039      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a11      	ldr	r2, [pc, #68]	; (8001918 <HAL_ADC_ConfigChannel+0x370>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d108      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4a12      	ldr	r2, [pc, #72]	; (8001924 <HAL_ADC_ConfigChannel+0x37c>)
 80018da:	4013      	ands	r3, r2
 80018dc:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <HAL_ADC_ConfigChannel+0x360>)
 80018de:	0019      	movs	r1, r3
 80018e0:	0010      	movs	r0, r2
 80018e2:	f7ff fbbb 	bl	800105c <LL_ADC_SetCommonPathInternalCh>
 80018e6:	e02b      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0b      	ldr	r2, [pc, #44]	; (800191c <HAL_ADC_ConfigChannel+0x374>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d126      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4a0c      	ldr	r2, [pc, #48]	; (8001928 <HAL_ADC_ConfigChannel+0x380>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	4a03      	ldr	r2, [pc, #12]	; (8001908 <HAL_ADC_ConfigChannel+0x360>)
 80018fa:	0019      	movs	r1, r3
 80018fc:	0010      	movs	r0, r2
 80018fe:	f7ff fbad 	bl	800105c <LL_ADC_SetCommonPathInternalCh>
 8001902:	e01d      	b.n	8001940 <HAL_ADC_ConfigChannel+0x398>
 8001904:	80000004 	.word	0x80000004
 8001908:	40012708 	.word	0x40012708
 800190c:	b0001000 	.word	0xb0001000
 8001910:	20000000 	.word	0x20000000
 8001914:	00030d40 	.word	0x00030d40
 8001918:	b8004000 	.word	0xb8004000
 800191c:	b4002000 	.word	0xb4002000
 8001920:	ff7fffff 	.word	0xff7fffff
 8001924:	feffffff 	.word	0xfeffffff
 8001928:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	2220      	movs	r2, #32
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001938:	2317      	movs	r3, #23
 800193a:	18fb      	adds	r3, r7, r3
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2254      	movs	r2, #84	; 0x54
 8001944:	2100      	movs	r1, #0
 8001946:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001948:	2317      	movs	r3, #23
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	781b      	ldrb	r3, [r3, #0]
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b006      	add	sp, #24
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			; (mov r8, r8)

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	0002      	movs	r2, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b7f      	cmp	r3, #127	; 0x7f
 800196c:	d828      	bhi.n	80019c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800196e:	4a2f      	ldr	r2, [pc, #188]	; (8001a2c <__NVIC_SetPriority+0xd4>)
 8001970:	1dfb      	adds	r3, r7, #7
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b25b      	sxtb	r3, r3
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	33c0      	adds	r3, #192	; 0xc0
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	589b      	ldr	r3, [r3, r2]
 800197e:	1dfa      	adds	r2, r7, #7
 8001980:	7812      	ldrb	r2, [r2, #0]
 8001982:	0011      	movs	r1, r2
 8001984:	2203      	movs	r2, #3
 8001986:	400a      	ands	r2, r1
 8001988:	00d2      	lsls	r2, r2, #3
 800198a:	21ff      	movs	r1, #255	; 0xff
 800198c:	4091      	lsls	r1, r2
 800198e:	000a      	movs	r2, r1
 8001990:	43d2      	mvns	r2, r2
 8001992:	401a      	ands	r2, r3
 8001994:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	019b      	lsls	r3, r3, #6
 800199a:	22ff      	movs	r2, #255	; 0xff
 800199c:	401a      	ands	r2, r3
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	0018      	movs	r0, r3
 80019a4:	2303      	movs	r3, #3
 80019a6:	4003      	ands	r3, r0
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ac:	481f      	ldr	r0, [pc, #124]	; (8001a2c <__NVIC_SetPriority+0xd4>)
 80019ae:	1dfb      	adds	r3, r7, #7
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	b25b      	sxtb	r3, r3
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	430a      	orrs	r2, r1
 80019b8:	33c0      	adds	r3, #192	; 0xc0
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019be:	e031      	b.n	8001a24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019c0:	4a1b      	ldr	r2, [pc, #108]	; (8001a30 <__NVIC_SetPriority+0xd8>)
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	0019      	movs	r1, r3
 80019c8:	230f      	movs	r3, #15
 80019ca:	400b      	ands	r3, r1
 80019cc:	3b08      	subs	r3, #8
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3306      	adds	r3, #6
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	18d3      	adds	r3, r2, r3
 80019d6:	3304      	adds	r3, #4
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	1dfa      	adds	r2, r7, #7
 80019dc:	7812      	ldrb	r2, [r2, #0]
 80019de:	0011      	movs	r1, r2
 80019e0:	2203      	movs	r2, #3
 80019e2:	400a      	ands	r2, r1
 80019e4:	00d2      	lsls	r2, r2, #3
 80019e6:	21ff      	movs	r1, #255	; 0xff
 80019e8:	4091      	lsls	r1, r2
 80019ea:	000a      	movs	r2, r1
 80019ec:	43d2      	mvns	r2, r2
 80019ee:	401a      	ands	r2, r3
 80019f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	019b      	lsls	r3, r3, #6
 80019f6:	22ff      	movs	r2, #255	; 0xff
 80019f8:	401a      	ands	r2, r3
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	0018      	movs	r0, r3
 8001a00:	2303      	movs	r3, #3
 8001a02:	4003      	ands	r3, r0
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a08:	4809      	ldr	r0, [pc, #36]	; (8001a30 <__NVIC_SetPriority+0xd8>)
 8001a0a:	1dfb      	adds	r3, r7, #7
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	001c      	movs	r4, r3
 8001a10:	230f      	movs	r3, #15
 8001a12:	4023      	ands	r3, r4
 8001a14:	3b08      	subs	r3, #8
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	3306      	adds	r3, #6
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	18c3      	adds	r3, r0, r3
 8001a20:	3304      	adds	r3, #4
 8001a22:	601a      	str	r2, [r3, #0]
}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b003      	add	sp, #12
 8001a2a:	bd90      	pop	{r4, r7, pc}
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	1e5a      	subs	r2, r3, #1
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	045b      	lsls	r3, r3, #17
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d301      	bcc.n	8001a4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e010      	b.n	8001a6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <SysTick_Config+0x44>)
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	3a01      	subs	r2, #1
 8001a52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a54:	2301      	movs	r3, #1
 8001a56:	425b      	negs	r3, r3
 8001a58:	2103      	movs	r1, #3
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7ff ff7c 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x44>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x44>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	0018      	movs	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b002      	add	sp, #8
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	210f      	movs	r1, #15
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	1c02      	adds	r2, r0, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	0011      	movs	r1, r2
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff ff5d 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b004      	add	sp, #16
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7ff ffbf 	bl	8001a34 <SysTick_Config>
 8001ab6:	0003      	movs	r3, r0
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b002      	add	sp, #8
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e056      	b.n	8001b80 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	7f5b      	ldrb	r3, [r3, #29]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d106      	bne.n	8001aea <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7ff f90d 	bl	8000d04 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2202      	movs	r2, #2
 8001aee:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	791b      	ldrb	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10c      	bne.n	8001b12 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <HAL_CRC_Init+0xc8>)
 8001afe:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2118      	movs	r1, #24
 8001b0c:	438a      	bics	r2, r1
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	e00b      	b.n	8001b2a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6899      	ldr	r1, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f000 f835 	bl	8001b8c <HAL_CRCEx_Polynomial_Set>
 8001b22:	1e03      	subs	r3, r0, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e02a      	b.n	8001b80 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	795b      	ldrb	r3, [r3, #5]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d105      	bne.n	8001b3e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2201      	movs	r2, #1
 8001b38:	4252      	negs	r2, r2
 8001b3a:	611a      	str	r2, [r3, #16]
 8001b3c:	e004      	b.n	8001b48 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6912      	ldr	r2, [r2, #16]
 8001b46:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2260      	movs	r2, #96	; 0x60
 8001b50:	4393      	bics	r3, r2
 8001b52:	0019      	movs	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695a      	ldr	r2, [r3, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2280      	movs	r2, #128	; 0x80
 8001b68:	4393      	bics	r3, r2
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699a      	ldr	r2, [r3, #24]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	0018      	movs	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b002      	add	sp, #8
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	04c11db7 	.word	0x04c11db7

08001b8c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b98:	2317      	movs	r3, #23
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001ba0:	231f      	movs	r3, #31
 8001ba2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001ba4:	46c0      	nop			; (mov r8, r8)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1e5a      	subs	r2, r3, #1
 8001baa:	613a      	str	r2, [r7, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <HAL_CRCEx_Polynomial_Set+0x36>
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	221f      	movs	r2, #31
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	40da      	lsrs	r2, r3
 8001bba:	0013      	movs	r3, r2
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d0f1      	beq.n	8001ba6 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b18      	cmp	r3, #24
 8001bc6:	d00f      	beq.n	8001be8 <HAL_CRCEx_Polynomial_Set+0x5c>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b18      	cmp	r3, #24
 8001bcc:	d824      	bhi.n	8001c18 <HAL_CRCEx_Polynomial_Set+0x8c>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b10      	cmp	r3, #16
 8001bd2:	d011      	beq.n	8001bf8 <HAL_CRCEx_Polynomial_Set+0x6c>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d81e      	bhi.n	8001c18 <HAL_CRCEx_Polynomial_Set+0x8c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d020      	beq.n	8001c22 <HAL_CRCEx_Polynomial_Set+0x96>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d010      	beq.n	8001c08 <HAL_CRCEx_Polynomial_Set+0x7c>
 8001be6:	e017      	b.n	8001c18 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d91b      	bls.n	8001c26 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8001bee:	2317      	movs	r3, #23
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001bf6:	e016      	b.n	8001c26 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	2b07      	cmp	r3, #7
 8001bfc:	d915      	bls.n	8001c2a <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8001bfe:	2317      	movs	r3, #23
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001c06:	e010      	b.n	8001c2a <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2b0f      	cmp	r3, #15
 8001c0c:	d90f      	bls.n	8001c2e <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8001c0e:	2317      	movs	r3, #23
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001c16:	e00a      	b.n	8001c2e <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001c18:	2317      	movs	r3, #23
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
      break;
 8001c20:	e006      	b.n	8001c30 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	e004      	b.n	8001c30 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	e002      	b.n	8001c30 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	e000      	b.n	8001c30 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001c2e:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8001c30:	2317      	movs	r3, #23
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10e      	bne.n	8001c58 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2218      	movs	r2, #24
 8001c4a:	4393      	bics	r3, r2
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001c58:	2317      	movs	r3, #23
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	781b      	ldrb	r3, [r3, #0]
}
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b006      	add	sp, #24
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c76:	e147      	b.n	8001f08 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4091      	lsls	r1, r2
 8001c82:	000a      	movs	r2, r1
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d100      	bne.n	8001c90 <HAL_GPIO_Init+0x28>
 8001c8e:	e138      	b.n	8001f02 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2203      	movs	r2, #3
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d005      	beq.n	8001ca8 <HAL_GPIO_Init+0x40>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d130      	bne.n	8001d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	0013      	movs	r3, r2
 8001cb8:	43da      	mvns	r2, r3
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	0013      	movs	r3, r2
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cde:	2201      	movs	r2, #1
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	0013      	movs	r3, r2
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	0013      	movs	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2203      	movs	r2, #3
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d017      	beq.n	8001d46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	409a      	lsls	r2, r3
 8001d24:	0013      	movs	r3, r2
 8001d26:	43da      	mvns	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	409a      	lsls	r2, r3
 8001d38:	0013      	movs	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d123      	bne.n	8001d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	0092      	lsls	r2, r2, #2
 8001d5c:	58d3      	ldr	r3, [r2, r3]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2207      	movs	r2, #7
 8001d64:	4013      	ands	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	220f      	movs	r2, #15
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	0013      	movs	r3, r2
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2107      	movs	r1, #7
 8001d7e:	400b      	ands	r3, r1
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	409a      	lsls	r2, r3
 8001d84:	0013      	movs	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	08da      	lsrs	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3208      	adds	r2, #8
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	6939      	ldr	r1, [r7, #16]
 8001d98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	409a      	lsls	r2, r3
 8001da8:	0013      	movs	r3, r2
 8001daa:	43da      	mvns	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2203      	movs	r2, #3
 8001db8:	401a      	ands	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	0013      	movs	r3, r2
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	23c0      	movs	r3, #192	; 0xc0
 8001dd4:	029b      	lsls	r3, r3, #10
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d100      	bne.n	8001ddc <HAL_GPIO_Init+0x174>
 8001dda:	e092      	b.n	8001f02 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ddc:	4a50      	ldr	r2, [pc, #320]	; (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	3318      	adds	r3, #24
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	589b      	ldr	r3, [r3, r2]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2203      	movs	r2, #3
 8001dee:	4013      	ands	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	220f      	movs	r2, #15
 8001df4:	409a      	lsls	r2, r3
 8001df6:	0013      	movs	r3, r2
 8001df8:	43da      	mvns	r2, r3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	23a0      	movs	r3, #160	; 0xa0
 8001e04:	05db      	lsls	r3, r3, #23
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0x1ca>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a45      	ldr	r2, [pc, #276]	; (8001f24 <HAL_GPIO_Init+0x2bc>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00d      	beq.n	8001e2e <HAL_GPIO_Init+0x1c6>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a44      	ldr	r2, [pc, #272]	; (8001f28 <HAL_GPIO_Init+0x2c0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_Init+0x1c2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a43      	ldr	r2, [pc, #268]	; (8001f2c <HAL_GPIO_Init+0x2c4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_GPIO_Init+0x1be>
 8001e22:	2303      	movs	r3, #3
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x1cc>
 8001e26:	2305      	movs	r3, #5
 8001e28:	e004      	b.n	8001e34 <HAL_GPIO_Init+0x1cc>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e002      	b.n	8001e34 <HAL_GPIO_Init+0x1cc>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_GPIO_Init+0x1cc>
 8001e32:	2300      	movs	r3, #0
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	2103      	movs	r1, #3
 8001e38:	400a      	ands	r2, r1
 8001e3a:	00d2      	lsls	r2, r2, #3
 8001e3c:	4093      	lsls	r3, r2
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001e44:	4936      	ldr	r1, [pc, #216]	; (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3318      	adds	r3, #24
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e52:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	035b      	lsls	r3, r3, #13
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e76:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001e7c:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	43da      	mvns	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	039b      	lsls	r3, r3, #14
 8001e94:	4013      	ands	r3, r2
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001ea8:	2384      	movs	r3, #132	; 0x84
 8001eaa:	58d3      	ldr	r3, [r2, r3]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	029b      	lsls	r3, r3, #10
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ecc:	4914      	ldr	r1, [pc, #80]	; (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001ece:	2284      	movs	r2, #132	; 0x84
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001ed4:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	58d3      	ldr	r3, [r2, r3]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	025b      	lsls	r3, r3, #9
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001efa:	4909      	ldr	r1, [pc, #36]	; (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001efc:	2280      	movs	r2, #128	; 0x80
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	40da      	lsrs	r2, r3
 8001f10:	1e13      	subs	r3, r2, #0
 8001f12:	d000      	beq.n	8001f16 <HAL_GPIO_Init+0x2ae>
 8001f14:	e6b0      	b.n	8001c78 <HAL_GPIO_Init+0x10>
  }
}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b006      	add	sp, #24
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021800 	.word	0x40021800
 8001f24:	50000400 	.word	0x50000400
 8001f28:	50000800 	.word	0x50000800
 8001f2c:	50000c00 	.word	0x50000c00

08001f30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	000a      	movs	r2, r1
 8001f3a:	1cbb      	adds	r3, r7, #2
 8001f3c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	1cba      	adds	r2, r7, #2
 8001f44:	8812      	ldrh	r2, [r2, #0]
 8001f46:	4013      	ands	r3, r2
 8001f48:	d004      	beq.n	8001f54 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001f4a:	230f      	movs	r3, #15
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
 8001f52:	e003      	b.n	8001f5c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f54:	230f      	movs	r3, #15
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001f5c:	230f      	movs	r3, #15
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	781b      	ldrb	r3, [r3, #0]
}
 8001f62:	0018      	movs	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b004      	add	sp, #16
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	0008      	movs	r0, r1
 8001f74:	0011      	movs	r1, r2
 8001f76:	1cbb      	adds	r3, r7, #2
 8001f78:	1c02      	adds	r2, r0, #0
 8001f7a:	801a      	strh	r2, [r3, #0]
 8001f7c:	1c7b      	adds	r3, r7, #1
 8001f7e:	1c0a      	adds	r2, r1, #0
 8001f80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f82:	1c7b      	adds	r3, r7, #1
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d004      	beq.n	8001f94 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f8a:	1cbb      	adds	r3, r7, #2
 8001f8c:	881a      	ldrh	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f92:	e003      	b.n	8001f9c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f94:	1cbb      	adds	r3, r7, #2
 8001f96:	881a      	ldrh	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f9c:	46c0      	nop			; (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b002      	add	sp, #8
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a19      	ldr	r2, [pc, #100]	; (8002018 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d11f      	bne.n	8002008 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	0013      	movs	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	189b      	adds	r3, r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4912      	ldr	r1, [pc, #72]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f7fe f892 	bl	8000100 <__udivsi3>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	3301      	adds	r3, #1
 8001fe0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fe2:	e008      	b.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	e001      	b.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e009      	b.n	800200a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	401a      	ands	r2, r3
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	429a      	cmp	r2, r3
 8002006:	d0ed      	beq.n	8001fe4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	0018      	movs	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	b004      	add	sp, #16
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	40007000 	.word	0x40007000
 8002018:	fffff9ff 	.word	0xfffff9ff
 800201c:	20000000 	.word	0x20000000
 8002020:	000f4240 	.word	0x000f4240

08002024 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <LL_RCC_GetAPB1Prescaler+0x14>)
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	23e0      	movs	r3, #224	; 0xe0
 800202e:	01db      	lsls	r3, r3, #7
 8002030:	4013      	ands	r3, r2
}
 8002032:	0018      	movs	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000

0800203c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e2f3      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2201      	movs	r2, #1
 8002054:	4013      	ands	r3, r2
 8002056:	d100      	bne.n	800205a <HAL_RCC_OscConfig+0x1e>
 8002058:	e07c      	b.n	8002154 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800205a:	4bc3      	ldr	r3, [pc, #780]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2238      	movs	r2, #56	; 0x38
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002064:	4bc0      	ldr	r3, [pc, #768]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2203      	movs	r2, #3
 800206a:	4013      	ands	r3, r2
 800206c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b10      	cmp	r3, #16
 8002072:	d102      	bne.n	800207a <HAL_RCC_OscConfig+0x3e>
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	2b03      	cmp	r3, #3
 8002078:	d002      	beq.n	8002080 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	2b08      	cmp	r3, #8
 800207e:	d10b      	bne.n	8002098 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	4bb9      	ldr	r3, [pc, #740]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	029b      	lsls	r3, r3, #10
 8002088:	4013      	ands	r3, r2
 800208a:	d062      	beq.n	8002152 <HAL_RCC_OscConfig+0x116>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d15e      	bne.n	8002152 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e2ce      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	025b      	lsls	r3, r3, #9
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d107      	bne.n	80020b4 <HAL_RCC_OscConfig+0x78>
 80020a4:	4bb0      	ldr	r3, [pc, #704]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4baf      	ldr	r3, [pc, #700]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80020aa:	2180      	movs	r1, #128	; 0x80
 80020ac:	0249      	lsls	r1, r1, #9
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	e020      	b.n	80020f6 <HAL_RCC_OscConfig+0xba>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	23a0      	movs	r3, #160	; 0xa0
 80020ba:	02db      	lsls	r3, r3, #11
 80020bc:	429a      	cmp	r2, r3
 80020be:	d10e      	bne.n	80020de <HAL_RCC_OscConfig+0xa2>
 80020c0:	4ba9      	ldr	r3, [pc, #676]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4ba8      	ldr	r3, [pc, #672]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80020c6:	2180      	movs	r1, #128	; 0x80
 80020c8:	02c9      	lsls	r1, r1, #11
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	4ba6      	ldr	r3, [pc, #664]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4ba5      	ldr	r3, [pc, #660]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	0249      	lsls	r1, r1, #9
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	e00b      	b.n	80020f6 <HAL_RCC_OscConfig+0xba>
 80020de:	4ba2      	ldr	r3, [pc, #648]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4ba1      	ldr	r3, [pc, #644]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80020e4:	49a1      	ldr	r1, [pc, #644]	; (800236c <HAL_RCC_OscConfig+0x330>)
 80020e6:	400a      	ands	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	4b9f      	ldr	r3, [pc, #636]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b9e      	ldr	r3, [pc, #632]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80020f0:	499f      	ldr	r1, [pc, #636]	; (8002370 <HAL_RCC_OscConfig+0x334>)
 80020f2:	400a      	ands	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d014      	beq.n	8002128 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7fe ffa3 	bl	8001048 <HAL_GetTick>
 8002102:	0003      	movs	r3, r0
 8002104:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002108:	f7fe ff9e 	bl	8001048 <HAL_GetTick>
 800210c:	0002      	movs	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	; 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e28d      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800211a:	4b93      	ldr	r3, [pc, #588]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	029b      	lsls	r3, r3, #10
 8002122:	4013      	ands	r3, r2
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0xcc>
 8002126:	e015      	b.n	8002154 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7fe ff8e 	bl	8001048 <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002132:	f7fe ff89 	bl	8001048 <HAL_GetTick>
 8002136:	0002      	movs	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b64      	cmp	r3, #100	; 0x64
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e278      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002144:	4b88      	ldr	r3, [pc, #544]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	029b      	lsls	r3, r3, #10
 800214c:	4013      	ands	r3, r2
 800214e:	d1f0      	bne.n	8002132 <HAL_RCC_OscConfig+0xf6>
 8002150:	e000      	b.n	8002154 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002152:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2202      	movs	r2, #2
 800215a:	4013      	ands	r3, r2
 800215c:	d100      	bne.n	8002160 <HAL_RCC_OscConfig+0x124>
 800215e:	e099      	b.n	8002294 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002160:	4b81      	ldr	r3, [pc, #516]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2238      	movs	r2, #56	; 0x38
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800216a:	4b7f      	ldr	r3, [pc, #508]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2203      	movs	r2, #3
 8002170:	4013      	ands	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2b10      	cmp	r3, #16
 8002178:	d102      	bne.n	8002180 <HAL_RCC_OscConfig+0x144>
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d002      	beq.n	8002186 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d135      	bne.n	80021f2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002186:	4b78      	ldr	r3, [pc, #480]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4013      	ands	r3, r2
 8002190:	d005      	beq.n	800219e <HAL_RCC_OscConfig+0x162>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e24b      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219e:	4b72      	ldr	r3, [pc, #456]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4a74      	ldr	r2, [pc, #464]	; (8002374 <HAL_RCC_OscConfig+0x338>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	0019      	movs	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	021a      	lsls	r2, r3, #8
 80021ae:	4b6e      	ldr	r3, [pc, #440]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80021b0:	430a      	orrs	r2, r1
 80021b2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d112      	bne.n	80021e0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021ba:	4b6b      	ldr	r3, [pc, #428]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a6e      	ldr	r2, [pc, #440]	; (8002378 <HAL_RCC_OscConfig+0x33c>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	0019      	movs	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	4b67      	ldr	r3, [pc, #412]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80021ce:	4b66      	ldr	r3, [pc, #408]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	0adb      	lsrs	r3, r3, #11
 80021d4:	2207      	movs	r2, #7
 80021d6:	4013      	ands	r3, r2
 80021d8:	4a68      	ldr	r2, [pc, #416]	; (800237c <HAL_RCC_OscConfig+0x340>)
 80021da:	40da      	lsrs	r2, r3
 80021dc:	4b68      	ldr	r3, [pc, #416]	; (8002380 <HAL_RCC_OscConfig+0x344>)
 80021de:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021e0:	4b68      	ldr	r3, [pc, #416]	; (8002384 <HAL_RCC_OscConfig+0x348>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f7fe fed3 	bl	8000f90 <HAL_InitTick>
 80021ea:	1e03      	subs	r3, r0, #0
 80021ec:	d051      	beq.n	8002292 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e221      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d030      	beq.n	800225c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021fa:	4b5b      	ldr	r3, [pc, #364]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a5e      	ldr	r2, [pc, #376]	; (8002378 <HAL_RCC_OscConfig+0x33c>)
 8002200:	4013      	ands	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	4b57      	ldr	r3, [pc, #348]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 800220a:	430a      	orrs	r2, r1
 800220c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800220e:	4b56      	ldr	r3, [pc, #344]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b55      	ldr	r3, [pc, #340]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	0049      	lsls	r1, r1, #1
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7fe ff14 	bl	8001048 <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002226:	f7fe ff0f 	bl	8001048 <HAL_GetTick>
 800222a:	0002      	movs	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1fe      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002238:	4b4b      	ldr	r3, [pc, #300]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4013      	ands	r3, r2
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002244:	4b48      	ldr	r3, [pc, #288]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a4a      	ldr	r2, [pc, #296]	; (8002374 <HAL_RCC_OscConfig+0x338>)
 800224a:	4013      	ands	r3, r2
 800224c:	0019      	movs	r1, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	021a      	lsls	r2, r3, #8
 8002254:	4b44      	ldr	r3, [pc, #272]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 8002256:	430a      	orrs	r2, r1
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	e01b      	b.n	8002294 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800225c:	4b42      	ldr	r3, [pc, #264]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 8002262:	4949      	ldr	r1, [pc, #292]	; (8002388 <HAL_RCC_OscConfig+0x34c>)
 8002264:	400a      	ands	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe feee 	bl	8001048 <HAL_GetTick>
 800226c:	0003      	movs	r3, r0
 800226e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002272:	f7fe fee9 	bl	8001048 <HAL_GetTick>
 8002276:	0002      	movs	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e1d8      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002284:	4b38      	ldr	r3, [pc, #224]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4013      	ands	r3, r2
 800228e:	d1f0      	bne.n	8002272 <HAL_RCC_OscConfig+0x236>
 8002290:	e000      	b.n	8002294 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002292:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2208      	movs	r2, #8
 800229a:	4013      	ands	r3, r2
 800229c:	d047      	beq.n	800232e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800229e:	4b32      	ldr	r3, [pc, #200]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2238      	movs	r2, #56	; 0x38
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b18      	cmp	r3, #24
 80022a8:	d10a      	bne.n	80022c0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80022aa:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80022ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ae:	2202      	movs	r2, #2
 80022b0:	4013      	ands	r3, r2
 80022b2:	d03c      	beq.n	800232e <HAL_RCC_OscConfig+0x2f2>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d138      	bne.n	800232e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e1ba      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d019      	beq.n	80022fc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80022ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022cc:	4b26      	ldr	r3, [pc, #152]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80022ce:	2101      	movs	r1, #1
 80022d0:	430a      	orrs	r2, r1
 80022d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe feb8 	bl	8001048 <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022de:	f7fe feb3 	bl	8001048 <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e1a2      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80022f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f4:	2202      	movs	r2, #2
 80022f6:	4013      	ands	r3, r2
 80022f8:	d0f1      	beq.n	80022de <HAL_RCC_OscConfig+0x2a2>
 80022fa:	e018      	b.n	800232e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80022fc:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 80022fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 8002302:	2101      	movs	r1, #1
 8002304:	438a      	bics	r2, r1
 8002306:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe fe9e 	bl	8001048 <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002312:	f7fe fe99 	bl	8001048 <HAL_GetTick>
 8002316:	0002      	movs	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e188      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002324:	4b10      	ldr	r3, [pc, #64]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 8002326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002328:	2202      	movs	r2, #2
 800232a:	4013      	ands	r3, r2
 800232c:	d1f1      	bne.n	8002312 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2204      	movs	r2, #4
 8002334:	4013      	ands	r3, r2
 8002336:	d100      	bne.n	800233a <HAL_RCC_OscConfig+0x2fe>
 8002338:	e0c6      	b.n	80024c8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233a:	231f      	movs	r3, #31
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2238      	movs	r2, #56	; 0x38
 8002348:	4013      	ands	r3, r2
 800234a:	2b20      	cmp	r3, #32
 800234c:	d11e      	bne.n	800238c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_RCC_OscConfig+0x32c>)
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	2202      	movs	r2, #2
 8002354:	4013      	ands	r3, r2
 8002356:	d100      	bne.n	800235a <HAL_RCC_OscConfig+0x31e>
 8002358:	e0b6      	b.n	80024c8 <HAL_RCC_OscConfig+0x48c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d000      	beq.n	8002364 <HAL_RCC_OscConfig+0x328>
 8002362:	e0b1      	b.n	80024c8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e166      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
 8002368:	40021000 	.word	0x40021000
 800236c:	fffeffff 	.word	0xfffeffff
 8002370:	fffbffff 	.word	0xfffbffff
 8002374:	ffff80ff 	.word	0xffff80ff
 8002378:	ffffc7ff 	.word	0xffffc7ff
 800237c:	00f42400 	.word	0x00f42400
 8002380:	20000000 	.word	0x20000000
 8002384:	20000004 	.word	0x20000004
 8002388:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800238c:	4bac      	ldr	r3, [pc, #688]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 800238e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	055b      	lsls	r3, r3, #21
 8002394:	4013      	ands	r3, r2
 8002396:	d101      	bne.n	800239c <HAL_RCC_OscConfig+0x360>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x362>
 800239c:	2300      	movs	r3, #0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d011      	beq.n	80023c6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80023a2:	4ba7      	ldr	r3, [pc, #668]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 80023a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023a6:	4ba6      	ldr	r3, [pc, #664]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 80023a8:	2180      	movs	r1, #128	; 0x80
 80023aa:	0549      	lsls	r1, r1, #21
 80023ac:	430a      	orrs	r2, r1
 80023ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80023b0:	4ba3      	ldr	r3, [pc, #652]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 80023b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	055b      	lsls	r3, r3, #21
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80023be:	231f      	movs	r3, #31
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c6:	4b9f      	ldr	r3, [pc, #636]	; (8002644 <HAL_RCC_OscConfig+0x608>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4013      	ands	r3, r2
 80023d0:	d11a      	bne.n	8002408 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023d2:	4b9c      	ldr	r3, [pc, #624]	; (8002644 <HAL_RCC_OscConfig+0x608>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b9b      	ldr	r3, [pc, #620]	; (8002644 <HAL_RCC_OscConfig+0x608>)
 80023d8:	2180      	movs	r1, #128	; 0x80
 80023da:	0049      	lsls	r1, r1, #1
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80023e0:	f7fe fe32 	bl	8001048 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ea:	f7fe fe2d 	bl	8001048 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e11c      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fc:	4b91      	ldr	r3, [pc, #580]	; (8002644 <HAL_RCC_OscConfig+0x608>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4013      	ands	r3, r2
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d106      	bne.n	800241e <HAL_RCC_OscConfig+0x3e2>
 8002410:	4b8b      	ldr	r3, [pc, #556]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 8002412:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002414:	4b8a      	ldr	r3, [pc, #552]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 8002416:	2101      	movs	r1, #1
 8002418:	430a      	orrs	r2, r1
 800241a:	65da      	str	r2, [r3, #92]	; 0x5c
 800241c:	e01c      	b.n	8002458 <HAL_RCC_OscConfig+0x41c>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b05      	cmp	r3, #5
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0x404>
 8002426:	4b86      	ldr	r3, [pc, #536]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 8002428:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800242a:	4b85      	ldr	r3, [pc, #532]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 800242c:	2104      	movs	r1, #4
 800242e:	430a      	orrs	r2, r1
 8002430:	65da      	str	r2, [r3, #92]	; 0x5c
 8002432:	4b83      	ldr	r3, [pc, #524]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 8002434:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002436:	4b82      	ldr	r3, [pc, #520]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 8002438:	2101      	movs	r1, #1
 800243a:	430a      	orrs	r2, r1
 800243c:	65da      	str	r2, [r3, #92]	; 0x5c
 800243e:	e00b      	b.n	8002458 <HAL_RCC_OscConfig+0x41c>
 8002440:	4b7f      	ldr	r3, [pc, #508]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 8002442:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002444:	4b7e      	ldr	r3, [pc, #504]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 8002446:	2101      	movs	r1, #1
 8002448:	438a      	bics	r2, r1
 800244a:	65da      	str	r2, [r3, #92]	; 0x5c
 800244c:	4b7c      	ldr	r3, [pc, #496]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 800244e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002450:	4b7b      	ldr	r3, [pc, #492]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 8002452:	2104      	movs	r1, #4
 8002454:	438a      	bics	r2, r1
 8002456:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d014      	beq.n	800248a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fdf2 	bl	8001048 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002468:	e009      	b.n	800247e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe fded 	bl	8001048 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	4a74      	ldr	r2, [pc, #464]	; (8002648 <HAL_RCC_OscConfig+0x60c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0db      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800247e:	4b70      	ldr	r3, [pc, #448]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 8002480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002482:	2202      	movs	r2, #2
 8002484:	4013      	ands	r3, r2
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x42e>
 8002488:	e013      	b.n	80024b2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7fe fddd 	bl	8001048 <HAL_GetTick>
 800248e:	0003      	movs	r3, r0
 8002490:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002492:	e009      	b.n	80024a8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002494:	f7fe fdd8 	bl	8001048 <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	4a6a      	ldr	r2, [pc, #424]	; (8002648 <HAL_RCC_OscConfig+0x60c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0c6      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024a8:	4b65      	ldr	r3, [pc, #404]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 80024aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ac:	2202      	movs	r2, #2
 80024ae:	4013      	ands	r3, r2
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80024b2:	231f      	movs	r3, #31
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d105      	bne.n	80024c8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80024bc:	4b60      	ldr	r3, [pc, #384]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 80024be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024c0:	4b5f      	ldr	r3, [pc, #380]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 80024c2:	4962      	ldr	r1, [pc, #392]	; (800264c <HAL_RCC_OscConfig+0x610>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d100      	bne.n	80024d2 <HAL_RCC_OscConfig+0x496>
 80024d0:	e0b0      	b.n	8002634 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d2:	4b5b      	ldr	r3, [pc, #364]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2238      	movs	r2, #56	; 0x38
 80024d8:	4013      	ands	r3, r2
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d100      	bne.n	80024e0 <HAL_RCC_OscConfig+0x4a4>
 80024de:	e078      	b.n	80025d2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d153      	bne.n	8002590 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e8:	4b55      	ldr	r3, [pc, #340]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b54      	ldr	r3, [pc, #336]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 80024ee:	4958      	ldr	r1, [pc, #352]	; (8002650 <HAL_RCC_OscConfig+0x614>)
 80024f0:	400a      	ands	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe fda8 	bl	8001048 <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7fe fda3 	bl	8001048 <HAL_GetTick>
 8002502:	0002      	movs	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e092      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002510:	4b4b      	ldr	r3, [pc, #300]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	049b      	lsls	r3, r3, #18
 8002518:	4013      	ands	r3, r2
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800251c:	4b48      	ldr	r3, [pc, #288]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4a4c      	ldr	r2, [pc, #304]	; (8002654 <HAL_RCC_OscConfig+0x618>)
 8002522:	4013      	ands	r3, r2
 8002524:	0019      	movs	r1, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1a      	ldr	r2, [r3, #32]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	431a      	orrs	r2, r3
 8002544:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 8002546:	430a      	orrs	r2, r1
 8002548:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b3c      	ldr	r3, [pc, #240]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	0449      	lsls	r1, r1, #17
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002558:	4b39      	ldr	r3, [pc, #228]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	4b38      	ldr	r3, [pc, #224]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 800255e:	2180      	movs	r1, #128	; 0x80
 8002560:	0549      	lsls	r1, r1, #21
 8002562:	430a      	orrs	r2, r1
 8002564:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7fe fd6f 	bl	8001048 <HAL_GetTick>
 800256a:	0003      	movs	r3, r0
 800256c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002570:	f7fe fd6a 	bl	8001048 <HAL_GetTick>
 8002574:	0002      	movs	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e059      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002582:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	049b      	lsls	r3, r3, #18
 800258a:	4013      	ands	r3, r2
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x534>
 800258e:	e051      	b.n	8002634 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002590:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 8002596:	492e      	ldr	r1, [pc, #184]	; (8002650 <HAL_RCC_OscConfig+0x614>)
 8002598:	400a      	ands	r2, r1
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe fd54 	bl	8001048 <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a6:	f7fe fd4f 	bl	8001048 <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e03e      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b8:	4b21      	ldr	r3, [pc, #132]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	049b      	lsls	r3, r3, #18
 80025c0:	4013      	ands	r3, r2
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80025c4:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 80025ca:	4923      	ldr	r1, [pc, #140]	; (8002658 <HAL_RCC_OscConfig+0x61c>)
 80025cc:	400a      	ands	r2, r1
 80025ce:	60da      	str	r2, [r3, #12]
 80025d0:	e030      	b.n	8002634 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e02b      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80025de:	4b18      	ldr	r3, [pc, #96]	; (8002640 <HAL_RCC_OscConfig+0x604>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2203      	movs	r2, #3
 80025e8:	401a      	ands	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d11e      	bne.n	8002630 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2270      	movs	r2, #112	; 0x70
 80025f6:	401a      	ands	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d117      	bne.n	8002630 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	23fe      	movs	r3, #254	; 0xfe
 8002604:	01db      	lsls	r3, r3, #7
 8002606:	401a      	ands	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d10e      	bne.n	8002630 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	23f8      	movs	r3, #248	; 0xf8
 8002616:	039b      	lsls	r3, r3, #14
 8002618:	401a      	ands	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d106      	bne.n	8002630 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	0f5b      	lsrs	r3, r3, #29
 8002626:	075a      	lsls	r2, r3, #29
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	0018      	movs	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	b008      	add	sp, #32
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	40021000 	.word	0x40021000
 8002644:	40007000 	.word	0x40007000
 8002648:	00001388 	.word	0x00001388
 800264c:	efffffff 	.word	0xefffffff
 8002650:	feffffff 	.word	0xfeffffff
 8002654:	1fc1808c 	.word	0x1fc1808c
 8002658:	effefffc 	.word	0xeffefffc

0800265c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0e9      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002670:	4b76      	ldr	r3, [pc, #472]	; (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2207      	movs	r2, #7
 8002676:	4013      	ands	r3, r2
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d91e      	bls.n	80026bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b73      	ldr	r3, [pc, #460]	; (800284c <HAL_RCC_ClockConfig+0x1f0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2207      	movs	r2, #7
 8002684:	4393      	bics	r3, r2
 8002686:	0019      	movs	r1, r3
 8002688:	4b70      	ldr	r3, [pc, #448]	; (800284c <HAL_RCC_ClockConfig+0x1f0>)
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002690:	f7fe fcda 	bl	8001048 <HAL_GetTick>
 8002694:	0003      	movs	r3, r0
 8002696:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002698:	e009      	b.n	80026ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269a:	f7fe fcd5 	bl	8001048 <HAL_GetTick>
 800269e:	0002      	movs	r2, r0
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	4a6a      	ldr	r2, [pc, #424]	; (8002850 <HAL_RCC_ClockConfig+0x1f4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e0ca      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026ae:	4b67      	ldr	r3, [pc, #412]	; (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2207      	movs	r2, #7
 80026b4:	4013      	ands	r3, r2
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d1ee      	bne.n	800269a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2202      	movs	r2, #2
 80026c2:	4013      	ands	r3, r2
 80026c4:	d015      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2204      	movs	r2, #4
 80026cc:	4013      	ands	r3, r2
 80026ce:	d006      	beq.n	80026de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026d0:	4b60      	ldr	r3, [pc, #384]	; (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	4b5f      	ldr	r3, [pc, #380]	; (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 80026d6:	21e0      	movs	r1, #224	; 0xe0
 80026d8:	01c9      	lsls	r1, r1, #7
 80026da:	430a      	orrs	r2, r1
 80026dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026de:	4b5d      	ldr	r3, [pc, #372]	; (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	4a5d      	ldr	r2, [pc, #372]	; (8002858 <HAL_RCC_ClockConfig+0x1fc>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	0019      	movs	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	4b59      	ldr	r3, [pc, #356]	; (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 80026ee:	430a      	orrs	r2, r1
 80026f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2201      	movs	r2, #1
 80026f8:	4013      	ands	r3, r2
 80026fa:	d057      	beq.n	80027ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d107      	bne.n	8002714 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002704:	4b53      	ldr	r3, [pc, #332]	; (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	029b      	lsls	r3, r3, #10
 800270c:	4013      	ands	r3, r2
 800270e:	d12b      	bne.n	8002768 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e097      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d107      	bne.n	800272c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271c:	4b4d      	ldr	r3, [pc, #308]	; (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	049b      	lsls	r3, r3, #18
 8002724:	4013      	ands	r3, r2
 8002726:	d11f      	bne.n	8002768 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e08b      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d107      	bne.n	8002744 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002734:	4b47      	ldr	r3, [pc, #284]	; (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4013      	ands	r3, r2
 800273e:	d113      	bne.n	8002768 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e07f      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d106      	bne.n	800275a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800274c:	4b41      	ldr	r3, [pc, #260]	; (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 800274e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002750:	2202      	movs	r2, #2
 8002752:	4013      	ands	r3, r2
 8002754:	d108      	bne.n	8002768 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e074      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800275a:	4b3e      	ldr	r3, [pc, #248]	; (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 800275c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275e:	2202      	movs	r2, #2
 8002760:	4013      	ands	r3, r2
 8002762:	d101      	bne.n	8002768 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e06d      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2207      	movs	r2, #7
 800276e:	4393      	bics	r3, r2
 8002770:	0019      	movs	r1, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	4b37      	ldr	r3, [pc, #220]	; (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 8002778:	430a      	orrs	r2, r1
 800277a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800277c:	f7fe fc64 	bl	8001048 <HAL_GetTick>
 8002780:	0003      	movs	r3, r0
 8002782:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002784:	e009      	b.n	800279a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002786:	f7fe fc5f 	bl	8001048 <HAL_GetTick>
 800278a:	0002      	movs	r2, r0
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	4a2f      	ldr	r2, [pc, #188]	; (8002850 <HAL_RCC_ClockConfig+0x1f4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e054      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	4b2e      	ldr	r3, [pc, #184]	; (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2238      	movs	r2, #56	; 0x38
 80027a0:	401a      	ands	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d1ec      	bne.n	8002786 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027ac:	4b27      	ldr	r3, [pc, #156]	; (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2207      	movs	r2, #7
 80027b2:	4013      	ands	r3, r2
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d21e      	bcs.n	80027f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2207      	movs	r2, #7
 80027c0:	4393      	bics	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	4b21      	ldr	r3, [pc, #132]	; (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027cc:	f7fe fc3c 	bl	8001048 <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027d4:	e009      	b.n	80027ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d6:	f7fe fc37 	bl	8001048 <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <HAL_RCC_ClockConfig+0x1f4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e02c      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027ea:	4b18      	ldr	r3, [pc, #96]	; (800284c <HAL_RCC_ClockConfig+0x1f0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2207      	movs	r2, #7
 80027f0:	4013      	ands	r3, r2
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d1ee      	bne.n	80027d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2204      	movs	r2, #4
 80027fe:	4013      	ands	r3, r2
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	4a15      	ldr	r2, [pc, #84]	; (800285c <HAL_RCC_ClockConfig+0x200>)
 8002808:	4013      	ands	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 8002812:	430a      	orrs	r2, r1
 8002814:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002816:	f000 f829 	bl	800286c <HAL_RCC_GetSysClockFreq>
 800281a:	0001      	movs	r1, r0
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <HAL_RCC_ClockConfig+0x1f8>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	220f      	movs	r2, #15
 8002824:	401a      	ands	r2, r3
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <HAL_RCC_ClockConfig+0x204>)
 8002828:	0092      	lsls	r2, r2, #2
 800282a:	58d3      	ldr	r3, [r2, r3]
 800282c:	221f      	movs	r2, #31
 800282e:	4013      	ands	r3, r2
 8002830:	000a      	movs	r2, r1
 8002832:	40da      	lsrs	r2, r3
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_RCC_ClockConfig+0x208>)
 8002836:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_ClockConfig+0x20c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	0018      	movs	r0, r3
 800283e:	f7fe fba7 	bl	8000f90 <HAL_InitTick>
 8002842:	0003      	movs	r3, r0
}
 8002844:	0018      	movs	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	b004      	add	sp, #16
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40022000 	.word	0x40022000
 8002850:	00001388 	.word	0x00001388
 8002854:	40021000 	.word	0x40021000
 8002858:	fffff0ff 	.word	0xfffff0ff
 800285c:	ffff8fff 	.word	0xffff8fff
 8002860:	08003a74 	.word	0x08003a74
 8002864:	20000000 	.word	0x20000000
 8002868:	20000004 	.word	0x20000004

0800286c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002872:	4b3c      	ldr	r3, [pc, #240]	; (8002964 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2238      	movs	r2, #56	; 0x38
 8002878:	4013      	ands	r3, r2
 800287a:	d10f      	bne.n	800289c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800287c:	4b39      	ldr	r3, [pc, #228]	; (8002964 <HAL_RCC_GetSysClockFreq+0xf8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	0adb      	lsrs	r3, r3, #11
 8002882:	2207      	movs	r2, #7
 8002884:	4013      	ands	r3, r2
 8002886:	2201      	movs	r2, #1
 8002888:	409a      	lsls	r2, r3
 800288a:	0013      	movs	r3, r2
 800288c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800288e:	6839      	ldr	r1, [r7, #0]
 8002890:	4835      	ldr	r0, [pc, #212]	; (8002968 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002892:	f7fd fc35 	bl	8000100 <__udivsi3>
 8002896:	0003      	movs	r3, r0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	e05d      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800289c:	4b31      	ldr	r3, [pc, #196]	; (8002964 <HAL_RCC_GetSysClockFreq+0xf8>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2238      	movs	r2, #56	; 0x38
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d102      	bne.n	80028ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028a8:	4b30      	ldr	r3, [pc, #192]	; (800296c <HAL_RCC_GetSysClockFreq+0x100>)
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	e054      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ae:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2238      	movs	r2, #56	; 0x38
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b10      	cmp	r3, #16
 80028b8:	d138      	bne.n	800292c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80028ba:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2203      	movs	r2, #3
 80028c0:	4013      	ands	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028c4:	4b27      	ldr	r3, [pc, #156]	; (8002964 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	2207      	movs	r2, #7
 80028cc:	4013      	ands	r3, r2
 80028ce:	3301      	adds	r3, #1
 80028d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d10d      	bne.n	80028f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	4824      	ldr	r0, [pc, #144]	; (800296c <HAL_RCC_GetSysClockFreq+0x100>)
 80028dc:	f7fd fc10 	bl	8000100 <__udivsi3>
 80028e0:	0003      	movs	r3, r0
 80028e2:	0019      	movs	r1, r3
 80028e4:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	227f      	movs	r2, #127	; 0x7f
 80028ec:	4013      	ands	r3, r2
 80028ee:	434b      	muls	r3, r1
 80028f0:	617b      	str	r3, [r7, #20]
        break;
 80028f2:	e00d      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	481c      	ldr	r0, [pc, #112]	; (8002968 <HAL_RCC_GetSysClockFreq+0xfc>)
 80028f8:	f7fd fc02 	bl	8000100 <__udivsi3>
 80028fc:	0003      	movs	r3, r0
 80028fe:	0019      	movs	r1, r3
 8002900:	4b18      	ldr	r3, [pc, #96]	; (8002964 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	227f      	movs	r2, #127	; 0x7f
 8002908:	4013      	ands	r3, r2
 800290a:	434b      	muls	r3, r1
 800290c:	617b      	str	r3, [r7, #20]
        break;
 800290e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002910:	4b14      	ldr	r3, [pc, #80]	; (8002964 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0f5b      	lsrs	r3, r3, #29
 8002916:	2207      	movs	r2, #7
 8002918:	4013      	ands	r3, r2
 800291a:	3301      	adds	r3, #1
 800291c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	6978      	ldr	r0, [r7, #20]
 8002922:	f7fd fbed 	bl	8000100 <__udivsi3>
 8002926:	0003      	movs	r3, r0
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	e015      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800292c:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <HAL_RCC_GetSysClockFreq+0xf8>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2238      	movs	r2, #56	; 0x38
 8002932:	4013      	ands	r3, r2
 8002934:	2b20      	cmp	r3, #32
 8002936:	d103      	bne.n	8002940 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	e00b      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2238      	movs	r2, #56	; 0x38
 8002946:	4013      	ands	r3, r2
 8002948:	2b18      	cmp	r3, #24
 800294a:	d103      	bne.n	8002954 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800294c:	23fa      	movs	r3, #250	; 0xfa
 800294e:	01db      	lsls	r3, r3, #7
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	e001      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002958:	693b      	ldr	r3, [r7, #16]
}
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b006      	add	sp, #24
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	40021000 	.word	0x40021000
 8002968:	00f42400 	.word	0x00f42400
 800296c:	007a1200 	.word	0x007a1200

08002970 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002974:	4b02      	ldr	r3, [pc, #8]	; (8002980 <HAL_RCC_GetHCLKFreq+0x10>)
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	0018      	movs	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	20000000 	.word	0x20000000

08002984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002984:	b5b0      	push	{r4, r5, r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002988:	f7ff fff2 	bl	8002970 <HAL_RCC_GetHCLKFreq>
 800298c:	0004      	movs	r4, r0
 800298e:	f7ff fb49 	bl	8002024 <LL_RCC_GetAPB1Prescaler>
 8002992:	0003      	movs	r3, r0
 8002994:	0b1a      	lsrs	r2, r3, #12
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002998:	0092      	lsls	r2, r2, #2
 800299a:	58d3      	ldr	r3, [r2, r3]
 800299c:	221f      	movs	r2, #31
 800299e:	4013      	ands	r3, r2
 80029a0:	40dc      	lsrs	r4, r3
 80029a2:	0023      	movs	r3, r4
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bdb0      	pop	{r4, r5, r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	08003ab4 	.word	0x08003ab4

080029b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80029b8:	2313      	movs	r3, #19
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029c0:	2312      	movs	r3, #18
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	029b      	lsls	r3, r3, #10
 80029d0:	4013      	ands	r3, r2
 80029d2:	d100      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80029d4:	e0a3      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d6:	2011      	movs	r0, #17
 80029d8:	183b      	adds	r3, r7, r0
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029de:	4b86      	ldr	r3, [pc, #536]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	055b      	lsls	r3, r3, #21
 80029e6:	4013      	ands	r3, r2
 80029e8:	d110      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	4b83      	ldr	r3, [pc, #524]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029ee:	4b82      	ldr	r3, [pc, #520]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	0549      	lsls	r1, r1, #21
 80029f4:	430a      	orrs	r2, r1
 80029f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80029f8:	4b7f      	ldr	r3, [pc, #508]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	055b      	lsls	r3, r3, #21
 8002a00:	4013      	ands	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a06:	183b      	adds	r3, r7, r0
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a0c:	4b7b      	ldr	r3, [pc, #492]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b7a      	ldr	r3, [pc, #488]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a12:	2180      	movs	r1, #128	; 0x80
 8002a14:	0049      	lsls	r1, r1, #1
 8002a16:	430a      	orrs	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a1a:	f7fe fb15 	bl	8001048 <HAL_GetTick>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a22:	e00b      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a24:	f7fe fb10 	bl	8001048 <HAL_GetTick>
 8002a28:	0002      	movs	r2, r0
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d904      	bls.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002a32:	2313      	movs	r3, #19
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	2203      	movs	r2, #3
 8002a38:	701a      	strb	r2, [r3, #0]
        break;
 8002a3a:	e005      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a3c:	4b6f      	ldr	r3, [pc, #444]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4013      	ands	r3, r2
 8002a46:	d0ed      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002a48:	2313      	movs	r3, #19
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d154      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a52:	4b69      	ldr	r3, [pc, #420]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a56:	23c0      	movs	r3, #192	; 0xc0
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d019      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d014      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a6e:	4b62      	ldr	r3, [pc, #392]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a72:	4a63      	ldr	r2, [pc, #396]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a78:	4b5f      	ldr	r3, [pc, #380]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a7c:	4b5e      	ldr	r3, [pc, #376]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	0249      	lsls	r1, r1, #9
 8002a82:	430a      	orrs	r2, r1
 8002a84:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a86:	4b5c      	ldr	r3, [pc, #368]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a8a:	4b5b      	ldr	r3, [pc, #364]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a8c:	495d      	ldr	r1, [pc, #372]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002a8e:	400a      	ands	r2, r1
 8002a90:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a92:	4b59      	ldr	r3, [pc, #356]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d016      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fad2 	bl	8001048 <HAL_GetTick>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa8:	e00c      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aaa:	f7fe facd 	bl	8001048 <HAL_GetTick>
 8002aae:	0002      	movs	r2, r0
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	4a54      	ldr	r2, [pc, #336]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d904      	bls.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002aba:	2313      	movs	r3, #19
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	2203      	movs	r2, #3
 8002ac0:	701a      	strb	r2, [r3, #0]
            break;
 8002ac2:	e004      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ac4:	4b4c      	ldr	r3, [pc, #304]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	2202      	movs	r2, #2
 8002aca:	4013      	ands	r3, r2
 8002acc:	d0ed      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002ace:	2313      	movs	r3, #19
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad8:	4b47      	ldr	r3, [pc, #284]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002adc:	4a48      	ldr	r2, [pc, #288]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	4b44      	ldr	r3, [pc, #272]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	65da      	str	r2, [r3, #92]	; 0x5c
 8002aec:	e00c      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aee:	2312      	movs	r3, #18
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	2213      	movs	r2, #19
 8002af4:	18ba      	adds	r2, r7, r2
 8002af6:	7812      	ldrb	r2, [r2, #0]
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	e005      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002afc:	2312      	movs	r3, #18
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2213      	movs	r2, #19
 8002b02:	18ba      	adds	r2, r7, r2
 8002b04:	7812      	ldrb	r2, [r2, #0]
 8002b06:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b08:	2311      	movs	r3, #17
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d105      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b12:	4b39      	ldr	r3, [pc, #228]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b16:	4b38      	ldr	r3, [pc, #224]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b18:	493c      	ldr	r1, [pc, #240]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b1a:	400a      	ands	r2, r1
 8002b1c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2201      	movs	r2, #1
 8002b24:	4013      	ands	r3, r2
 8002b26:	d009      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b28:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	4393      	bics	r3, r2
 8002b30:	0019      	movs	r1, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	4b30      	ldr	r3, [pc, #192]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2202      	movs	r2, #2
 8002b42:	4013      	ands	r3, r2
 8002b44:	d009      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b46:	4b2c      	ldr	r3, [pc, #176]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	220c      	movs	r2, #12
 8002b4c:	4393      	bics	r3, r2
 8002b4e:	0019      	movs	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b56:	430a      	orrs	r2, r1
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	4013      	ands	r3, r2
 8002b62:	d009      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b64:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b68:	4a29      	ldr	r2, [pc, #164]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b74:	430a      	orrs	r2, r1
 8002b76:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	01db      	lsls	r3, r3, #7
 8002b80:	4013      	ands	r3, r2
 8002b82:	d015      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b84:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	0899      	lsrs	r1, r3, #2
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b92:	430a      	orrs	r2, r1
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	05db      	lsls	r3, r3, #23
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d106      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ba2:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ba8:	2180      	movs	r1, #128	; 0x80
 8002baa:	0249      	lsls	r1, r1, #9
 8002bac:	430a      	orrs	r2, r1
 8002bae:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d016      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	0019      	movs	r1, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	01db      	lsls	r3, r3, #7
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d106      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002be2:	2180      	movs	r1, #128	; 0x80
 8002be4:	0249      	lsls	r1, r1, #9
 8002be6:	430a      	orrs	r2, r1
 8002be8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002bea:	2312      	movs	r3, #18
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	781b      	ldrb	r3, [r3, #0]
}
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b006      	add	sp, #24
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40007000 	.word	0x40007000
 8002c00:	fffffcff 	.word	0xfffffcff
 8002c04:	fffeffff 	.word	0xfffeffff
 8002c08:	00001388 	.word	0x00001388
 8002c0c:	efffffff 	.word	0xefffffff
 8002c10:	ffffcfff 	.word	0xffffcfff
 8002c14:	ffff3fff 	.word	0xffff3fff

08002c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e046      	b.n	8002cb8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2288      	movs	r2, #136	; 0x88
 8002c2e:	589b      	ldr	r3, [r3, r2]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d107      	bne.n	8002c44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2284      	movs	r2, #132	; 0x84
 8002c38:	2100      	movs	r1, #0
 8002c3a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f7fe f880 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2288      	movs	r2, #136	; 0x88
 8002c48:	2124      	movs	r1, #36	; 0x24
 8002c4a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2101      	movs	r1, #1
 8002c58:	438a      	bics	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f000 f8cc 	bl	8002dfc <UART_SetConfig>
 8002c64:	0003      	movs	r3, r0
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e024      	b.n	8002cb8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 fa63 	bl	8003144 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	490d      	ldr	r1, [pc, #52]	; (8002cc0 <HAL_UART_Init+0xa8>)
 8002c8a:	400a      	ands	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	212a      	movs	r1, #42	; 0x2a
 8002c9a:	438a      	bics	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2101      	movs	r1, #1
 8002caa:	430a      	orrs	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f000 fafb 	bl	80032ac <UART_CheckIdleState>
 8002cb6:	0003      	movs	r3, r0
}
 8002cb8:	0018      	movs	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	ffffb7ff 	.word	0xffffb7ff

08002cc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	1dbb      	adds	r3, r7, #6
 8002cd2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2288      	movs	r2, #136	; 0x88
 8002cd8:	589b      	ldr	r3, [r3, r2]
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d000      	beq.n	8002ce0 <HAL_UART_Transmit+0x1c>
 8002cde:	e088      	b.n	8002df2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_UART_Transmit+0x2a>
 8002ce6:	1dbb      	adds	r3, r7, #6
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e080      	b.n	8002df4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	015b      	lsls	r3, r3, #5
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d109      	bne.n	8002d12 <HAL_UART_Transmit+0x4e>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d105      	bne.n	8002d12 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d001      	beq.n	8002d12 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e070      	b.n	8002df4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2290      	movs	r2, #144	; 0x90
 8002d16:	2100      	movs	r1, #0
 8002d18:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2288      	movs	r2, #136	; 0x88
 8002d1e:	2121      	movs	r1, #33	; 0x21
 8002d20:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d22:	f7fe f991 	bl	8001048 <HAL_GetTick>
 8002d26:	0003      	movs	r3, r0
 8002d28:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1dba      	adds	r2, r7, #6
 8002d2e:	2154      	movs	r1, #84	; 0x54
 8002d30:	8812      	ldrh	r2, [r2, #0]
 8002d32:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1dba      	adds	r2, r7, #6
 8002d38:	2156      	movs	r1, #86	; 0x56
 8002d3a:	8812      	ldrh	r2, [r2, #0]
 8002d3c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	015b      	lsls	r3, r3, #5
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d108      	bne.n	8002d5c <HAL_UART_Transmit+0x98>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d104      	bne.n	8002d5c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	e003      	b.n	8002d64 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d64:	e02c      	b.n	8002dc0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	0013      	movs	r3, r2
 8002d70:	2200      	movs	r2, #0
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	f000 fae8 	bl	8003348 <UART_WaitOnFlagUntilTimeout>
 8002d78:	1e03      	subs	r3, r0, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e039      	b.n	8002df4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10b      	bne.n	8002d9e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	001a      	movs	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	05d2      	lsls	r2, r2, #23
 8002d92:	0dd2      	lsrs	r2, r2, #23
 8002d94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	3302      	adds	r3, #2
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	e007      	b.n	8002dae <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	3301      	adds	r3, #1
 8002dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2256      	movs	r2, #86	; 0x56
 8002db2:	5a9b      	ldrh	r3, [r3, r2]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b299      	uxth	r1, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2256      	movs	r2, #86	; 0x56
 8002dbe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2256      	movs	r2, #86	; 0x56
 8002dc4:	5a9b      	ldrh	r3, [r3, r2]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1cc      	bne.n	8002d66 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	0013      	movs	r3, r2
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2140      	movs	r1, #64	; 0x40
 8002dda:	f000 fab5 	bl	8003348 <UART_WaitOnFlagUntilTimeout>
 8002dde:	1e03      	subs	r3, r0, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e006      	b.n	8002df4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2288      	movs	r2, #136	; 0x88
 8002dea:	2120      	movs	r1, #32
 8002dec:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e000      	b.n	8002df4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
  }
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b008      	add	sp, #32
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e04:	231a      	movs	r3, #26
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4abc      	ldr	r2, [pc, #752]	; (800311c <UART_SetConfig+0x320>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	0019      	movs	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4ab7      	ldr	r2, [pc, #732]	; (8003120 <UART_SetConfig+0x324>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4aae      	ldr	r2, [pc, #696]	; (8003124 <UART_SetConfig+0x328>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	220f      	movs	r2, #15
 8002e80:	4393      	bics	r3, r2
 8002e82:	0019      	movs	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4aa4      	ldr	r2, [pc, #656]	; (8003128 <UART_SetConfig+0x32c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d127      	bne.n	8002eea <UART_SetConfig+0xee>
 8002e9a:	4ba4      	ldr	r3, [pc, #656]	; (800312c <UART_SetConfig+0x330>)
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d017      	beq.n	8002ed6 <UART_SetConfig+0xda>
 8002ea6:	d81b      	bhi.n	8002ee0 <UART_SetConfig+0xe4>
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d00a      	beq.n	8002ec2 <UART_SetConfig+0xc6>
 8002eac:	d818      	bhi.n	8002ee0 <UART_SetConfig+0xe4>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <UART_SetConfig+0xbc>
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d00a      	beq.n	8002ecc <UART_SetConfig+0xd0>
 8002eb6:	e013      	b.n	8002ee0 <UART_SetConfig+0xe4>
 8002eb8:	231b      	movs	r3, #27
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
 8002ec0:	e058      	b.n	8002f74 <UART_SetConfig+0x178>
 8002ec2:	231b      	movs	r3, #27
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e053      	b.n	8002f74 <UART_SetConfig+0x178>
 8002ecc:	231b      	movs	r3, #27
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	e04e      	b.n	8002f74 <UART_SetConfig+0x178>
 8002ed6:	231b      	movs	r3, #27
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	2208      	movs	r2, #8
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	e049      	b.n	8002f74 <UART_SetConfig+0x178>
 8002ee0:	231b      	movs	r3, #27
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	e044      	b.n	8002f74 <UART_SetConfig+0x178>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a90      	ldr	r2, [pc, #576]	; (8003130 <UART_SetConfig+0x334>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d127      	bne.n	8002f44 <UART_SetConfig+0x148>
 8002ef4:	4b8d      	ldr	r3, [pc, #564]	; (800312c <UART_SetConfig+0x330>)
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef8:	220c      	movs	r2, #12
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b0c      	cmp	r3, #12
 8002efe:	d017      	beq.n	8002f30 <UART_SetConfig+0x134>
 8002f00:	d81b      	bhi.n	8002f3a <UART_SetConfig+0x13e>
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d00a      	beq.n	8002f1c <UART_SetConfig+0x120>
 8002f06:	d818      	bhi.n	8002f3a <UART_SetConfig+0x13e>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <UART_SetConfig+0x116>
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d00a      	beq.n	8002f26 <UART_SetConfig+0x12a>
 8002f10:	e013      	b.n	8002f3a <UART_SetConfig+0x13e>
 8002f12:	231b      	movs	r3, #27
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e02b      	b.n	8002f74 <UART_SetConfig+0x178>
 8002f1c:	231b      	movs	r3, #27
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	2202      	movs	r2, #2
 8002f22:	701a      	strb	r2, [r3, #0]
 8002f24:	e026      	b.n	8002f74 <UART_SetConfig+0x178>
 8002f26:	231b      	movs	r3, #27
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	e021      	b.n	8002f74 <UART_SetConfig+0x178>
 8002f30:	231b      	movs	r3, #27
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	2208      	movs	r2, #8
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	e01c      	b.n	8002f74 <UART_SetConfig+0x178>
 8002f3a:	231b      	movs	r3, #27
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	2210      	movs	r2, #16
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	e017      	b.n	8002f74 <UART_SetConfig+0x178>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a7a      	ldr	r2, [pc, #488]	; (8003134 <UART_SetConfig+0x338>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d104      	bne.n	8002f58 <UART_SetConfig+0x15c>
 8002f4e:	231b      	movs	r3, #27
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
 8002f56:	e00d      	b.n	8002f74 <UART_SetConfig+0x178>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a76      	ldr	r2, [pc, #472]	; (8003138 <UART_SetConfig+0x33c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d104      	bne.n	8002f6c <UART_SetConfig+0x170>
 8002f62:	231b      	movs	r3, #27
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e003      	b.n	8002f74 <UART_SetConfig+0x178>
 8002f6c:	231b      	movs	r3, #27
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	2210      	movs	r2, #16
 8002f72:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d000      	beq.n	8002f82 <UART_SetConfig+0x186>
 8002f80:	e065      	b.n	800304e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002f82:	231b      	movs	r3, #27
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d015      	beq.n	8002fb8 <UART_SetConfig+0x1bc>
 8002f8c:	dc18      	bgt.n	8002fc0 <UART_SetConfig+0x1c4>
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d00d      	beq.n	8002fae <UART_SetConfig+0x1b2>
 8002f92:	dc15      	bgt.n	8002fc0 <UART_SetConfig+0x1c4>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <UART_SetConfig+0x1a2>
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d005      	beq.n	8002fa8 <UART_SetConfig+0x1ac>
 8002f9c:	e010      	b.n	8002fc0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f9e:	f7ff fcf1 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	617b      	str	r3, [r7, #20]
        break;
 8002fa6:	e012      	b.n	8002fce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fa8:	4b64      	ldr	r3, [pc, #400]	; (800313c <UART_SetConfig+0x340>)
 8002faa:	617b      	str	r3, [r7, #20]
        break;
 8002fac:	e00f      	b.n	8002fce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fae:	f7ff fc5d 	bl	800286c <HAL_RCC_GetSysClockFreq>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	617b      	str	r3, [r7, #20]
        break;
 8002fb6:	e00a      	b.n	8002fce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	617b      	str	r3, [r7, #20]
        break;
 8002fbe:	e006      	b.n	8002fce <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002fc4:	231a      	movs	r3, #26
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	2201      	movs	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
        break;
 8002fcc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d100      	bne.n	8002fd6 <UART_SetConfig+0x1da>
 8002fd4:	e08d      	b.n	80030f2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fda:	4b59      	ldr	r3, [pc, #356]	; (8003140 <UART_SetConfig+0x344>)
 8002fdc:	0052      	lsls	r2, r2, #1
 8002fde:	5ad3      	ldrh	r3, [r2, r3]
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	6978      	ldr	r0, [r7, #20]
 8002fe4:	f7fd f88c 	bl	8000100 <__udivsi3>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	005a      	lsls	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	18d2      	adds	r2, r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	0010      	movs	r0, r2
 8002ffc:	f7fd f880 	bl	8000100 <__udivsi3>
 8003000:	0003      	movs	r3, r0
 8003002:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b0f      	cmp	r3, #15
 8003008:	d91c      	bls.n	8003044 <UART_SetConfig+0x248>
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	025b      	lsls	r3, r3, #9
 8003010:	429a      	cmp	r2, r3
 8003012:	d217      	bcs.n	8003044 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	b29a      	uxth	r2, r3
 8003018:	200e      	movs	r0, #14
 800301a:	183b      	adds	r3, r7, r0
 800301c:	210f      	movs	r1, #15
 800301e:	438a      	bics	r2, r1
 8003020:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	b29b      	uxth	r3, r3
 8003028:	2207      	movs	r2, #7
 800302a:	4013      	ands	r3, r2
 800302c:	b299      	uxth	r1, r3
 800302e:	183b      	adds	r3, r7, r0
 8003030:	183a      	adds	r2, r7, r0
 8003032:	8812      	ldrh	r2, [r2, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	183a      	adds	r2, r7, r0
 800303e:	8812      	ldrh	r2, [r2, #0]
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	e056      	b.n	80030f2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003044:	231a      	movs	r3, #26
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	2201      	movs	r2, #1
 800304a:	701a      	strb	r2, [r3, #0]
 800304c:	e051      	b.n	80030f2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800304e:	231b      	movs	r3, #27
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d015      	beq.n	8003084 <UART_SetConfig+0x288>
 8003058:	dc18      	bgt.n	800308c <UART_SetConfig+0x290>
 800305a:	2b04      	cmp	r3, #4
 800305c:	d00d      	beq.n	800307a <UART_SetConfig+0x27e>
 800305e:	dc15      	bgt.n	800308c <UART_SetConfig+0x290>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <UART_SetConfig+0x26e>
 8003064:	2b02      	cmp	r3, #2
 8003066:	d005      	beq.n	8003074 <UART_SetConfig+0x278>
 8003068:	e010      	b.n	800308c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306a:	f7ff fc8b 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 800306e:	0003      	movs	r3, r0
 8003070:	617b      	str	r3, [r7, #20]
        break;
 8003072:	e012      	b.n	800309a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b31      	ldr	r3, [pc, #196]	; (800313c <UART_SetConfig+0x340>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e00f      	b.n	800309a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff fbf7 	bl	800286c <HAL_RCC_GetSysClockFreq>
 800307e:	0003      	movs	r3, r0
 8003080:	617b      	str	r3, [r7, #20]
        break;
 8003082:	e00a      	b.n	800309a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	617b      	str	r3, [r7, #20]
        break;
 800308a:	e006      	b.n	800309a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003090:	231a      	movs	r3, #26
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]
        break;
 8003098:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d028      	beq.n	80030f2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030a4:	4b26      	ldr	r3, [pc, #152]	; (8003140 <UART_SetConfig+0x344>)
 80030a6:	0052      	lsls	r2, r2, #1
 80030a8:	5ad3      	ldrh	r3, [r2, r3]
 80030aa:	0019      	movs	r1, r3
 80030ac:	6978      	ldr	r0, [r7, #20]
 80030ae:	f7fd f827 	bl	8000100 <__udivsi3>
 80030b2:	0003      	movs	r3, r0
 80030b4:	001a      	movs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	18d2      	adds	r2, r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	0019      	movs	r1, r3
 80030c4:	0010      	movs	r0, r2
 80030c6:	f7fd f81b 	bl	8000100 <__udivsi3>
 80030ca:	0003      	movs	r3, r0
 80030cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b0f      	cmp	r3, #15
 80030d2:	d90a      	bls.n	80030ea <UART_SetConfig+0x2ee>
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	025b      	lsls	r3, r3, #9
 80030da:	429a      	cmp	r2, r3
 80030dc:	d205      	bcs.n	80030ea <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60da      	str	r2, [r3, #12]
 80030e8:	e003      	b.n	80030f2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80030ea:	231a      	movs	r3, #26
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	226a      	movs	r2, #106	; 0x6a
 80030f6:	2101      	movs	r1, #1
 80030f8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2268      	movs	r2, #104	; 0x68
 80030fe:	2101      	movs	r1, #1
 8003100:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800310e:	231a      	movs	r3, #26
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	781b      	ldrb	r3, [r3, #0]
}
 8003114:	0018      	movs	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	b008      	add	sp, #32
 800311a:	bd80      	pop	{r7, pc}
 800311c:	cfff69f3 	.word	0xcfff69f3
 8003120:	ffffcfff 	.word	0xffffcfff
 8003124:	11fff4ff 	.word	0x11fff4ff
 8003128:	40013800 	.word	0x40013800
 800312c:	40021000 	.word	0x40021000
 8003130:	40004400 	.word	0x40004400
 8003134:	40004800 	.word	0x40004800
 8003138:	40004c00 	.word	0x40004c00
 800313c:	00f42400 	.word	0x00f42400
 8003140:	08003ad4 	.word	0x08003ad4

08003144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	2201      	movs	r2, #1
 8003152:	4013      	ands	r3, r2
 8003154:	d00b      	beq.n	800316e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a4a      	ldr	r2, [pc, #296]	; (8003288 <UART_AdvFeatureConfig+0x144>)
 800315e:	4013      	ands	r3, r2
 8003160:	0019      	movs	r1, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	2202      	movs	r2, #2
 8003174:	4013      	ands	r3, r2
 8003176:	d00b      	beq.n	8003190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4a43      	ldr	r2, [pc, #268]	; (800328c <UART_AdvFeatureConfig+0x148>)
 8003180:	4013      	ands	r3, r2
 8003182:	0019      	movs	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	2204      	movs	r2, #4
 8003196:	4013      	ands	r3, r2
 8003198:	d00b      	beq.n	80031b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4a3b      	ldr	r2, [pc, #236]	; (8003290 <UART_AdvFeatureConfig+0x14c>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	0019      	movs	r1, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	2208      	movs	r2, #8
 80031b8:	4013      	ands	r3, r2
 80031ba:	d00b      	beq.n	80031d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4a34      	ldr	r2, [pc, #208]	; (8003294 <UART_AdvFeatureConfig+0x150>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	0019      	movs	r1, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	2210      	movs	r2, #16
 80031da:	4013      	ands	r3, r2
 80031dc:	d00b      	beq.n	80031f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4a2c      	ldr	r2, [pc, #176]	; (8003298 <UART_AdvFeatureConfig+0x154>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	0019      	movs	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	2220      	movs	r2, #32
 80031fc:	4013      	ands	r3, r2
 80031fe:	d00b      	beq.n	8003218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	4a25      	ldr	r2, [pc, #148]	; (800329c <UART_AdvFeatureConfig+0x158>)
 8003208:	4013      	ands	r3, r2
 800320a:	0019      	movs	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	2240      	movs	r2, #64	; 0x40
 800321e:	4013      	ands	r3, r2
 8003220:	d01d      	beq.n	800325e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a1d      	ldr	r2, [pc, #116]	; (80032a0 <UART_AdvFeatureConfig+0x15c>)
 800322a:	4013      	ands	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	035b      	lsls	r3, r3, #13
 8003242:	429a      	cmp	r2, r3
 8003244:	d10b      	bne.n	800325e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a15      	ldr	r2, [pc, #84]	; (80032a4 <UART_AdvFeatureConfig+0x160>)
 800324e:	4013      	ands	r3, r2
 8003250:	0019      	movs	r1, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	2280      	movs	r2, #128	; 0x80
 8003264:	4013      	ands	r3, r2
 8003266:	d00b      	beq.n	8003280 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4a0e      	ldr	r2, [pc, #56]	; (80032a8 <UART_AdvFeatureConfig+0x164>)
 8003270:	4013      	ands	r3, r2
 8003272:	0019      	movs	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	605a      	str	r2, [r3, #4]
  }
}
 8003280:	46c0      	nop			; (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	b002      	add	sp, #8
 8003286:	bd80      	pop	{r7, pc}
 8003288:	fffdffff 	.word	0xfffdffff
 800328c:	fffeffff 	.word	0xfffeffff
 8003290:	fffbffff 	.word	0xfffbffff
 8003294:	ffff7fff 	.word	0xffff7fff
 8003298:	ffffefff 	.word	0xffffefff
 800329c:	ffffdfff 	.word	0xffffdfff
 80032a0:	ffefffff 	.word	0xffefffff
 80032a4:	ff9fffff 	.word	0xff9fffff
 80032a8:	fff7ffff 	.word	0xfff7ffff

080032ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2290      	movs	r2, #144	; 0x90
 80032b8:	2100      	movs	r1, #0
 80032ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032bc:	f7fd fec4 	bl	8001048 <HAL_GetTick>
 80032c0:	0003      	movs	r3, r0
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2208      	movs	r2, #8
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d10c      	bne.n	80032ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2280      	movs	r2, #128	; 0x80
 80032d6:	0391      	lsls	r1, r2, #14
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4a1a      	ldr	r2, [pc, #104]	; (8003344 <UART_CheckIdleState+0x98>)
 80032dc:	9200      	str	r2, [sp, #0]
 80032de:	2200      	movs	r2, #0
 80032e0:	f000 f832 	bl	8003348 <UART_WaitOnFlagUntilTimeout>
 80032e4:	1e03      	subs	r3, r0, #0
 80032e6:	d001      	beq.n	80032ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e026      	b.n	800333a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2204      	movs	r2, #4
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d10c      	bne.n	8003314 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2280      	movs	r2, #128	; 0x80
 80032fe:	03d1      	lsls	r1, r2, #15
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4a10      	ldr	r2, [pc, #64]	; (8003344 <UART_CheckIdleState+0x98>)
 8003304:	9200      	str	r2, [sp, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	f000 f81e 	bl	8003348 <UART_WaitOnFlagUntilTimeout>
 800330c:	1e03      	subs	r3, r0, #0
 800330e:	d001      	beq.n	8003314 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e012      	b.n	800333a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2288      	movs	r2, #136	; 0x88
 8003318:	2120      	movs	r1, #32
 800331a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	228c      	movs	r2, #140	; 0x8c
 8003320:	2120      	movs	r1, #32
 8003322:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2284      	movs	r2, #132	; 0x84
 8003334:	2100      	movs	r1, #0
 8003336:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b004      	add	sp, #16
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	01ffffff 	.word	0x01ffffff

08003348 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b094      	sub	sp, #80	; 0x50
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	1dfb      	adds	r3, r7, #7
 8003356:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003358:	e0a7      	b.n	80034aa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800335c:	3301      	adds	r3, #1
 800335e:	d100      	bne.n	8003362 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003360:	e0a3      	b.n	80034aa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003362:	f7fd fe71 	bl	8001048 <HAL_GetTick>
 8003366:	0002      	movs	r2, r0
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800336e:	429a      	cmp	r2, r3
 8003370:	d302      	bcc.n	8003378 <UART_WaitOnFlagUntilTimeout+0x30>
 8003372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003374:	2b00      	cmp	r3, #0
 8003376:	d13f      	bne.n	80033f8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003378:	f3ef 8310 	mrs	r3, PRIMASK
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003380:	647b      	str	r3, [r7, #68]	; 0x44
 8003382:	2301      	movs	r3, #1
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003388:	f383 8810 	msr	PRIMASK, r3
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	494e      	ldr	r1, [pc, #312]	; (80034d4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800339a:	400a      	ands	r2, r1
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	f383 8810 	msr	PRIMASK, r3
}
 80033a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033aa:	f3ef 8310 	mrs	r3, PRIMASK
 80033ae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80033b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b2:	643b      	str	r3, [r7, #64]	; 0x40
 80033b4:	2301      	movs	r3, #1
 80033b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ba:	f383 8810 	msr	PRIMASK, r3
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2101      	movs	r1, #1
 80033cc:	438a      	bics	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d6:	f383 8810 	msr	PRIMASK, r3
}
 80033da:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2288      	movs	r2, #136	; 0x88
 80033e0:	2120      	movs	r1, #32
 80033e2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	228c      	movs	r2, #140	; 0x8c
 80033e8:	2120      	movs	r1, #32
 80033ea:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2284      	movs	r2, #132	; 0x84
 80033f0:	2100      	movs	r1, #0
 80033f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e069      	b.n	80034cc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2204      	movs	r2, #4
 8003400:	4013      	ands	r3, r2
 8003402:	d052      	beq.n	80034aa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	2380      	movs	r3, #128	; 0x80
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	401a      	ands	r2, r3
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	429a      	cmp	r2, r3
 8003416:	d148      	bne.n	80034aa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2280      	movs	r2, #128	; 0x80
 800341e:	0112      	lsls	r2, r2, #4
 8003420:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003422:	f3ef 8310 	mrs	r3, PRIMASK
 8003426:	613b      	str	r3, [r7, #16]
  return(result);
 8003428:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800342a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800342c:	2301      	movs	r3, #1
 800342e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f383 8810 	msr	PRIMASK, r3
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4924      	ldr	r1, [pc, #144]	; (80034d4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003444:	400a      	ands	r2, r1
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800344a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f383 8810 	msr	PRIMASK, r3
}
 8003452:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003454:	f3ef 8310 	mrs	r3, PRIMASK
 8003458:	61fb      	str	r3, [r7, #28]
  return(result);
 800345a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345c:	64bb      	str	r3, [r7, #72]	; 0x48
 800345e:	2301      	movs	r3, #1
 8003460:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f383 8810 	msr	PRIMASK, r3
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2101      	movs	r1, #1
 8003476:	438a      	bics	r2, r1
 8003478:	609a      	str	r2, [r3, #8]
 800347a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	f383 8810 	msr	PRIMASK, r3
}
 8003484:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2288      	movs	r2, #136	; 0x88
 800348a:	2120      	movs	r1, #32
 800348c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	228c      	movs	r2, #140	; 0x8c
 8003492:	2120      	movs	r1, #32
 8003494:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2290      	movs	r2, #144	; 0x90
 800349a:	2120      	movs	r1, #32
 800349c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2284      	movs	r2, #132	; 0x84
 80034a2:	2100      	movs	r1, #0
 80034a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e010      	b.n	80034cc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	4013      	ands	r3, r2
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	425a      	negs	r2, r3
 80034ba:	4153      	adcs	r3, r2
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	001a      	movs	r2, r3
 80034c0:	1dfb      	adds	r3, r7, #7
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d100      	bne.n	80034ca <UART_WaitOnFlagUntilTimeout+0x182>
 80034c8:	e747      	b.n	800335a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	0018      	movs	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b014      	add	sp, #80	; 0x50
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	fffffe5f 	.word	0xfffffe5f

080034d8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e05d      	b.n	80035ac <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2288      	movs	r2, #136	; 0x88
 80034f4:	589b      	ldr	r3, [r3, r2]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d107      	bne.n	800350a <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2284      	movs	r2, #132	; 0x84
 80034fe:	2100      	movs	r1, #0
 8003500:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	0018      	movs	r0, r3
 8003506:	f7fd fc1d 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2288      	movs	r2, #136	; 0x88
 800350e:	2124      	movs	r1, #36	; 0x24
 8003510:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2101      	movs	r1, #1
 800351e:	438a      	bics	r2, r1
 8003520:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	0018      	movs	r0, r3
 8003526:	f7ff fc69 	bl	8002dfc <UART_SetConfig>
 800352a:	0003      	movs	r3, r0
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_RS485Ex_Init+0x5c>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e03b      	b.n	80035ac <HAL_RS485Ex_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_RS485Ex_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	0018      	movs	r0, r3
 8003540:	f7ff fe00 	bl	8003144 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2180      	movs	r1, #128	; 0x80
 8003550:	01c9      	lsls	r1, r1, #7
 8003552:	430a      	orrs	r2, r1
 8003554:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	4a15      	ldr	r2, [pc, #84]	; (80035b4 <HAL_RS485Ex_Init+0xdc>)
 800355e:	4013      	ands	r3, r2
 8003560:	0019      	movs	r1, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	430a      	orrs	r2, r1
 800356a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	055b      	lsls	r3, r3, #21
 8003570:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	041b      	lsls	r3, r3, #16
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a0d      	ldr	r2, [pc, #52]	; (80035b8 <HAL_RS485Ex_Init+0xe0>)
 8003584:	4013      	ands	r3, r2
 8003586:	0019      	movs	r1, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	430a      	orrs	r2, r1
 8003590:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2101      	movs	r1, #1
 800359e:	430a      	orrs	r2, r1
 80035a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff fe81 	bl	80032ac <UART_CheckIdleState>
 80035aa:	0003      	movs	r3, r0
}
 80035ac:	0018      	movs	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b006      	add	sp, #24
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	ffff7fff 	.word	0xffff7fff
 80035b8:	fc00ffff 	.word	0xfc00ffff

080035bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2284      	movs	r2, #132	; 0x84
 80035c8:	5c9b      	ldrb	r3, [r3, r2]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e027      	b.n	8003622 <HAL_UARTEx_DisableFifoMode+0x66>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2284      	movs	r2, #132	; 0x84
 80035d6:	2101      	movs	r1, #1
 80035d8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2288      	movs	r2, #136	; 0x88
 80035de:	2124      	movs	r1, #36	; 0x24
 80035e0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2101      	movs	r1, #1
 80035f6:	438a      	bics	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4a0b      	ldr	r2, [pc, #44]	; (800362c <HAL_UARTEx_DisableFifoMode+0x70>)
 80035fe:	4013      	ands	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2288      	movs	r2, #136	; 0x88
 8003614:	2120      	movs	r1, #32
 8003616:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2284      	movs	r2, #132	; 0x84
 800361c:	2100      	movs	r1, #0
 800361e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	0018      	movs	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	b004      	add	sp, #16
 8003628:	bd80      	pop	{r7, pc}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	dfffffff 	.word	0xdfffffff

08003630 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2284      	movs	r2, #132	; 0x84
 800363e:	5c9b      	ldrb	r3, [r3, r2]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003644:	2302      	movs	r3, #2
 8003646:	e02e      	b.n	80036a6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2284      	movs	r2, #132	; 0x84
 800364c:	2101      	movs	r1, #1
 800364e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2288      	movs	r2, #136	; 0x88
 8003654:	2124      	movs	r1, #36	; 0x24
 8003656:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2101      	movs	r1, #1
 800366c:	438a      	bics	r2, r1
 800366e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	08d9      	lsrs	r1, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	0018      	movs	r0, r3
 8003688:	f000 f854 	bl	8003734 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2288      	movs	r2, #136	; 0x88
 8003698:	2120      	movs	r1, #32
 800369a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2284      	movs	r2, #132	; 0x84
 80036a0:	2100      	movs	r1, #0
 80036a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	0018      	movs	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b004      	add	sp, #16
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2284      	movs	r2, #132	; 0x84
 80036be:	5c9b      	ldrb	r3, [r3, r2]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e02f      	b.n	8003728 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2284      	movs	r2, #132	; 0x84
 80036cc:	2101      	movs	r1, #1
 80036ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2288      	movs	r2, #136	; 0x88
 80036d4:	2124      	movs	r1, #36	; 0x24
 80036d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2101      	movs	r1, #1
 80036ec:	438a      	bics	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	4a0e      	ldr	r2, [pc, #56]	; (8003730 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	0019      	movs	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	0018      	movs	r0, r3
 800370a:	f000 f813 	bl	8003734 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2288      	movs	r2, #136	; 0x88
 800371a:	2120      	movs	r1, #32
 800371c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2284      	movs	r2, #132	; 0x84
 8003722:	2100      	movs	r1, #0
 8003724:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	0018      	movs	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	b004      	add	sp, #16
 800372e:	bd80      	pop	{r7, pc}
 8003730:	f1ffffff 	.word	0xf1ffffff

08003734 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003740:	2b00      	cmp	r3, #0
 8003742:	d108      	bne.n	8003756 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	226a      	movs	r2, #106	; 0x6a
 8003748:	2101      	movs	r1, #1
 800374a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2268      	movs	r2, #104	; 0x68
 8003750:	2101      	movs	r1, #1
 8003752:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003754:	e043      	b.n	80037de <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003756:	260f      	movs	r6, #15
 8003758:	19bb      	adds	r3, r7, r6
 800375a:	2208      	movs	r2, #8
 800375c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800375e:	200e      	movs	r0, #14
 8003760:	183b      	adds	r3, r7, r0
 8003762:	2208      	movs	r2, #8
 8003764:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	0e5b      	lsrs	r3, r3, #25
 800376e:	b2da      	uxtb	r2, r3
 8003770:	240d      	movs	r4, #13
 8003772:	193b      	adds	r3, r7, r4
 8003774:	2107      	movs	r1, #7
 8003776:	400a      	ands	r2, r1
 8003778:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	0f5b      	lsrs	r3, r3, #29
 8003782:	b2da      	uxtb	r2, r3
 8003784:	250c      	movs	r5, #12
 8003786:	197b      	adds	r3, r7, r5
 8003788:	2107      	movs	r1, #7
 800378a:	400a      	ands	r2, r1
 800378c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800378e:	183b      	adds	r3, r7, r0
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	197a      	adds	r2, r7, r5
 8003794:	7812      	ldrb	r2, [r2, #0]
 8003796:	4914      	ldr	r1, [pc, #80]	; (80037e8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003798:	5c8a      	ldrb	r2, [r1, r2]
 800379a:	435a      	muls	r2, r3
 800379c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800379e:	197b      	adds	r3, r7, r5
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	4a12      	ldr	r2, [pc, #72]	; (80037ec <UARTEx_SetNbDataToProcess+0xb8>)
 80037a4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037a6:	0019      	movs	r1, r3
 80037a8:	f7fc fd34 	bl	8000214 <__divsi3>
 80037ac:	0003      	movs	r3, r0
 80037ae:	b299      	uxth	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	226a      	movs	r2, #106	; 0x6a
 80037b4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037b6:	19bb      	adds	r3, r7, r6
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	193a      	adds	r2, r7, r4
 80037bc:	7812      	ldrb	r2, [r2, #0]
 80037be:	490a      	ldr	r1, [pc, #40]	; (80037e8 <UARTEx_SetNbDataToProcess+0xb4>)
 80037c0:	5c8a      	ldrb	r2, [r1, r2]
 80037c2:	435a      	muls	r2, r3
 80037c4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80037c6:	193b      	adds	r3, r7, r4
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	4a08      	ldr	r2, [pc, #32]	; (80037ec <UARTEx_SetNbDataToProcess+0xb8>)
 80037cc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037ce:	0019      	movs	r1, r3
 80037d0:	f7fc fd20 	bl	8000214 <__divsi3>
 80037d4:	0003      	movs	r3, r0
 80037d6:	b299      	uxth	r1, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2268      	movs	r2, #104	; 0x68
 80037dc:	5299      	strh	r1, [r3, r2]
}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b005      	add	sp, #20
 80037e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	08003aec 	.word	0x08003aec
 80037ec:	08003af4 	.word	0x08003af4

080037f0 <__libc_init_array>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2600      	movs	r6, #0
 80037f4:	4d0c      	ldr	r5, [pc, #48]	; (8003828 <__libc_init_array+0x38>)
 80037f6:	4c0d      	ldr	r4, [pc, #52]	; (800382c <__libc_init_array+0x3c>)
 80037f8:	1b64      	subs	r4, r4, r5
 80037fa:	10a4      	asrs	r4, r4, #2
 80037fc:	42a6      	cmp	r6, r4
 80037fe:	d109      	bne.n	8003814 <__libc_init_array+0x24>
 8003800:	2600      	movs	r6, #0
 8003802:	f000 f82b 	bl	800385c <_init>
 8003806:	4d0a      	ldr	r5, [pc, #40]	; (8003830 <__libc_init_array+0x40>)
 8003808:	4c0a      	ldr	r4, [pc, #40]	; (8003834 <__libc_init_array+0x44>)
 800380a:	1b64      	subs	r4, r4, r5
 800380c:	10a4      	asrs	r4, r4, #2
 800380e:	42a6      	cmp	r6, r4
 8003810:	d105      	bne.n	800381e <__libc_init_array+0x2e>
 8003812:	bd70      	pop	{r4, r5, r6, pc}
 8003814:	00b3      	lsls	r3, r6, #2
 8003816:	58eb      	ldr	r3, [r5, r3]
 8003818:	4798      	blx	r3
 800381a:	3601      	adds	r6, #1
 800381c:	e7ee      	b.n	80037fc <__libc_init_array+0xc>
 800381e:	00b3      	lsls	r3, r6, #2
 8003820:	58eb      	ldr	r3, [r5, r3]
 8003822:	4798      	blx	r3
 8003824:	3601      	adds	r6, #1
 8003826:	e7f2      	b.n	800380e <__libc_init_array+0x1e>
 8003828:	08003afc 	.word	0x08003afc
 800382c:	08003afc 	.word	0x08003afc
 8003830:	08003afc 	.word	0x08003afc
 8003834:	08003b00 	.word	0x08003b00

08003838 <memcpy>:
 8003838:	2300      	movs	r3, #0
 800383a:	b510      	push	{r4, lr}
 800383c:	429a      	cmp	r2, r3
 800383e:	d100      	bne.n	8003842 <memcpy+0xa>
 8003840:	bd10      	pop	{r4, pc}
 8003842:	5ccc      	ldrb	r4, [r1, r3]
 8003844:	54c4      	strb	r4, [r0, r3]
 8003846:	3301      	adds	r3, #1
 8003848:	e7f8      	b.n	800383c <memcpy+0x4>

0800384a <memset>:
 800384a:	0003      	movs	r3, r0
 800384c:	1882      	adds	r2, r0, r2
 800384e:	4293      	cmp	r3, r2
 8003850:	d100      	bne.n	8003854 <memset+0xa>
 8003852:	4770      	bx	lr
 8003854:	7019      	strb	r1, [r3, #0]
 8003856:	3301      	adds	r3, #1
 8003858:	e7f9      	b.n	800384e <memset+0x4>
	...

0800385c <_init>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003862:	bc08      	pop	{r3}
 8003864:	469e      	mov	lr, r3
 8003866:	4770      	bx	lr

08003868 <_fini>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr
