
adc_matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e64  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800508c  0800508c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800508c  0800508c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800508c  0800508c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005090  08005090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000070  08005104  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08005104  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7c8  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002086  00000000  00000000  0002d860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002f8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  00030390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d25  00000000  00000000  00030d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da50  00000000  00000000  00047a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f000  00000000  00000000  000554d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e44d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002954  00000000  00000000  000e4528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004f04 	.word	0x08004f04

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08004f04 	.word	0x08004f04

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_ddiv>:
 8000400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000402:	4657      	mov	r7, sl
 8000404:	464e      	mov	r6, r9
 8000406:	4645      	mov	r5, r8
 8000408:	46de      	mov	lr, fp
 800040a:	b5e0      	push	{r5, r6, r7, lr}
 800040c:	4681      	mov	r9, r0
 800040e:	0005      	movs	r5, r0
 8000410:	030c      	lsls	r4, r1, #12
 8000412:	0048      	lsls	r0, r1, #1
 8000414:	4692      	mov	sl, r2
 8000416:	001f      	movs	r7, r3
 8000418:	b085      	sub	sp, #20
 800041a:	0b24      	lsrs	r4, r4, #12
 800041c:	0d40      	lsrs	r0, r0, #21
 800041e:	0fce      	lsrs	r6, r1, #31
 8000420:	2800      	cmp	r0, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_ddiv+0x26>
 8000424:	e156      	b.n	80006d4 <__aeabi_ddiv+0x2d4>
 8000426:	4bd4      	ldr	r3, [pc, #848]	; (8000778 <__aeabi_ddiv+0x378>)
 8000428:	4298      	cmp	r0, r3
 800042a:	d100      	bne.n	800042e <__aeabi_ddiv+0x2e>
 800042c:	e172      	b.n	8000714 <__aeabi_ddiv+0x314>
 800042e:	0f6b      	lsrs	r3, r5, #29
 8000430:	00e4      	lsls	r4, r4, #3
 8000432:	431c      	orrs	r4, r3
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	041b      	lsls	r3, r3, #16
 8000438:	4323      	orrs	r3, r4
 800043a:	4698      	mov	r8, r3
 800043c:	4bcf      	ldr	r3, [pc, #828]	; (800077c <__aeabi_ddiv+0x37c>)
 800043e:	00ed      	lsls	r5, r5, #3
 8000440:	469b      	mov	fp, r3
 8000442:	2300      	movs	r3, #0
 8000444:	4699      	mov	r9, r3
 8000446:	4483      	add	fp, r0
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	033c      	lsls	r4, r7, #12
 800044c:	007b      	lsls	r3, r7, #1
 800044e:	4650      	mov	r0, sl
 8000450:	0b24      	lsrs	r4, r4, #12
 8000452:	0d5b      	lsrs	r3, r3, #21
 8000454:	0fff      	lsrs	r7, r7, #31
 8000456:	2b00      	cmp	r3, #0
 8000458:	d100      	bne.n	800045c <__aeabi_ddiv+0x5c>
 800045a:	e11f      	b.n	800069c <__aeabi_ddiv+0x29c>
 800045c:	4ac6      	ldr	r2, [pc, #792]	; (8000778 <__aeabi_ddiv+0x378>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d100      	bne.n	8000464 <__aeabi_ddiv+0x64>
 8000462:	e162      	b.n	800072a <__aeabi_ddiv+0x32a>
 8000464:	49c5      	ldr	r1, [pc, #788]	; (800077c <__aeabi_ddiv+0x37c>)
 8000466:	0f42      	lsrs	r2, r0, #29
 8000468:	468c      	mov	ip, r1
 800046a:	00e4      	lsls	r4, r4, #3
 800046c:	4659      	mov	r1, fp
 800046e:	4314      	orrs	r4, r2
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	4463      	add	r3, ip
 8000474:	0412      	lsls	r2, r2, #16
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	4314      	orrs	r4, r2
 800047a:	469b      	mov	fp, r3
 800047c:	00c2      	lsls	r2, r0, #3
 800047e:	2000      	movs	r0, #0
 8000480:	0033      	movs	r3, r6
 8000482:	407b      	eors	r3, r7
 8000484:	469a      	mov	sl, r3
 8000486:	464b      	mov	r3, r9
 8000488:	2b0f      	cmp	r3, #15
 800048a:	d827      	bhi.n	80004dc <__aeabi_ddiv+0xdc>
 800048c:	49bc      	ldr	r1, [pc, #752]	; (8000780 <__aeabi_ddiv+0x380>)
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	58cb      	ldr	r3, [r1, r3]
 8000492:	469f      	mov	pc, r3
 8000494:	46b2      	mov	sl, r6
 8000496:	9b00      	ldr	r3, [sp, #0]
 8000498:	2b02      	cmp	r3, #2
 800049a:	d016      	beq.n	80004ca <__aeabi_ddiv+0xca>
 800049c:	2b03      	cmp	r3, #3
 800049e:	d100      	bne.n	80004a2 <__aeabi_ddiv+0xa2>
 80004a0:	e28e      	b.n	80009c0 <__aeabi_ddiv+0x5c0>
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d000      	beq.n	80004a8 <__aeabi_ddiv+0xa8>
 80004a6:	e0d9      	b.n	800065c <__aeabi_ddiv+0x25c>
 80004a8:	2300      	movs	r3, #0
 80004aa:	2400      	movs	r4, #0
 80004ac:	2500      	movs	r5, #0
 80004ae:	4652      	mov	r2, sl
 80004b0:	051b      	lsls	r3, r3, #20
 80004b2:	4323      	orrs	r3, r4
 80004b4:	07d2      	lsls	r2, r2, #31
 80004b6:	4313      	orrs	r3, r2
 80004b8:	0028      	movs	r0, r5
 80004ba:	0019      	movs	r1, r3
 80004bc:	b005      	add	sp, #20
 80004be:	bcf0      	pop	{r4, r5, r6, r7}
 80004c0:	46bb      	mov	fp, r7
 80004c2:	46b2      	mov	sl, r6
 80004c4:	46a9      	mov	r9, r5
 80004c6:	46a0      	mov	r8, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	2400      	movs	r4, #0
 80004cc:	2500      	movs	r5, #0
 80004ce:	4baa      	ldr	r3, [pc, #680]	; (8000778 <__aeabi_ddiv+0x378>)
 80004d0:	e7ed      	b.n	80004ae <__aeabi_ddiv+0xae>
 80004d2:	46ba      	mov	sl, r7
 80004d4:	46a0      	mov	r8, r4
 80004d6:	0015      	movs	r5, r2
 80004d8:	9000      	str	r0, [sp, #0]
 80004da:	e7dc      	b.n	8000496 <__aeabi_ddiv+0x96>
 80004dc:	4544      	cmp	r4, r8
 80004de:	d200      	bcs.n	80004e2 <__aeabi_ddiv+0xe2>
 80004e0:	e1c7      	b.n	8000872 <__aeabi_ddiv+0x472>
 80004e2:	d100      	bne.n	80004e6 <__aeabi_ddiv+0xe6>
 80004e4:	e1c2      	b.n	800086c <__aeabi_ddiv+0x46c>
 80004e6:	2301      	movs	r3, #1
 80004e8:	425b      	negs	r3, r3
 80004ea:	469c      	mov	ip, r3
 80004ec:	002e      	movs	r6, r5
 80004ee:	4640      	mov	r0, r8
 80004f0:	2500      	movs	r5, #0
 80004f2:	44e3      	add	fp, ip
 80004f4:	0223      	lsls	r3, r4, #8
 80004f6:	0e14      	lsrs	r4, r2, #24
 80004f8:	431c      	orrs	r4, r3
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	4699      	mov	r9, r3
 80004fe:	0423      	lsls	r3, r4, #16
 8000500:	0c1f      	lsrs	r7, r3, #16
 8000502:	0212      	lsls	r2, r2, #8
 8000504:	4649      	mov	r1, r9
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9701      	str	r7, [sp, #4]
 800050a:	f7ff fe89 	bl	8000220 <__aeabi_uidivmod>
 800050e:	0002      	movs	r2, r0
 8000510:	437a      	muls	r2, r7
 8000512:	040b      	lsls	r3, r1, #16
 8000514:	0c31      	lsrs	r1, r6, #16
 8000516:	4680      	mov	r8, r0
 8000518:	4319      	orrs	r1, r3
 800051a:	428a      	cmp	r2, r1
 800051c:	d907      	bls.n	800052e <__aeabi_ddiv+0x12e>
 800051e:	2301      	movs	r3, #1
 8000520:	425b      	negs	r3, r3
 8000522:	469c      	mov	ip, r3
 8000524:	1909      	adds	r1, r1, r4
 8000526:	44e0      	add	r8, ip
 8000528:	428c      	cmp	r4, r1
 800052a:	d800      	bhi.n	800052e <__aeabi_ddiv+0x12e>
 800052c:	e207      	b.n	800093e <__aeabi_ddiv+0x53e>
 800052e:	1a88      	subs	r0, r1, r2
 8000530:	4649      	mov	r1, r9
 8000532:	f7ff fe75 	bl	8000220 <__aeabi_uidivmod>
 8000536:	0409      	lsls	r1, r1, #16
 8000538:	468c      	mov	ip, r1
 800053a:	0431      	lsls	r1, r6, #16
 800053c:	4666      	mov	r6, ip
 800053e:	9a01      	ldr	r2, [sp, #4]
 8000540:	0c09      	lsrs	r1, r1, #16
 8000542:	4342      	muls	r2, r0
 8000544:	0003      	movs	r3, r0
 8000546:	4331      	orrs	r1, r6
 8000548:	428a      	cmp	r2, r1
 800054a:	d904      	bls.n	8000556 <__aeabi_ddiv+0x156>
 800054c:	1909      	adds	r1, r1, r4
 800054e:	3b01      	subs	r3, #1
 8000550:	428c      	cmp	r4, r1
 8000552:	d800      	bhi.n	8000556 <__aeabi_ddiv+0x156>
 8000554:	e1ed      	b.n	8000932 <__aeabi_ddiv+0x532>
 8000556:	1a88      	subs	r0, r1, r2
 8000558:	4642      	mov	r2, r8
 800055a:	0412      	lsls	r2, r2, #16
 800055c:	431a      	orrs	r2, r3
 800055e:	4690      	mov	r8, r2
 8000560:	4641      	mov	r1, r8
 8000562:	9b00      	ldr	r3, [sp, #0]
 8000564:	040e      	lsls	r6, r1, #16
 8000566:	0c1b      	lsrs	r3, r3, #16
 8000568:	001f      	movs	r7, r3
 800056a:	9302      	str	r3, [sp, #8]
 800056c:	9b00      	ldr	r3, [sp, #0]
 800056e:	0c36      	lsrs	r6, r6, #16
 8000570:	041b      	lsls	r3, r3, #16
 8000572:	0c19      	lsrs	r1, r3, #16
 8000574:	000b      	movs	r3, r1
 8000576:	4373      	muls	r3, r6
 8000578:	0c12      	lsrs	r2, r2, #16
 800057a:	437e      	muls	r6, r7
 800057c:	9103      	str	r1, [sp, #12]
 800057e:	4351      	muls	r1, r2
 8000580:	437a      	muls	r2, r7
 8000582:	0c1f      	lsrs	r7, r3, #16
 8000584:	46bc      	mov	ip, r7
 8000586:	1876      	adds	r6, r6, r1
 8000588:	4466      	add	r6, ip
 800058a:	42b1      	cmp	r1, r6
 800058c:	d903      	bls.n	8000596 <__aeabi_ddiv+0x196>
 800058e:	2180      	movs	r1, #128	; 0x80
 8000590:	0249      	lsls	r1, r1, #9
 8000592:	468c      	mov	ip, r1
 8000594:	4462      	add	r2, ip
 8000596:	0c31      	lsrs	r1, r6, #16
 8000598:	188a      	adds	r2, r1, r2
 800059a:	0431      	lsls	r1, r6, #16
 800059c:	041e      	lsls	r6, r3, #16
 800059e:	0c36      	lsrs	r6, r6, #16
 80005a0:	198e      	adds	r6, r1, r6
 80005a2:	4290      	cmp	r0, r2
 80005a4:	d302      	bcc.n	80005ac <__aeabi_ddiv+0x1ac>
 80005a6:	d112      	bne.n	80005ce <__aeabi_ddiv+0x1ce>
 80005a8:	42b5      	cmp	r5, r6
 80005aa:	d210      	bcs.n	80005ce <__aeabi_ddiv+0x1ce>
 80005ac:	4643      	mov	r3, r8
 80005ae:	1e59      	subs	r1, r3, #1
 80005b0:	9b00      	ldr	r3, [sp, #0]
 80005b2:	469c      	mov	ip, r3
 80005b4:	4465      	add	r5, ip
 80005b6:	001f      	movs	r7, r3
 80005b8:	429d      	cmp	r5, r3
 80005ba:	419b      	sbcs	r3, r3
 80005bc:	425b      	negs	r3, r3
 80005be:	191b      	adds	r3, r3, r4
 80005c0:	18c0      	adds	r0, r0, r3
 80005c2:	4284      	cmp	r4, r0
 80005c4:	d200      	bcs.n	80005c8 <__aeabi_ddiv+0x1c8>
 80005c6:	e1a0      	b.n	800090a <__aeabi_ddiv+0x50a>
 80005c8:	d100      	bne.n	80005cc <__aeabi_ddiv+0x1cc>
 80005ca:	e19b      	b.n	8000904 <__aeabi_ddiv+0x504>
 80005cc:	4688      	mov	r8, r1
 80005ce:	1bae      	subs	r6, r5, r6
 80005d0:	42b5      	cmp	r5, r6
 80005d2:	41ad      	sbcs	r5, r5
 80005d4:	1a80      	subs	r0, r0, r2
 80005d6:	426d      	negs	r5, r5
 80005d8:	1b40      	subs	r0, r0, r5
 80005da:	4284      	cmp	r4, r0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_ddiv+0x1e0>
 80005de:	e1d5      	b.n	800098c <__aeabi_ddiv+0x58c>
 80005e0:	4649      	mov	r1, r9
 80005e2:	f7ff fe1d 	bl	8000220 <__aeabi_uidivmod>
 80005e6:	9a01      	ldr	r2, [sp, #4]
 80005e8:	040b      	lsls	r3, r1, #16
 80005ea:	4342      	muls	r2, r0
 80005ec:	0c31      	lsrs	r1, r6, #16
 80005ee:	0005      	movs	r5, r0
 80005f0:	4319      	orrs	r1, r3
 80005f2:	428a      	cmp	r2, r1
 80005f4:	d900      	bls.n	80005f8 <__aeabi_ddiv+0x1f8>
 80005f6:	e16c      	b.n	80008d2 <__aeabi_ddiv+0x4d2>
 80005f8:	1a88      	subs	r0, r1, r2
 80005fa:	4649      	mov	r1, r9
 80005fc:	f7ff fe10 	bl	8000220 <__aeabi_uidivmod>
 8000600:	9a01      	ldr	r2, [sp, #4]
 8000602:	0436      	lsls	r6, r6, #16
 8000604:	4342      	muls	r2, r0
 8000606:	0409      	lsls	r1, r1, #16
 8000608:	0c36      	lsrs	r6, r6, #16
 800060a:	0003      	movs	r3, r0
 800060c:	430e      	orrs	r6, r1
 800060e:	42b2      	cmp	r2, r6
 8000610:	d900      	bls.n	8000614 <__aeabi_ddiv+0x214>
 8000612:	e153      	b.n	80008bc <__aeabi_ddiv+0x4bc>
 8000614:	9803      	ldr	r0, [sp, #12]
 8000616:	1ab6      	subs	r6, r6, r2
 8000618:	0002      	movs	r2, r0
 800061a:	042d      	lsls	r5, r5, #16
 800061c:	431d      	orrs	r5, r3
 800061e:	9f02      	ldr	r7, [sp, #8]
 8000620:	042b      	lsls	r3, r5, #16
 8000622:	0c1b      	lsrs	r3, r3, #16
 8000624:	435a      	muls	r2, r3
 8000626:	437b      	muls	r3, r7
 8000628:	469c      	mov	ip, r3
 800062a:	0c29      	lsrs	r1, r5, #16
 800062c:	4348      	muls	r0, r1
 800062e:	0c13      	lsrs	r3, r2, #16
 8000630:	4484      	add	ip, r0
 8000632:	4463      	add	r3, ip
 8000634:	4379      	muls	r1, r7
 8000636:	4298      	cmp	r0, r3
 8000638:	d903      	bls.n	8000642 <__aeabi_ddiv+0x242>
 800063a:	2080      	movs	r0, #128	; 0x80
 800063c:	0240      	lsls	r0, r0, #9
 800063e:	4684      	mov	ip, r0
 8000640:	4461      	add	r1, ip
 8000642:	0c18      	lsrs	r0, r3, #16
 8000644:	0412      	lsls	r2, r2, #16
 8000646:	041b      	lsls	r3, r3, #16
 8000648:	0c12      	lsrs	r2, r2, #16
 800064a:	1841      	adds	r1, r0, r1
 800064c:	189b      	adds	r3, r3, r2
 800064e:	428e      	cmp	r6, r1
 8000650:	d200      	bcs.n	8000654 <__aeabi_ddiv+0x254>
 8000652:	e0ff      	b.n	8000854 <__aeabi_ddiv+0x454>
 8000654:	d100      	bne.n	8000658 <__aeabi_ddiv+0x258>
 8000656:	e0fa      	b.n	800084e <__aeabi_ddiv+0x44e>
 8000658:	2301      	movs	r3, #1
 800065a:	431d      	orrs	r5, r3
 800065c:	4a49      	ldr	r2, [pc, #292]	; (8000784 <__aeabi_ddiv+0x384>)
 800065e:	445a      	add	r2, fp
 8000660:	2a00      	cmp	r2, #0
 8000662:	dc00      	bgt.n	8000666 <__aeabi_ddiv+0x266>
 8000664:	e0aa      	b.n	80007bc <__aeabi_ddiv+0x3bc>
 8000666:	076b      	lsls	r3, r5, #29
 8000668:	d000      	beq.n	800066c <__aeabi_ddiv+0x26c>
 800066a:	e13d      	b.n	80008e8 <__aeabi_ddiv+0x4e8>
 800066c:	08ed      	lsrs	r5, r5, #3
 800066e:	4643      	mov	r3, r8
 8000670:	01db      	lsls	r3, r3, #7
 8000672:	d506      	bpl.n	8000682 <__aeabi_ddiv+0x282>
 8000674:	4642      	mov	r2, r8
 8000676:	4b44      	ldr	r3, [pc, #272]	; (8000788 <__aeabi_ddiv+0x388>)
 8000678:	401a      	ands	r2, r3
 800067a:	4690      	mov	r8, r2
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	00d2      	lsls	r2, r2, #3
 8000680:	445a      	add	r2, fp
 8000682:	4b42      	ldr	r3, [pc, #264]	; (800078c <__aeabi_ddiv+0x38c>)
 8000684:	429a      	cmp	r2, r3
 8000686:	dd00      	ble.n	800068a <__aeabi_ddiv+0x28a>
 8000688:	e71f      	b.n	80004ca <__aeabi_ddiv+0xca>
 800068a:	4643      	mov	r3, r8
 800068c:	075b      	lsls	r3, r3, #29
 800068e:	431d      	orrs	r5, r3
 8000690:	4643      	mov	r3, r8
 8000692:	0552      	lsls	r2, r2, #21
 8000694:	025c      	lsls	r4, r3, #9
 8000696:	0b24      	lsrs	r4, r4, #12
 8000698:	0d53      	lsrs	r3, r2, #21
 800069a:	e708      	b.n	80004ae <__aeabi_ddiv+0xae>
 800069c:	4652      	mov	r2, sl
 800069e:	4322      	orrs	r2, r4
 80006a0:	d100      	bne.n	80006a4 <__aeabi_ddiv+0x2a4>
 80006a2:	e07b      	b.n	800079c <__aeabi_ddiv+0x39c>
 80006a4:	2c00      	cmp	r4, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_ddiv+0x2aa>
 80006a8:	e0fa      	b.n	80008a0 <__aeabi_ddiv+0x4a0>
 80006aa:	0020      	movs	r0, r4
 80006ac:	f000 fa04 	bl	8000ab8 <__clzsi2>
 80006b0:	0002      	movs	r2, r0
 80006b2:	3a0b      	subs	r2, #11
 80006b4:	231d      	movs	r3, #29
 80006b6:	0001      	movs	r1, r0
 80006b8:	1a9b      	subs	r3, r3, r2
 80006ba:	4652      	mov	r2, sl
 80006bc:	3908      	subs	r1, #8
 80006be:	40da      	lsrs	r2, r3
 80006c0:	408c      	lsls	r4, r1
 80006c2:	4314      	orrs	r4, r2
 80006c4:	4652      	mov	r2, sl
 80006c6:	408a      	lsls	r2, r1
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <__aeabi_ddiv+0x390>)
 80006ca:	4458      	add	r0, fp
 80006cc:	469b      	mov	fp, r3
 80006ce:	4483      	add	fp, r0
 80006d0:	2000      	movs	r0, #0
 80006d2:	e6d5      	b.n	8000480 <__aeabi_ddiv+0x80>
 80006d4:	464b      	mov	r3, r9
 80006d6:	4323      	orrs	r3, r4
 80006d8:	4698      	mov	r8, r3
 80006da:	d044      	beq.n	8000766 <__aeabi_ddiv+0x366>
 80006dc:	2c00      	cmp	r4, #0
 80006de:	d100      	bne.n	80006e2 <__aeabi_ddiv+0x2e2>
 80006e0:	e0ce      	b.n	8000880 <__aeabi_ddiv+0x480>
 80006e2:	0020      	movs	r0, r4
 80006e4:	f000 f9e8 	bl	8000ab8 <__clzsi2>
 80006e8:	0001      	movs	r1, r0
 80006ea:	0002      	movs	r2, r0
 80006ec:	390b      	subs	r1, #11
 80006ee:	231d      	movs	r3, #29
 80006f0:	1a5b      	subs	r3, r3, r1
 80006f2:	4649      	mov	r1, r9
 80006f4:	0010      	movs	r0, r2
 80006f6:	40d9      	lsrs	r1, r3
 80006f8:	3808      	subs	r0, #8
 80006fa:	4084      	lsls	r4, r0
 80006fc:	000b      	movs	r3, r1
 80006fe:	464d      	mov	r5, r9
 8000700:	4323      	orrs	r3, r4
 8000702:	4698      	mov	r8, r3
 8000704:	4085      	lsls	r5, r0
 8000706:	4823      	ldr	r0, [pc, #140]	; (8000794 <__aeabi_ddiv+0x394>)
 8000708:	1a83      	subs	r3, r0, r2
 800070a:	469b      	mov	fp, r3
 800070c:	2300      	movs	r3, #0
 800070e:	4699      	mov	r9, r3
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	e69a      	b.n	800044a <__aeabi_ddiv+0x4a>
 8000714:	464b      	mov	r3, r9
 8000716:	4323      	orrs	r3, r4
 8000718:	4698      	mov	r8, r3
 800071a:	d11d      	bne.n	8000758 <__aeabi_ddiv+0x358>
 800071c:	2308      	movs	r3, #8
 800071e:	4699      	mov	r9, r3
 8000720:	3b06      	subs	r3, #6
 8000722:	2500      	movs	r5, #0
 8000724:	4683      	mov	fp, r0
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	e68f      	b.n	800044a <__aeabi_ddiv+0x4a>
 800072a:	4652      	mov	r2, sl
 800072c:	4322      	orrs	r2, r4
 800072e:	d109      	bne.n	8000744 <__aeabi_ddiv+0x344>
 8000730:	2302      	movs	r3, #2
 8000732:	4649      	mov	r1, r9
 8000734:	4319      	orrs	r1, r3
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <__aeabi_ddiv+0x398>)
 8000738:	4689      	mov	r9, r1
 800073a:	469c      	mov	ip, r3
 800073c:	2400      	movs	r4, #0
 800073e:	2002      	movs	r0, #2
 8000740:	44e3      	add	fp, ip
 8000742:	e69d      	b.n	8000480 <__aeabi_ddiv+0x80>
 8000744:	2303      	movs	r3, #3
 8000746:	464a      	mov	r2, r9
 8000748:	431a      	orrs	r2, r3
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <__aeabi_ddiv+0x398>)
 800074c:	4691      	mov	r9, r2
 800074e:	469c      	mov	ip, r3
 8000750:	4652      	mov	r2, sl
 8000752:	2003      	movs	r0, #3
 8000754:	44e3      	add	fp, ip
 8000756:	e693      	b.n	8000480 <__aeabi_ddiv+0x80>
 8000758:	230c      	movs	r3, #12
 800075a:	4699      	mov	r9, r3
 800075c:	3b09      	subs	r3, #9
 800075e:	46a0      	mov	r8, r4
 8000760:	4683      	mov	fp, r0
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	e671      	b.n	800044a <__aeabi_ddiv+0x4a>
 8000766:	2304      	movs	r3, #4
 8000768:	4699      	mov	r9, r3
 800076a:	2300      	movs	r3, #0
 800076c:	469b      	mov	fp, r3
 800076e:	3301      	adds	r3, #1
 8000770:	2500      	movs	r5, #0
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	e669      	b.n	800044a <__aeabi_ddiv+0x4a>
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	000007ff 	.word	0x000007ff
 800077c:	fffffc01 	.word	0xfffffc01
 8000780:	08004f7c 	.word	0x08004f7c
 8000784:	000003ff 	.word	0x000003ff
 8000788:	feffffff 	.word	0xfeffffff
 800078c:	000007fe 	.word	0x000007fe
 8000790:	000003f3 	.word	0x000003f3
 8000794:	fffffc0d 	.word	0xfffffc0d
 8000798:	fffff801 	.word	0xfffff801
 800079c:	4649      	mov	r1, r9
 800079e:	2301      	movs	r3, #1
 80007a0:	4319      	orrs	r1, r3
 80007a2:	4689      	mov	r9, r1
 80007a4:	2400      	movs	r4, #0
 80007a6:	2001      	movs	r0, #1
 80007a8:	e66a      	b.n	8000480 <__aeabi_ddiv+0x80>
 80007aa:	2300      	movs	r3, #0
 80007ac:	2480      	movs	r4, #128	; 0x80
 80007ae:	469a      	mov	sl, r3
 80007b0:	2500      	movs	r5, #0
 80007b2:	4b8a      	ldr	r3, [pc, #552]	; (80009dc <__aeabi_ddiv+0x5dc>)
 80007b4:	0324      	lsls	r4, r4, #12
 80007b6:	e67a      	b.n	80004ae <__aeabi_ddiv+0xae>
 80007b8:	2501      	movs	r5, #1
 80007ba:	426d      	negs	r5, r5
 80007bc:	2301      	movs	r3, #1
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	2b38      	cmp	r3, #56	; 0x38
 80007c2:	dd00      	ble.n	80007c6 <__aeabi_ddiv+0x3c6>
 80007c4:	e670      	b.n	80004a8 <__aeabi_ddiv+0xa8>
 80007c6:	2b1f      	cmp	r3, #31
 80007c8:	dc00      	bgt.n	80007cc <__aeabi_ddiv+0x3cc>
 80007ca:	e0bf      	b.n	800094c <__aeabi_ddiv+0x54c>
 80007cc:	211f      	movs	r1, #31
 80007ce:	4249      	negs	r1, r1
 80007d0:	1a8a      	subs	r2, r1, r2
 80007d2:	4641      	mov	r1, r8
 80007d4:	40d1      	lsrs	r1, r2
 80007d6:	000a      	movs	r2, r1
 80007d8:	2b20      	cmp	r3, #32
 80007da:	d004      	beq.n	80007e6 <__aeabi_ddiv+0x3e6>
 80007dc:	4641      	mov	r1, r8
 80007de:	4b80      	ldr	r3, [pc, #512]	; (80009e0 <__aeabi_ddiv+0x5e0>)
 80007e0:	445b      	add	r3, fp
 80007e2:	4099      	lsls	r1, r3
 80007e4:	430d      	orrs	r5, r1
 80007e6:	1e6b      	subs	r3, r5, #1
 80007e8:	419d      	sbcs	r5, r3
 80007ea:	2307      	movs	r3, #7
 80007ec:	432a      	orrs	r2, r5
 80007ee:	001d      	movs	r5, r3
 80007f0:	2400      	movs	r4, #0
 80007f2:	4015      	ands	r5, r2
 80007f4:	4213      	tst	r3, r2
 80007f6:	d100      	bne.n	80007fa <__aeabi_ddiv+0x3fa>
 80007f8:	e0d4      	b.n	80009a4 <__aeabi_ddiv+0x5a4>
 80007fa:	210f      	movs	r1, #15
 80007fc:	2300      	movs	r3, #0
 80007fe:	4011      	ands	r1, r2
 8000800:	2904      	cmp	r1, #4
 8000802:	d100      	bne.n	8000806 <__aeabi_ddiv+0x406>
 8000804:	e0cb      	b.n	800099e <__aeabi_ddiv+0x59e>
 8000806:	1d11      	adds	r1, r2, #4
 8000808:	4291      	cmp	r1, r2
 800080a:	4192      	sbcs	r2, r2
 800080c:	4252      	negs	r2, r2
 800080e:	189b      	adds	r3, r3, r2
 8000810:	000a      	movs	r2, r1
 8000812:	0219      	lsls	r1, r3, #8
 8000814:	d400      	bmi.n	8000818 <__aeabi_ddiv+0x418>
 8000816:	e0c2      	b.n	800099e <__aeabi_ddiv+0x59e>
 8000818:	2301      	movs	r3, #1
 800081a:	2400      	movs	r4, #0
 800081c:	2500      	movs	r5, #0
 800081e:	e646      	b.n	80004ae <__aeabi_ddiv+0xae>
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	4641      	mov	r1, r8
 8000824:	031b      	lsls	r3, r3, #12
 8000826:	4219      	tst	r1, r3
 8000828:	d008      	beq.n	800083c <__aeabi_ddiv+0x43c>
 800082a:	421c      	tst	r4, r3
 800082c:	d106      	bne.n	800083c <__aeabi_ddiv+0x43c>
 800082e:	431c      	orrs	r4, r3
 8000830:	0324      	lsls	r4, r4, #12
 8000832:	46ba      	mov	sl, r7
 8000834:	0015      	movs	r5, r2
 8000836:	4b69      	ldr	r3, [pc, #420]	; (80009dc <__aeabi_ddiv+0x5dc>)
 8000838:	0b24      	lsrs	r4, r4, #12
 800083a:	e638      	b.n	80004ae <__aeabi_ddiv+0xae>
 800083c:	2480      	movs	r4, #128	; 0x80
 800083e:	4643      	mov	r3, r8
 8000840:	0324      	lsls	r4, r4, #12
 8000842:	431c      	orrs	r4, r3
 8000844:	0324      	lsls	r4, r4, #12
 8000846:	46b2      	mov	sl, r6
 8000848:	4b64      	ldr	r3, [pc, #400]	; (80009dc <__aeabi_ddiv+0x5dc>)
 800084a:	0b24      	lsrs	r4, r4, #12
 800084c:	e62f      	b.n	80004ae <__aeabi_ddiv+0xae>
 800084e:	2b00      	cmp	r3, #0
 8000850:	d100      	bne.n	8000854 <__aeabi_ddiv+0x454>
 8000852:	e703      	b.n	800065c <__aeabi_ddiv+0x25c>
 8000854:	19a6      	adds	r6, r4, r6
 8000856:	1e68      	subs	r0, r5, #1
 8000858:	42a6      	cmp	r6, r4
 800085a:	d200      	bcs.n	800085e <__aeabi_ddiv+0x45e>
 800085c:	e08d      	b.n	800097a <__aeabi_ddiv+0x57a>
 800085e:	428e      	cmp	r6, r1
 8000860:	d200      	bcs.n	8000864 <__aeabi_ddiv+0x464>
 8000862:	e0a3      	b.n	80009ac <__aeabi_ddiv+0x5ac>
 8000864:	d100      	bne.n	8000868 <__aeabi_ddiv+0x468>
 8000866:	e0b3      	b.n	80009d0 <__aeabi_ddiv+0x5d0>
 8000868:	0005      	movs	r5, r0
 800086a:	e6f5      	b.n	8000658 <__aeabi_ddiv+0x258>
 800086c:	42aa      	cmp	r2, r5
 800086e:	d900      	bls.n	8000872 <__aeabi_ddiv+0x472>
 8000870:	e639      	b.n	80004e6 <__aeabi_ddiv+0xe6>
 8000872:	4643      	mov	r3, r8
 8000874:	07de      	lsls	r6, r3, #31
 8000876:	0858      	lsrs	r0, r3, #1
 8000878:	086b      	lsrs	r3, r5, #1
 800087a:	431e      	orrs	r6, r3
 800087c:	07ed      	lsls	r5, r5, #31
 800087e:	e639      	b.n	80004f4 <__aeabi_ddiv+0xf4>
 8000880:	4648      	mov	r0, r9
 8000882:	f000 f919 	bl	8000ab8 <__clzsi2>
 8000886:	0001      	movs	r1, r0
 8000888:	0002      	movs	r2, r0
 800088a:	3115      	adds	r1, #21
 800088c:	3220      	adds	r2, #32
 800088e:	291c      	cmp	r1, #28
 8000890:	dc00      	bgt.n	8000894 <__aeabi_ddiv+0x494>
 8000892:	e72c      	b.n	80006ee <__aeabi_ddiv+0x2ee>
 8000894:	464b      	mov	r3, r9
 8000896:	3808      	subs	r0, #8
 8000898:	4083      	lsls	r3, r0
 800089a:	2500      	movs	r5, #0
 800089c:	4698      	mov	r8, r3
 800089e:	e732      	b.n	8000706 <__aeabi_ddiv+0x306>
 80008a0:	f000 f90a 	bl	8000ab8 <__clzsi2>
 80008a4:	0003      	movs	r3, r0
 80008a6:	001a      	movs	r2, r3
 80008a8:	3215      	adds	r2, #21
 80008aa:	3020      	adds	r0, #32
 80008ac:	2a1c      	cmp	r2, #28
 80008ae:	dc00      	bgt.n	80008b2 <__aeabi_ddiv+0x4b2>
 80008b0:	e700      	b.n	80006b4 <__aeabi_ddiv+0x2b4>
 80008b2:	4654      	mov	r4, sl
 80008b4:	3b08      	subs	r3, #8
 80008b6:	2200      	movs	r2, #0
 80008b8:	409c      	lsls	r4, r3
 80008ba:	e705      	b.n	80006c8 <__aeabi_ddiv+0x2c8>
 80008bc:	1936      	adds	r6, r6, r4
 80008be:	3b01      	subs	r3, #1
 80008c0:	42b4      	cmp	r4, r6
 80008c2:	d900      	bls.n	80008c6 <__aeabi_ddiv+0x4c6>
 80008c4:	e6a6      	b.n	8000614 <__aeabi_ddiv+0x214>
 80008c6:	42b2      	cmp	r2, r6
 80008c8:	d800      	bhi.n	80008cc <__aeabi_ddiv+0x4cc>
 80008ca:	e6a3      	b.n	8000614 <__aeabi_ddiv+0x214>
 80008cc:	1e83      	subs	r3, r0, #2
 80008ce:	1936      	adds	r6, r6, r4
 80008d0:	e6a0      	b.n	8000614 <__aeabi_ddiv+0x214>
 80008d2:	1909      	adds	r1, r1, r4
 80008d4:	3d01      	subs	r5, #1
 80008d6:	428c      	cmp	r4, r1
 80008d8:	d900      	bls.n	80008dc <__aeabi_ddiv+0x4dc>
 80008da:	e68d      	b.n	80005f8 <__aeabi_ddiv+0x1f8>
 80008dc:	428a      	cmp	r2, r1
 80008de:	d800      	bhi.n	80008e2 <__aeabi_ddiv+0x4e2>
 80008e0:	e68a      	b.n	80005f8 <__aeabi_ddiv+0x1f8>
 80008e2:	1e85      	subs	r5, r0, #2
 80008e4:	1909      	adds	r1, r1, r4
 80008e6:	e687      	b.n	80005f8 <__aeabi_ddiv+0x1f8>
 80008e8:	230f      	movs	r3, #15
 80008ea:	402b      	ands	r3, r5
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d100      	bne.n	80008f2 <__aeabi_ddiv+0x4f2>
 80008f0:	e6bc      	b.n	800066c <__aeabi_ddiv+0x26c>
 80008f2:	2305      	movs	r3, #5
 80008f4:	425b      	negs	r3, r3
 80008f6:	42ab      	cmp	r3, r5
 80008f8:	419b      	sbcs	r3, r3
 80008fa:	3504      	adds	r5, #4
 80008fc:	425b      	negs	r3, r3
 80008fe:	08ed      	lsrs	r5, r5, #3
 8000900:	4498      	add	r8, r3
 8000902:	e6b4      	b.n	800066e <__aeabi_ddiv+0x26e>
 8000904:	42af      	cmp	r7, r5
 8000906:	d900      	bls.n	800090a <__aeabi_ddiv+0x50a>
 8000908:	e660      	b.n	80005cc <__aeabi_ddiv+0x1cc>
 800090a:	4282      	cmp	r2, r0
 800090c:	d804      	bhi.n	8000918 <__aeabi_ddiv+0x518>
 800090e:	d000      	beq.n	8000912 <__aeabi_ddiv+0x512>
 8000910:	e65c      	b.n	80005cc <__aeabi_ddiv+0x1cc>
 8000912:	42ae      	cmp	r6, r5
 8000914:	d800      	bhi.n	8000918 <__aeabi_ddiv+0x518>
 8000916:	e659      	b.n	80005cc <__aeabi_ddiv+0x1cc>
 8000918:	2302      	movs	r3, #2
 800091a:	425b      	negs	r3, r3
 800091c:	469c      	mov	ip, r3
 800091e:	9b00      	ldr	r3, [sp, #0]
 8000920:	44e0      	add	r8, ip
 8000922:	469c      	mov	ip, r3
 8000924:	4465      	add	r5, ip
 8000926:	429d      	cmp	r5, r3
 8000928:	419b      	sbcs	r3, r3
 800092a:	425b      	negs	r3, r3
 800092c:	191b      	adds	r3, r3, r4
 800092e:	18c0      	adds	r0, r0, r3
 8000930:	e64d      	b.n	80005ce <__aeabi_ddiv+0x1ce>
 8000932:	428a      	cmp	r2, r1
 8000934:	d800      	bhi.n	8000938 <__aeabi_ddiv+0x538>
 8000936:	e60e      	b.n	8000556 <__aeabi_ddiv+0x156>
 8000938:	1e83      	subs	r3, r0, #2
 800093a:	1909      	adds	r1, r1, r4
 800093c:	e60b      	b.n	8000556 <__aeabi_ddiv+0x156>
 800093e:	428a      	cmp	r2, r1
 8000940:	d800      	bhi.n	8000944 <__aeabi_ddiv+0x544>
 8000942:	e5f4      	b.n	800052e <__aeabi_ddiv+0x12e>
 8000944:	1e83      	subs	r3, r0, #2
 8000946:	4698      	mov	r8, r3
 8000948:	1909      	adds	r1, r1, r4
 800094a:	e5f0      	b.n	800052e <__aeabi_ddiv+0x12e>
 800094c:	4925      	ldr	r1, [pc, #148]	; (80009e4 <__aeabi_ddiv+0x5e4>)
 800094e:	0028      	movs	r0, r5
 8000950:	4459      	add	r1, fp
 8000952:	408d      	lsls	r5, r1
 8000954:	4642      	mov	r2, r8
 8000956:	408a      	lsls	r2, r1
 8000958:	1e69      	subs	r1, r5, #1
 800095a:	418d      	sbcs	r5, r1
 800095c:	4641      	mov	r1, r8
 800095e:	40d8      	lsrs	r0, r3
 8000960:	40d9      	lsrs	r1, r3
 8000962:	4302      	orrs	r2, r0
 8000964:	432a      	orrs	r2, r5
 8000966:	000b      	movs	r3, r1
 8000968:	0751      	lsls	r1, r2, #29
 800096a:	d100      	bne.n	800096e <__aeabi_ddiv+0x56e>
 800096c:	e751      	b.n	8000812 <__aeabi_ddiv+0x412>
 800096e:	210f      	movs	r1, #15
 8000970:	4011      	ands	r1, r2
 8000972:	2904      	cmp	r1, #4
 8000974:	d000      	beq.n	8000978 <__aeabi_ddiv+0x578>
 8000976:	e746      	b.n	8000806 <__aeabi_ddiv+0x406>
 8000978:	e74b      	b.n	8000812 <__aeabi_ddiv+0x412>
 800097a:	0005      	movs	r5, r0
 800097c:	428e      	cmp	r6, r1
 800097e:	d000      	beq.n	8000982 <__aeabi_ddiv+0x582>
 8000980:	e66a      	b.n	8000658 <__aeabi_ddiv+0x258>
 8000982:	9a00      	ldr	r2, [sp, #0]
 8000984:	4293      	cmp	r3, r2
 8000986:	d000      	beq.n	800098a <__aeabi_ddiv+0x58a>
 8000988:	e666      	b.n	8000658 <__aeabi_ddiv+0x258>
 800098a:	e667      	b.n	800065c <__aeabi_ddiv+0x25c>
 800098c:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <__aeabi_ddiv+0x5e8>)
 800098e:	445a      	add	r2, fp
 8000990:	2a00      	cmp	r2, #0
 8000992:	dc00      	bgt.n	8000996 <__aeabi_ddiv+0x596>
 8000994:	e710      	b.n	80007b8 <__aeabi_ddiv+0x3b8>
 8000996:	2301      	movs	r3, #1
 8000998:	2500      	movs	r5, #0
 800099a:	4498      	add	r8, r3
 800099c:	e667      	b.n	800066e <__aeabi_ddiv+0x26e>
 800099e:	075d      	lsls	r5, r3, #29
 80009a0:	025b      	lsls	r3, r3, #9
 80009a2:	0b1c      	lsrs	r4, r3, #12
 80009a4:	08d2      	lsrs	r2, r2, #3
 80009a6:	2300      	movs	r3, #0
 80009a8:	4315      	orrs	r5, r2
 80009aa:	e580      	b.n	80004ae <__aeabi_ddiv+0xae>
 80009ac:	9800      	ldr	r0, [sp, #0]
 80009ae:	3d02      	subs	r5, #2
 80009b0:	0042      	lsls	r2, r0, #1
 80009b2:	4282      	cmp	r2, r0
 80009b4:	41bf      	sbcs	r7, r7
 80009b6:	427f      	negs	r7, r7
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	1936      	adds	r6, r6, r4
 80009bc:	9200      	str	r2, [sp, #0]
 80009be:	e7dd      	b.n	800097c <__aeabi_ddiv+0x57c>
 80009c0:	2480      	movs	r4, #128	; 0x80
 80009c2:	4643      	mov	r3, r8
 80009c4:	0324      	lsls	r4, r4, #12
 80009c6:	431c      	orrs	r4, r3
 80009c8:	0324      	lsls	r4, r4, #12
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <__aeabi_ddiv+0x5dc>)
 80009cc:	0b24      	lsrs	r4, r4, #12
 80009ce:	e56e      	b.n	80004ae <__aeabi_ddiv+0xae>
 80009d0:	9a00      	ldr	r2, [sp, #0]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d3ea      	bcc.n	80009ac <__aeabi_ddiv+0x5ac>
 80009d6:	0005      	movs	r5, r0
 80009d8:	e7d3      	b.n	8000982 <__aeabi_ddiv+0x582>
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	000007ff 	.word	0x000007ff
 80009e0:	0000043e 	.word	0x0000043e
 80009e4:	0000041e 	.word	0x0000041e
 80009e8:	000003ff 	.word	0x000003ff

080009ec <__aeabi_d2iz>:
 80009ec:	000a      	movs	r2, r1
 80009ee:	b530      	push	{r4, r5, lr}
 80009f0:	4c13      	ldr	r4, [pc, #76]	; (8000a40 <__aeabi_d2iz+0x54>)
 80009f2:	0053      	lsls	r3, r2, #1
 80009f4:	0309      	lsls	r1, r1, #12
 80009f6:	0005      	movs	r5, r0
 80009f8:	0b09      	lsrs	r1, r1, #12
 80009fa:	2000      	movs	r0, #0
 80009fc:	0d5b      	lsrs	r3, r3, #21
 80009fe:	0fd2      	lsrs	r2, r2, #31
 8000a00:	42a3      	cmp	r3, r4
 8000a02:	dd04      	ble.n	8000a0e <__aeabi_d2iz+0x22>
 8000a04:	480f      	ldr	r0, [pc, #60]	; (8000a44 <__aeabi_d2iz+0x58>)
 8000a06:	4283      	cmp	r3, r0
 8000a08:	dd02      	ble.n	8000a10 <__aeabi_d2iz+0x24>
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <__aeabi_d2iz+0x5c>)
 8000a0c:	18d0      	adds	r0, r2, r3
 8000a0e:	bd30      	pop	{r4, r5, pc}
 8000a10:	2080      	movs	r0, #128	; 0x80
 8000a12:	0340      	lsls	r0, r0, #13
 8000a14:	4301      	orrs	r1, r0
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <__aeabi_d2iz+0x60>)
 8000a18:	1ac0      	subs	r0, r0, r3
 8000a1a:	281f      	cmp	r0, #31
 8000a1c:	dd08      	ble.n	8000a30 <__aeabi_d2iz+0x44>
 8000a1e:	480c      	ldr	r0, [pc, #48]	; (8000a50 <__aeabi_d2iz+0x64>)
 8000a20:	1ac3      	subs	r3, r0, r3
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	000b      	movs	r3, r1
 8000a26:	4258      	negs	r0, r3
 8000a28:	2a00      	cmp	r2, #0
 8000a2a:	d1f0      	bne.n	8000a0e <__aeabi_d2iz+0x22>
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	e7ee      	b.n	8000a0e <__aeabi_d2iz+0x22>
 8000a30:	4c08      	ldr	r4, [pc, #32]	; (8000a54 <__aeabi_d2iz+0x68>)
 8000a32:	40c5      	lsrs	r5, r0
 8000a34:	46a4      	mov	ip, r4
 8000a36:	4463      	add	r3, ip
 8000a38:	4099      	lsls	r1, r3
 8000a3a:	000b      	movs	r3, r1
 8000a3c:	432b      	orrs	r3, r5
 8000a3e:	e7f2      	b.n	8000a26 <__aeabi_d2iz+0x3a>
 8000a40:	000003fe 	.word	0x000003fe
 8000a44:	0000041d 	.word	0x0000041d
 8000a48:	7fffffff 	.word	0x7fffffff
 8000a4c:	00000433 	.word	0x00000433
 8000a50:	00000413 	.word	0x00000413
 8000a54:	fffffbed 	.word	0xfffffbed

08000a58 <__aeabi_i2d>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	d016      	beq.n	8000a8c <__aeabi_i2d+0x34>
 8000a5e:	17c3      	asrs	r3, r0, #31
 8000a60:	18c5      	adds	r5, r0, r3
 8000a62:	405d      	eors	r5, r3
 8000a64:	0fc4      	lsrs	r4, r0, #31
 8000a66:	0028      	movs	r0, r5
 8000a68:	f000 f826 	bl	8000ab8 <__clzsi2>
 8000a6c:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <__aeabi_i2d+0x5c>)
 8000a6e:	1a12      	subs	r2, r2, r0
 8000a70:	280a      	cmp	r0, #10
 8000a72:	dc16      	bgt.n	8000aa2 <__aeabi_i2d+0x4a>
 8000a74:	0003      	movs	r3, r0
 8000a76:	002e      	movs	r6, r5
 8000a78:	3315      	adds	r3, #21
 8000a7a:	409e      	lsls	r6, r3
 8000a7c:	230b      	movs	r3, #11
 8000a7e:	1a18      	subs	r0, r3, r0
 8000a80:	40c5      	lsrs	r5, r0
 8000a82:	0552      	lsls	r2, r2, #21
 8000a84:	032d      	lsls	r5, r5, #12
 8000a86:	0b2d      	lsrs	r5, r5, #12
 8000a88:	0d53      	lsrs	r3, r2, #21
 8000a8a:	e003      	b.n	8000a94 <__aeabi_i2d+0x3c>
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	2300      	movs	r3, #0
 8000a90:	2500      	movs	r5, #0
 8000a92:	2600      	movs	r6, #0
 8000a94:	051b      	lsls	r3, r3, #20
 8000a96:	432b      	orrs	r3, r5
 8000a98:	07e4      	lsls	r4, r4, #31
 8000a9a:	4323      	orrs	r3, r4
 8000a9c:	0030      	movs	r0, r6
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	bd70      	pop	{r4, r5, r6, pc}
 8000aa2:	380b      	subs	r0, #11
 8000aa4:	4085      	lsls	r5, r0
 8000aa6:	0552      	lsls	r2, r2, #21
 8000aa8:	032d      	lsls	r5, r5, #12
 8000aaa:	2600      	movs	r6, #0
 8000aac:	0b2d      	lsrs	r5, r5, #12
 8000aae:	0d53      	lsrs	r3, r2, #21
 8000ab0:	e7f0      	b.n	8000a94 <__aeabi_i2d+0x3c>
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	0000041e 	.word	0x0000041e

08000ab8 <__clzsi2>:
 8000ab8:	211c      	movs	r1, #28
 8000aba:	2301      	movs	r3, #1
 8000abc:	041b      	lsls	r3, r3, #16
 8000abe:	4298      	cmp	r0, r3
 8000ac0:	d301      	bcc.n	8000ac6 <__clzsi2+0xe>
 8000ac2:	0c00      	lsrs	r0, r0, #16
 8000ac4:	3910      	subs	r1, #16
 8000ac6:	0a1b      	lsrs	r3, r3, #8
 8000ac8:	4298      	cmp	r0, r3
 8000aca:	d301      	bcc.n	8000ad0 <__clzsi2+0x18>
 8000acc:	0a00      	lsrs	r0, r0, #8
 8000ace:	3908      	subs	r1, #8
 8000ad0:	091b      	lsrs	r3, r3, #4
 8000ad2:	4298      	cmp	r0, r3
 8000ad4:	d301      	bcc.n	8000ada <__clzsi2+0x22>
 8000ad6:	0900      	lsrs	r0, r0, #4
 8000ad8:	3904      	subs	r1, #4
 8000ada:	a202      	add	r2, pc, #8	; (adr r2, 8000ae4 <__clzsi2+0x2c>)
 8000adc:	5c10      	ldrb	r0, [r2, r0]
 8000ade:	1840      	adds	r0, r0, r1
 8000ae0:	4770      	bx	lr
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	02020304 	.word	0x02020304
 8000ae8:	01010101 	.word	0x01010101
	...

08000af4 <select_adc_channel>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void select_adc_channel(int channel)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000afc:	230c      	movs	r3, #12
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	0018      	movs	r0, r3
 8000b02:	230c      	movs	r3, #12
 8000b04:	001a      	movs	r2, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	f003 fd8a 	bl	8004620 <memset>
//////////    sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
    switch (channel)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	d81e      	bhi.n	8000b50 <select_adc_channel+0x5c>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	009a      	lsls	r2, r3, #2
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <select_adc_channel+0x90>)
 8000b18:	18d3      	adds	r3, r2, r3
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	469f      	mov	pc, r3
    {
        case 0:
            sConfig.Channel = ADC_CHANNEL_0;
 8000b1e:	230c      	movs	r3, #12
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	2201      	movs	r2, #1
 8000b24:	601a      	str	r2, [r3, #0]
              break;
 8000b26:	e017      	b.n	8000b58 <select_adc_channel+0x64>
        case 1:
            sConfig.Channel = ADC_CHANNEL_1;
 8000b28:	230c      	movs	r3, #12
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	4a16      	ldr	r2, [pc, #88]	; (8000b88 <select_adc_channel+0x94>)
 8000b2e:	601a      	str	r2, [r3, #0]
              break;
 8000b30:	e012      	b.n	8000b58 <select_adc_channel+0x64>
        case 2:
            sConfig.Channel = ADC_CHANNEL_2;
 8000b32:	230c      	movs	r3, #12
 8000b34:	18fb      	adds	r3, r7, r3
 8000b36:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <select_adc_channel+0x98>)
 8000b38:	601a      	str	r2, [r3, #0]
              break;
 8000b3a:	e00d      	b.n	8000b58 <select_adc_channel+0x64>
        case 3:
            sConfig.Channel = ADC_CHANNEL_3;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <select_adc_channel+0x9c>)
 8000b42:	601a      	str	r2, [r3, #0]
              break;
 8000b44:	e008      	b.n	8000b58 <select_adc_channel+0x64>
        case 4:
            sConfig.Channel = ADC_CHANNEL_4;
 8000b46:	230c      	movs	r3, #12
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <select_adc_channel+0xa0>)
 8000b4c:	601a      	str	r2, [r3, #0]
              break;
 8000b4e:	e003      	b.n	8000b58 <select_adc_channel+0x64>
        default: sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b50:	230c      	movs	r3, #12
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <select_adc_channel+0xa4>)
 8000b56:	601a      	str	r2, [r3, #0]
    }
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b58:	210c      	movs	r1, #12
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b66:	187a      	adds	r2, r7, r1
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <select_adc_channel+0xa8>)
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f001 faff 	bl	8002170 <HAL_ADC_ConfigChannel>
 8000b72:	1e03      	subs	r3, r0, #0
 8000b74:	d001      	beq.n	8000b7a <select_adc_channel+0x86>
    {
      Error_Handler();
 8000b76:	f000 fc49 	bl	800140c <Error_Handler>
    }
}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b006      	add	sp, #24
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	08004fbc 	.word	0x08004fbc
 8000b88:	04000002 	.word	0x04000002
 8000b8c:	08000004 	.word	0x08000004
 8000b90:	0c000008 	.word	0x0c000008
 8000b94:	10000010 	.word	0x10000010
 8000b98:	b0001000 	.word	0xb0001000
 8000b9c:	2000008c 	.word	0x2000008c

08000ba0 <convert>:
//----------------------------------------------

//----------------------------------------------

void convert (int column,int row)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]

	select_adc_channel(column);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff ffa1 	bl	8000af4 <select_adc_channel>
	HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, GPIO_PIN_SET);
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <convert+0x6c>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2110      	movs	r1, #16
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f002 f8c3 	bl	8002d44 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <convert+0x70>)
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f001 f9ab 	bl	8001f1c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	425a      	negs	r2, r3
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <convert+0x70>)
 8000bcc:	0011      	movs	r1, r2
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f001 fa2e 	bl	8002030 <HAL_ADC_PollForConversion>
	raw_temp[column+SCOLUMNS*row] = HAL_ADC_GetValue(&hadc1);
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <convert+0x70>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 fabe 	bl	8002158 <HAL_ADC_GetValue>
 8000bdc:	0001      	movs	r1, r0
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	009a      	lsls	r2, r3, #2
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	18d2      	adds	r2, r2, r3
 8000be6:	b289      	uxth	r1, r1
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <convert+0x74>)
 8000bea:	0052      	lsls	r2, r2, #1
 8000bec:	52d1      	strh	r1, [r2, r3]
	HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, GPIO_PIN_RESET);
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <convert+0x6c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f002 f8a5 	bl	8002d44 <HAL_GPIO_WritePin>
	HAL_ADC_Stop(&hadc1);
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <convert+0x70>)
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f001 f9db 	bl	8001fb8 <HAL_ADC_Stop>
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	50000400 	.word	0x50000400
 8000c10:	2000008c 	.word	0x2000008c
 8000c14:	2000023c 	.word	0x2000023c

08000c18 <scan_columns>:

void scan_columns(int row)
	{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

		HAL_GPIO_WritePin(COL0_GPIO_Port,COL0_Pin, GPIO_PIN_SET);
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	4830      	ldr	r0, [pc, #192]	; (8000ce8 <scan_columns+0xd0>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	0019      	movs	r1, r3
 8000c2a:	f002 f88b 	bl	8002d44 <HAL_GPIO_WritePin>
		HAL_Delay(ADC_SET_TIME);
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f000 fe3e 	bl	80018b0 <HAL_Delay>
		convert(0,row);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	0019      	movs	r1, r3
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff ffb1 	bl	8000ba0 <convert>
		HAL_GPIO_WritePin(COL0_GPIO_Port,COL0_Pin, GPIO_PIN_RESET);
 8000c3e:	2380      	movs	r3, #128	; 0x80
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4829      	ldr	r0, [pc, #164]	; (8000ce8 <scan_columns+0xd0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	0019      	movs	r1, r3
 8000c48:	f002 f87c 	bl	8002d44 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f000 fe2f 	bl	80018b0 <HAL_Delay>

		HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4824      	ldr	r0, [pc, #144]	; (8000ce8 <scan_columns+0xd0>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	f002 f872 	bl	8002d44 <HAL_GPIO_WritePin>
		HAL_Delay(ADC_SET_TIME);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f000 fe25 	bl	80018b0 <HAL_Delay>
		convert(1,row);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	0019      	movs	r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff ff98 	bl	8000ba0 <convert>
		HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	481c      	ldr	r0, [pc, #112]	; (8000ce8 <scan_columns+0xd0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	0019      	movs	r1, r3
 8000c7a:	f002 f863 	bl	8002d44 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f000 fe16 	bl	80018b0 <HAL_Delay>

		HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <scan_columns+0xd0>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f002 f85a 	bl	8002d44 <HAL_GPIO_WritePin>
		HAL_Delay(ADC_SET_TIME);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f000 fe0d 	bl	80018b0 <HAL_Delay>
		convert(2,row);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	0019      	movs	r1, r3
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	f7ff ff80 	bl	8000ba0 <convert>
		HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <scan_columns+0xd0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f002 f84c 	bl	8002d44 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 fdff 	bl	80018b0 <HAL_Delay>

		HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <scan_columns+0xd0>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2140      	movs	r1, #64	; 0x40
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f002 f843 	bl	8002d44 <HAL_GPIO_WritePin>
		HAL_Delay(ADC_SET_TIME);
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f000 fdf6 	bl	80018b0 <HAL_Delay>
		convert(3,row);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f7ff ff69 	bl	8000ba0 <convert>
		HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <scan_columns+0xd0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2140      	movs	r1, #64	; 0x40
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f002 f835 	bl	8002d44 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 fde8 	bl	80018b0 <HAL_Delay>
		HAL_Delay(5);
		convert(4,row);
		HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
		HAL_Delay(1);
*/
	}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	50000400 	.word	0x50000400

08000cec <scan_rows>:


void scan_rows()
		{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(R0_GPIO_Port,R0_Pin, GPIO_PIN_RESET);
 8000cf0:	23a0      	movs	r3, #160	; 0xa0
 8000cf2:	05db      	lsls	r3, r3, #23
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f002 f823 	bl	8002d44 <HAL_GPIO_WritePin>
			scan_columns(0);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f7ff ff8a 	bl	8000c18 <scan_columns>
			HAL_GPIO_WritePin(R0_GPIO_Port,R0_Pin, GPIO_PIN_SET);
 8000d04:	23a0      	movs	r3, #160	; 0xa0
 8000d06:	05db      	lsls	r3, r3, #23
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f002 f819 	bl	8002d44 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(R1_GPIO_Port,R1_Pin, GPIO_PIN_RESET);
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <scan_rows+0x88>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	2101      	movs	r1, #1
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f002 f813 	bl	8002d44 <HAL_GPIO_WritePin>
			scan_columns(1);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f7ff ff7a 	bl	8000c18 <scan_columns>
			HAL_GPIO_WritePin(R1_GPIO_Port,R1_Pin, GPIO_PIN_SET);
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <scan_rows+0x88>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	2101      	movs	r1, #1
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f002 f80a 	bl	8002d44 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(R2_GPIO_Port,R2_Pin, GPIO_PIN_RESET);
 8000d30:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <scan_rows+0x88>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	2102      	movs	r1, #2
 8000d36:	0018      	movs	r0, r3
 8000d38:	f002 f804 	bl	8002d44 <HAL_GPIO_WritePin>
			scan_columns(2);
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f7ff ff6b 	bl	8000c18 <scan_columns>
			HAL_GPIO_WritePin(R2_GPIO_Port,R2_Pin, GPIO_PIN_SET);
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <scan_rows+0x88>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	2102      	movs	r1, #2
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f001 fffb 	bl	8002d44 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(R3_GPIO_Port,R3_Pin, GPIO_PIN_RESET);
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <scan_rows+0x88>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	2104      	movs	r1, #4
 8000d54:	0018      	movs	r0, r3
 8000d56:	f001 fff5 	bl	8002d44 <HAL_GPIO_WritePin>
			scan_columns(3);
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	f7ff ff5c 	bl	8000c18 <scan_columns>
			HAL_GPIO_WritePin(R3_GPIO_Port,R3_Pin, GPIO_PIN_SET);
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <scan_rows+0x88>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	2104      	movs	r1, #4
 8000d66:	0018      	movs	r0, r3
 8000d68:	f001 ffec 	bl	8002d44 <HAL_GPIO_WritePin>
/*
			HAL_GPIO_WritePin(R4_GPIO_Port,R4_Pin, GPIO_PIN_RESET);
			scan_columns(4);
			HAL_GPIO_WritePin(R4_GPIO_Port,R4_Pin, GPIO_PIN_SET);
*/
		}
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	50000400 	.word	0x50000400

08000d78 <read_all_sensors>:


void read_all_sensors(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_SET);
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	021b      	lsls	r3, r3, #8
 8000d80:	4808      	ldr	r0, [pc, #32]	; (8000da4 <read_all_sensors+0x2c>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	0019      	movs	r1, r3
 8000d86:	f001 ffdd 	bl	8002d44 <HAL_GPIO_WritePin>
	scan_rows();
 8000d8a:	f7ff ffaf 	bl	8000cec <scan_rows>
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	4804      	ldr	r0, [pc, #16]	; (8000da4 <read_all_sensors+0x2c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	0019      	movs	r1, r3
 8000d98:	f001 ffd4 	bl	8002d44 <HAL_GPIO_WritePin>
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	50000800 	.word	0x50000800

08000da8 <read_smooth>:

void read_smooth()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
	int sum;
	for(int k=0;k<KSMOOTH;k++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	e019      	b.n	8000de8 <read_smooth+0x40>
	{
		read_all_sensors();
 8000db4:	f7ff ffe0 	bl	8000d78 <read_all_sensors>
		for(int m=0;m<SROWS*SCOLUMNS;m++) smooth_raw[k][m]=raw_temp[m];
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	e00e      	b.n	8000ddc <read_smooth+0x34>
 8000dbe:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <read_smooth+0xbc>)
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	0052      	lsls	r2, r2, #1
 8000dc4:	5ad0      	ldrh	r0, [r2, r3]
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <read_smooth+0xc0>)
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	0111      	lsls	r1, r2, #4
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	188a      	adds	r2, r1, r2
 8000dd0:	0052      	lsls	r2, r2, #1
 8000dd2:	1c01      	adds	r1, r0, #0
 8000dd4:	52d1      	strh	r1, [r2, r3]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b0f      	cmp	r3, #15
 8000de0:	dded      	ble.n	8000dbe <read_smooth+0x16>
	for(int k=0;k<KSMOOTH;k++)
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	3301      	adds	r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	2b09      	cmp	r3, #9
 8000dec:	dde2      	ble.n	8000db4 <read_smooth+0xc>

	}
	adc_serial++;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <read_smooth+0xc4>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <read_smooth+0xc4>)
 8000df8:	801a      	strh	r2, [r3, #0]
	for(int n=0;n<SROWS*SCOLUMNS;n++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	e029      	b.n	8000e54 <read_smooth+0xac>
	{
		for(int p=1;p<KSMOOTH;p++)
 8000e00:	2301      	movs	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	e00d      	b.n	8000e22 <read_smooth+0x7a>
		{
		sum+=smooth_raw[p][n];
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <read_smooth+0xc0>)
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	0111      	lsls	r1, r2, #4
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	188a      	adds	r2, r1, r2
 8000e10:	0052      	lsls	r2, r2, #1
 8000e12:	5ad3      	ldrh	r3, [r2, r3]
 8000e14:	001a      	movs	r2, r3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	189b      	adds	r3, r3, r2
 8000e1a:	617b      	str	r3, [r7, #20]
		for(int p=1;p<KSMOOTH;p++)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b09      	cmp	r3, #9
 8000e26:	ddee      	ble.n	8000e06 <read_smooth+0x5e>
		}
	adc_smoothed[n]=(int)((1.0*sum)/KSMOOTH);
 8000e28:	6978      	ldr	r0, [r7, #20]
 8000e2a:	f7ff fe15 	bl	8000a58 <__aeabi_i2d>
 8000e2e:	2200      	movs	r2, #0
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <read_smooth+0xc8>)
 8000e32:	f7ff fae5 	bl	8000400 <__aeabi_ddiv>
 8000e36:	0002      	movs	r2, r0
 8000e38:	000b      	movs	r3, r1
 8000e3a:	0010      	movs	r0, r2
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	f7ff fdd5 	bl	80009ec <__aeabi_d2iz>
 8000e42:	0003      	movs	r3, r0
 8000e44:	b299      	uxth	r1, r3
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <read_smooth+0xcc>)
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	0052      	lsls	r2, r2, #1
 8000e4c:	52d1      	strh	r1, [r2, r3]
	for(int n=0;n<SROWS*SCOLUMNS;n++)
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	3301      	adds	r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	2b0f      	cmp	r3, #15
 8000e58:	ddd2      	ble.n	8000e00 <read_smooth+0x58>
	}

}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b006      	add	sp, #24
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2000023c 	.word	0x2000023c
 8000e68:	2000027c 	.word	0x2000027c
 8000e6c:	200003bc 	.word	0x200003bc
 8000e70:	40240000 	.word	0x40240000
 8000e74:	2000025c 	.word	0x2000025c

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f000 fc91 	bl	80017a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f845 	bl	8000f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f000 f9ef 	bl	8001268 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e8a:	f000 f89b 	bl	8000fc4 <MX_ADC1_Init>
  MX_CRC_Init();
 8000e8e:	f000 f93b 	bl	8001108 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000e92:	f000 f95d 	bl	8001150 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e96:	f000 f9a9 	bl	80011ec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	buf_size = sprintf (tx_buffer, "ADC matrix NTC probe \r\nBuilt on  %s at %s \r\n",__DATE__, __TIME__);
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <main+0x78>)
 8000e9c:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <main+0x7c>)
 8000e9e:	4916      	ldr	r1, [pc, #88]	; (8000ef8 <main+0x80>)
 8000ea0:	4816      	ldr	r0, [pc, #88]	; (8000efc <main+0x84>)
 8000ea2:	f003 fbc5 	bl	8004630 <siprintf>
 8000ea6:	0003      	movs	r3, r0
 8000ea8:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit (&huart3, (uint8_t *)tx_buffer, buf_size, 10);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	4913      	ldr	r1, [pc, #76]	; (8000efc <main+0x84>)
 8000eb0:	4813      	ldr	r0, [pc, #76]	; (8000f00 <main+0x88>)
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	f002 fdf4 	bl	8003aa0 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	read_all_sensors();
	  read_smooth();
 8000eb8:	f7ff ff76 	bl	8000da8 <read_smooth>
	HAL_ADC_Stop(&hadc1);
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <main+0x8c>)
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f001 f87a 	bl	8001fb8 <HAL_ADC_Stop>
//	buf_size = sprintf (tx_buffer, "%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d\r\n", raw_temp[0],raw_temp[1],raw_temp[2],raw_temp[3],raw_temp[4],raw_temp[5],raw_temp[6],raw_temp[7],raw_temp[8],raw_temp[9],raw_temp[10],raw_temp[11],raw_temp[12],raw_temp[13],raw_temp[14],raw_temp[15]);
	buf_size = sprintf (tx_buffer, "%04d\r\n", adc_smoothed[0]);
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <main+0x90>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	001a      	movs	r2, r3
 8000eca:	4910      	ldr	r1, [pc, #64]	; (8000f0c <main+0x94>)
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <main+0x84>)
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f003 fbae 	bl	8004630 <siprintf>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	607b      	str	r3, [r7, #4]
//	while (HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin));
	HAL_UART_Transmit (&huart3, (uint8_t *)tx_buffer, buf_size, 10);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4907      	ldr	r1, [pc, #28]	; (8000efc <main+0x84>)
 8000ede:	4808      	ldr	r0, [pc, #32]	; (8000f00 <main+0x88>)
 8000ee0:	230a      	movs	r3, #10
 8000ee2:	f002 fddd 	bl	8003aa0 <HAL_UART_Transmit>
	HAL_Delay(200);
 8000ee6:	20c8      	movs	r0, #200	; 0xc8
 8000ee8:	f000 fce2 	bl	80018b0 <HAL_Delay>
	  read_smooth();
 8000eec:	e7e4      	b.n	8000eb8 <main+0x40>
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	08004f2c 	.word	0x08004f2c
 8000ef4:	08004f38 	.word	0x08004f38
 8000ef8:	08004f44 	.word	0x08004f44
 8000efc:	200003c0 	.word	0x200003c0
 8000f00:	200001a8 	.word	0x200001a8
 8000f04:	2000008c 	.word	0x2000008c
 8000f08:	2000025c 	.word	0x2000025c
 8000f0c:	08004f74 	.word	0x08004f74

08000f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b093      	sub	sp, #76	; 0x4c
 8000f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f16:	2414      	movs	r4, #20
 8000f18:	193b      	adds	r3, r7, r4
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	2334      	movs	r3, #52	; 0x34
 8000f1e:	001a      	movs	r2, r3
 8000f20:	2100      	movs	r1, #0
 8000f22:	f003 fb7d 	bl	8004620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	0018      	movs	r0, r3
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f003 fb76 	bl	8004620 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f001 ff21 	bl	8002d80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f3e:	193b      	adds	r3, r7, r4
 8000f40:	2202      	movs	r2, #2
 8000f42:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f44:	193b      	adds	r3, r7, r4
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	0052      	lsls	r2, r2, #1
 8000f4a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000f4c:	0021      	movs	r1, r4
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	2240      	movs	r2, #64	; 0x40
 8000f58:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	2202      	movs	r2, #2
 8000f64:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2200      	movs	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2208      	movs	r2, #8
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV32;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	22f8      	movs	r2, #248	; 0xf8
 8000f76:	0392      	lsls	r2, r2, #14
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	0592      	lsls	r2, r2, #22
 8000f80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	0018      	movs	r0, r3
 8000f86:	f001 ff47 	bl	8002e18 <HAL_RCC_OscConfig>
 8000f8a:	1e03      	subs	r3, r0, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f8e:	f000 fa3d 	bl	800140c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2207      	movs	r2, #7
 8000f96:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2102      	movs	r1, #2
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f002 fa42 	bl	8003438 <HAL_RCC_ClockConfig>
 8000fb4:	1e03      	subs	r3, r0, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000fb8:	f000 fa28 	bl	800140c <Error_Handler>
  }
}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b013      	add	sp, #76	; 0x4c
 8000fc2:	bd90      	pop	{r4, r7, pc}

08000fc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	0018      	movs	r0, r3
 8000fce:	230c      	movs	r3, #12
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	f003 fb24 	bl	8004620 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fd8:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <MX_ADC1_Init+0x130>)
 8000fda:	4a47      	ldr	r2, [pc, #284]	; (80010f8 <MX_ADC1_Init+0x134>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fde:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <MX_ADC1_Init+0x130>)
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	0612      	lsls	r2, r2, #24
 8000fe4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe6:	4b43      	ldr	r3, [pc, #268]	; (80010f4 <MX_ADC1_Init+0x130>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fec:	4b41      	ldr	r3, [pc, #260]	; (80010f4 <MX_ADC1_Init+0x130>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ff2:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <MX_ADC1_Init+0x130>)
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	0392      	lsls	r2, r2, #14
 8000ff8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffa:	4b3e      	ldr	r3, [pc, #248]	; (80010f4 <MX_ADC1_Init+0x130>)
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001000:	4b3c      	ldr	r3, [pc, #240]	; (80010f4 <MX_ADC1_Init+0x130>)
 8001002:	2200      	movs	r2, #0
 8001004:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001006:	4b3b      	ldr	r3, [pc, #236]	; (80010f4 <MX_ADC1_Init+0x130>)
 8001008:	2200      	movs	r2, #0
 800100a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800100c:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <MX_ADC1_Init+0x130>)
 800100e:	2200      	movs	r2, #0
 8001010:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8001012:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <MX_ADC1_Init+0x130>)
 8001014:	2204      	movs	r2, #4
 8001016:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001018:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <MX_ADC1_Init+0x130>)
 800101a:	2220      	movs	r2, #32
 800101c:	2101      	movs	r1, #1
 800101e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001020:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <MX_ADC1_Init+0x130>)
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001026:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <MX_ADC1_Init+0x130>)
 8001028:	2200      	movs	r2, #0
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800102c:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <MX_ADC1_Init+0x130>)
 800102e:	222c      	movs	r2, #44	; 0x2c
 8001030:	2100      	movs	r1, #0
 8001032:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001034:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <MX_ADC1_Init+0x130>)
 8001036:	2280      	movs	r2, #128	; 0x80
 8001038:	0152      	lsls	r2, r2, #5
 800103a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800103c:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <MX_ADC1_Init+0x130>)
 800103e:	2207      	movs	r2, #7
 8001040:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001042:	4b2c      	ldr	r3, [pc, #176]	; (80010f4 <MX_ADC1_Init+0x130>)
 8001044:	2200      	movs	r2, #0
 8001046:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001048:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <MX_ADC1_Init+0x130>)
 800104a:	223c      	movs	r2, #60	; 0x3c
 800104c:	2100      	movs	r1, #0
 800104e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <MX_ADC1_Init+0x130>)
 8001052:	2200      	movs	r2, #0
 8001054:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001056:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <MX_ADC1_Init+0x130>)
 8001058:	0018      	movs	r0, r3
 800105a:	f000 fdb7 	bl	8001bcc <HAL_ADC_Init>
 800105e:	1e03      	subs	r3, r0, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8001062:	f000 f9d3 	bl	800140c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001078:	1d3a      	adds	r2, r7, #4
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MX_ADC1_Init+0x130>)
 800107c:	0011      	movs	r1, r2
 800107e:	0018      	movs	r0, r3
 8001080:	f001 f876 	bl	8002170 <HAL_ADC_ConfigChannel>
 8001084:	1e03      	subs	r3, r0, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001088:	f000 f9c0 	bl	800140c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <MX_ADC1_Init+0x138>)
 8001090:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2204      	movs	r2, #4
 8001096:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001098:	1d3a      	adds	r2, r7, #4
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_ADC1_Init+0x130>)
 800109c:	0011      	movs	r1, r2
 800109e:	0018      	movs	r0, r3
 80010a0:	f001 f866 	bl	8002170 <HAL_ADC_ConfigChannel>
 80010a4:	1e03      	subs	r3, r0, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80010a8:	f000 f9b0 	bl	800140c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <MX_ADC1_Init+0x13c>)
 80010b0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2208      	movs	r2, #8
 80010b6:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b8:	1d3a      	adds	r2, r7, #4
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_ADC1_Init+0x130>)
 80010bc:	0011      	movs	r1, r2
 80010be:	0018      	movs	r0, r3
 80010c0:	f001 f856 	bl	8002170 <HAL_ADC_ConfigChannel>
 80010c4:	1e03      	subs	r3, r0, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80010c8:	f000 f9a0 	bl	800140c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <MX_ADC1_Init+0x140>)
 80010d0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	220c      	movs	r2, #12
 80010d6:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d8:	1d3a      	adds	r2, r7, #4
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_ADC1_Init+0x130>)
 80010dc:	0011      	movs	r1, r2
 80010de:	0018      	movs	r0, r3
 80010e0:	f001 f846 	bl	8002170 <HAL_ADC_ConfigChannel>
 80010e4:	1e03      	subs	r3, r0, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 80010e8:	f000 f990 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b004      	add	sp, #16
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000008c 	.word	0x2000008c
 80010f8:	40012400 	.word	0x40012400
 80010fc:	04000002 	.word	0x04000002
 8001100:	08000004 	.word	0x08000004
 8001104:	0c000008 	.word	0x0c000008

08001108 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_CRC_Init+0x40>)
 800110e:	4a0f      	ldr	r2, [pc, #60]	; (800114c <MX_CRC_Init+0x44>)
 8001110:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_CRC_Init+0x40>)
 8001114:	2200      	movs	r2, #0
 8001116:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_CRC_Init+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_CRC_Init+0x40>)
 8001120:	2200      	movs	r2, #0
 8001122:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_CRC_Init+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_CRC_Init+0x40>)
 800112c:	2201      	movs	r2, #1
 800112e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <MX_CRC_Init+0x40>)
 8001132:	0018      	movs	r0, r3
 8001134:	f001 fbce 	bl	80028d4 <HAL_CRC_Init>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d001      	beq.n	8001140 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800113c:	f000 f966 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	200000f0 	.word	0x200000f0
 800114c:	40023000 	.word	0x40023000

08001150 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <MX_USART1_UART_Init+0x94>)
 8001156:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <MX_USART1_UART_Init+0x98>)
 8001158:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <MX_USART1_UART_Init+0x94>)
 800115c:	22e1      	movs	r2, #225	; 0xe1
 800115e:	0252      	lsls	r2, r2, #9
 8001160:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <MX_USART1_UART_Init+0x94>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <MX_USART1_UART_Init+0x94>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_USART1_UART_Init+0x94>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_USART1_UART_Init+0x94>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_USART1_UART_Init+0x94>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_USART1_UART_Init+0x94>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_USART1_UART_Init+0x94>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_USART1_UART_Init+0x94>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_USART1_UART_Init+0x94>)
 8001194:	2200      	movs	r2, #0
 8001196:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_USART1_UART_Init+0x94>)
 800119a:	0018      	movs	r0, r3
 800119c:	f002 fc2a 	bl	80039f4 <HAL_UART_Init>
 80011a0:	1e03      	subs	r3, r0, #0
 80011a2:	d001      	beq.n	80011a8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011a4:	f000 f932 	bl	800140c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_USART1_UART_Init+0x94>)
 80011aa:	2100      	movs	r1, #0
 80011ac:	0018      	movs	r0, r3
 80011ae:	f003 f92d 	bl	800440c <HAL_UARTEx_SetTxFifoThreshold>
 80011b2:	1e03      	subs	r3, r0, #0
 80011b4:	d001      	beq.n	80011ba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011b6:	f000 f929 	bl	800140c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <MX_USART1_UART_Init+0x94>)
 80011bc:	2100      	movs	r1, #0
 80011be:	0018      	movs	r0, r3
 80011c0:	f003 f964 	bl	800448c <HAL_UARTEx_SetRxFifoThreshold>
 80011c4:	1e03      	subs	r3, r0, #0
 80011c6:	d001      	beq.n	80011cc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011c8:	f000 f920 	bl	800140c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <MX_USART1_UART_Init+0x94>)
 80011ce:	0018      	movs	r0, r3
 80011d0:	f003 f8e2 	bl	8004398 <HAL_UARTEx_DisableFifoMode>
 80011d4:	1e03      	subs	r3, r0, #0
 80011d6:	d001      	beq.n	80011dc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011d8:	f000 f918 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	20000114 	.word	0x20000114
 80011e8:	40013800 	.word	0x40013800

080011ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <MX_USART3_UART_Init+0x74>)
 80011f2:	4a1c      	ldr	r2, [pc, #112]	; (8001264 <MX_USART3_UART_Init+0x78>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_USART3_UART_Init+0x74>)
 80011f8:	22e1      	movs	r2, #225	; 0xe1
 80011fa:	0252      	lsls	r2, r2, #9
 80011fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <MX_USART3_UART_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <MX_USART3_UART_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <MX_USART3_UART_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_USART3_UART_Init+0x74>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_USART3_UART_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_USART3_UART_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_USART3_UART_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001228:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <MX_USART3_UART_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_USART3_UART_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001234:	480a      	ldr	r0, [pc, #40]	; (8001260 <MX_USART3_UART_Init+0x74>)
 8001236:	2300      	movs	r3, #0
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	f003 f83a 	bl	80042b4 <HAL_RS485Ex_Init>
 8001240:	1e03      	subs	r3, r0, #0
 8001242:	d001      	beq.n	8001248 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 8001244:	f000 f8e2 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <MX_USART3_UART_Init+0x74>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <MX_USART3_UART_Init+0x74>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2120      	movs	r1, #32
 8001254:	430a      	orrs	r2, r1
 8001256:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART3_Init 2 */

}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	200001a8 	.word	0x200001a8
 8001264:	40004800 	.word	0x40004800

08001268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b08b      	sub	sp, #44	; 0x2c
 800126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	2414      	movs	r4, #20
 8001270:	193b      	adds	r3, r7, r4
 8001272:	0018      	movs	r0, r3
 8001274:	2314      	movs	r3, #20
 8001276:	001a      	movs	r2, r3
 8001278:	2100      	movs	r1, #0
 800127a:	f003 f9d1 	bl	8004620 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	4b5a      	ldr	r3, [pc, #360]	; (80013e8 <MX_GPIO_Init+0x180>)
 8001280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001282:	4b59      	ldr	r3, [pc, #356]	; (80013e8 <MX_GPIO_Init+0x180>)
 8001284:	2104      	movs	r1, #4
 8001286:	430a      	orrs	r2, r1
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
 800128a:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <MX_GPIO_Init+0x180>)
 800128c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128e:	2204      	movs	r2, #4
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b54      	ldr	r3, [pc, #336]	; (80013e8 <MX_GPIO_Init+0x180>)
 8001298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800129a:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <MX_GPIO_Init+0x180>)
 800129c:	2101      	movs	r1, #1
 800129e:	430a      	orrs	r2, r1
 80012a0:	635a      	str	r2, [r3, #52]	; 0x34
 80012a2:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a6:	2201      	movs	r2, #1
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b4e      	ldr	r3, [pc, #312]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012b2:	4b4d      	ldr	r3, [pc, #308]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012b4:	2102      	movs	r1, #2
 80012b6:	430a      	orrs	r2, r1
 80012b8:	635a      	str	r2, [r3, #52]	; 0x34
 80012ba:	4b4b      	ldr	r3, [pc, #300]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012be:	2202      	movs	r2, #2
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	4b48      	ldr	r3, [pc, #288]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ca:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012cc:	2108      	movs	r1, #8
 80012ce:	430a      	orrs	r2, r1
 80012d0:	635a      	str	r2, [r3, #52]	; 0x34
 80012d2:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d6:	2208      	movs	r2, #8
 80012d8:	4013      	ands	r3, r2
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_Pin|GREEN_Pin|RED_Pin|PC7_Pin
 80012de:	4943      	ldr	r1, [pc, #268]	; (80013ec <MX_GPIO_Init+0x184>)
 80012e0:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <MX_GPIO_Init+0x188>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	0018      	movs	r0, r3
 80012e6:	f001 fd2d 	bl	8002d44 <HAL_GPIO_WritePin>
                          |PC7C7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, GPIO_PIN_SET);
 80012ea:	23a0      	movs	r3, #160	; 0xa0
 80012ec:	05db      	lsls	r3, r3, #23
 80012ee:	2201      	movs	r2, #1
 80012f0:	2180      	movs	r1, #128	; 0x80
 80012f2:	0018      	movs	r0, r3
 80012f4:	f001 fd26 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin, GPIO_PIN_SET);
 80012f8:	493e      	ldr	r1, [pc, #248]	; (80013f4 <MX_GPIO_Init+0x18c>)
 80012fa:	4b3f      	ldr	r3, [pc, #252]	; (80013f8 <MX_GPIO_Init+0x190>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	0018      	movs	r0, r3
 8001300:	f001 fd20 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB12_Pin|PB13_Pin|PB15_Pin|PB3_Pin
 8001304:	493d      	ldr	r1, [pc, #244]	; (80013fc <MX_GPIO_Init+0x194>)
 8001306:	4b3c      	ldr	r3, [pc, #240]	; (80013f8 <MX_GPIO_Init+0x190>)
 8001308:	2200      	movs	r2, #0
 800130a:	0018      	movs	r0, r3
 800130c:	f001 fd1a 	bl	8002d44 <HAL_GPIO_WritePin>
                          |PB4_Pin|COL4_Pin|COL3_Pin|COL2_Pin
                          |COL1_Pin|COL0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA8_Pin|PA11_Pin|PA12_Pin|PA15_Pin, GPIO_PIN_RESET);
 8001310:	2399      	movs	r3, #153	; 0x99
 8001312:	0219      	lsls	r1, r3, #8
 8001314:	23a0      	movs	r3, #160	; 0xa0
 8001316:	05db      	lsls	r3, r3, #23
 8001318:	2200      	movs	r2, #0
 800131a:	0018      	movs	r0, r3
 800131c:	f001 fd12 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD0_Pin|PD1_Pin|PD2_Pin|PD3_Pin, GPIO_PIN_RESET);
 8001320:	4b37      	ldr	r3, [pc, #220]	; (8001400 <MX_GPIO_Init+0x198>)
 8001322:	2200      	movs	r2, #0
 8001324:	210f      	movs	r1, #15
 8001326:	0018      	movs	r0, r3
 8001328:	f001 fd0c 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLUE_Pin GREEN_Pin RED_Pin PC7_Pin
                           PC7C7_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin|GREEN_Pin|RED_Pin|PC7_Pin
 800132c:	193b      	adds	r3, r7, r4
 800132e:	4a2f      	ldr	r2, [pc, #188]	; (80013ec <MX_GPIO_Init+0x184>)
 8001330:	601a      	str	r2, [r3, #0]
                          |PC7C7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	193b      	adds	r3, r7, r4
 8001334:	2201      	movs	r2, #1
 8001336:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	193b      	adds	r3, r7, r4
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	193b      	adds	r3, r7, r4
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001344:	193b      	adds	r3, r7, r4
 8001346:	4a2a      	ldr	r2, [pc, #168]	; (80013f0 <MX_GPIO_Init+0x188>)
 8001348:	0019      	movs	r1, r3
 800134a:	0010      	movs	r0, r2
 800134c:	f001 fb96 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : START_Pin */
  GPIO_InitStruct.Pin = START_Pin;
 8001350:	193b      	adds	r3, r7, r4
 8001352:	2240      	movs	r2, #64	; 0x40
 8001354:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001356:	193b      	adds	r3, r7, r4
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	193b      	adds	r3, r7, r4
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 8001362:	193a      	adds	r2, r7, r4
 8001364:	23a0      	movs	r3, #160	; 0xa0
 8001366:	05db      	lsls	r3, r3, #23
 8001368:	0011      	movs	r1, r2
 800136a:	0018      	movs	r0, r3
 800136c:	f001 fb86 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : R0_Pin PA8_Pin PA11_Pin PA12_Pin
                           PA15_Pin */
  GPIO_InitStruct.Pin = R0_Pin|PA8_Pin|PA11_Pin|PA12_Pin
 8001370:	193b      	adds	r3, r7, r4
 8001372:	4a24      	ldr	r2, [pc, #144]	; (8001404 <MX_GPIO_Init+0x19c>)
 8001374:	601a      	str	r2, [r3, #0]
                          |PA15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	193b      	adds	r3, r7, r4
 8001378:	2201      	movs	r2, #1
 800137a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	193b      	adds	r3, r7, r4
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	193b      	adds	r3, r7, r4
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	193a      	adds	r2, r7, r4
 800138a:	23a0      	movs	r3, #160	; 0xa0
 800138c:	05db      	lsls	r3, r3, #23
 800138e:	0011      	movs	r1, r2
 8001390:	0018      	movs	r0, r3
 8001392:	f001 fb73 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin
                           PB12_Pin PB13_Pin PB15_Pin PB3_Pin
                           PB4_Pin COL4_Pin COL3_Pin COL2_Pin
                           COL1_Pin COL0_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin
 8001396:	193b      	adds	r3, r7, r4
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <MX_GPIO_Init+0x1a0>)
 800139a:	601a      	str	r2, [r3, #0]
                          |PB12_Pin|PB13_Pin|PB15_Pin|PB3_Pin
                          |PB4_Pin|COL4_Pin|COL3_Pin|COL2_Pin
                          |COL1_Pin|COL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	193b      	adds	r3, r7, r4
 800139e:	2201      	movs	r2, #1
 80013a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	193b      	adds	r3, r7, r4
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	193b      	adds	r3, r7, r4
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	193b      	adds	r3, r7, r4
 80013b0:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <MX_GPIO_Init+0x190>)
 80013b2:	0019      	movs	r1, r3
 80013b4:	0010      	movs	r0, r2
 80013b6:	f001 fb61 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0_Pin PD1_Pin PD2_Pin PD3_Pin */
  GPIO_InitStruct.Pin = PD0_Pin|PD1_Pin|PD2_Pin|PD3_Pin;
 80013ba:	0021      	movs	r1, r4
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	220f      	movs	r2, #15
 80013c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	187b      	adds	r3, r7, r1
 80013c4:	2201      	movs	r2, #1
 80013c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <MX_GPIO_Init+0x198>)
 80013d8:	0019      	movs	r1, r3
 80013da:	0010      	movs	r0, r2
 80013dc:	f001 fb4e 	bl	8002a7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b00b      	add	sp, #44	; 0x2c
 80013e6:	bd90      	pop	{r4, r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	0000e0c0 	.word	0x0000e0c0
 80013f0:	50000800 	.word	0x50000800
 80013f4:	00000407 	.word	0x00000407
 80013f8:	50000400 	.word	0x50000400
 80013fc:	0000b3f8 	.word	0x0000b3f8
 8001400:	50000c00 	.word	0x50000c00
 8001404:	00009980 	.word	0x00009980
 8001408:	0000b7ff 	.word	0x0000b7ff

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	e7fe      	b.n	8001414 <Error_Handler+0x8>
	...

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_MspInit+0x44>)
 8001420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_MspInit+0x44>)
 8001424:	2101      	movs	r1, #1
 8001426:	430a      	orrs	r2, r1
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_MspInit+0x44>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	2201      	movs	r2, #1
 8001430:	4013      	ands	r3, r2
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_MspInit+0x44>)
 8001438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_MspInit+0x44>)
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	0549      	lsls	r1, r1, #21
 8001440:	430a      	orrs	r2, r1
 8001442:	63da      	str	r2, [r3, #60]	; 0x3c
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_MspInit+0x44>)
 8001446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	055b      	lsls	r3, r3, #21
 800144c:	4013      	ands	r3, r2
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b002      	add	sp, #8
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	40021000 	.word	0x40021000

08001460 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b08b      	sub	sp, #44	; 0x2c
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	2414      	movs	r4, #20
 800146a:	193b      	adds	r3, r7, r4
 800146c:	0018      	movs	r0, r3
 800146e:	2314      	movs	r3, #20
 8001470:	001a      	movs	r2, r3
 8001472:	2100      	movs	r1, #0
 8001474:	f003 f8d4 	bl	8004620 <memset>
  if(hadc->Instance==ADC1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a18      	ldr	r2, [pc, #96]	; (80014e0 <HAL_ADC_MspInit+0x80>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d129      	bne.n	80014d6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_ADC_MspInit+0x84>)
 8001484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_ADC_MspInit+0x84>)
 8001488:	2180      	movs	r1, #128	; 0x80
 800148a:	0349      	lsls	r1, r1, #13
 800148c:	430a      	orrs	r2, r1
 800148e:	641a      	str	r2, [r3, #64]	; 0x40
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_ADC_MspInit+0x84>)
 8001492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	035b      	lsls	r3, r3, #13
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_ADC_MspInit+0x84>)
 80014a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_ADC_MspInit+0x84>)
 80014a4:	2101      	movs	r1, #1
 80014a6:	430a      	orrs	r2, r1
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_ADC_MspInit+0x84>)
 80014ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ae:	2201      	movs	r2, #1
 80014b0:	4013      	ands	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	221f      	movs	r2, #31
 80014ba:	601a      	str	r2, [r3, #0]
                          |S4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014bc:	193b      	adds	r3, r7, r4
 80014be:	2203      	movs	r2, #3
 80014c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	193a      	adds	r2, r7, r4
 80014ca:	23a0      	movs	r3, #160	; 0xa0
 80014cc:	05db      	lsls	r3, r3, #23
 80014ce:	0011      	movs	r1, r2
 80014d0:	0018      	movs	r0, r3
 80014d2:	f001 fad3 	bl	8002a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b00b      	add	sp, #44	; 0x2c
 80014dc:	bd90      	pop	{r4, r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	40012400 	.word	0x40012400
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <HAL_CRC_MspInit+0x38>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d10d      	bne.n	8001516 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_CRC_MspInit+0x3c>)
 80014fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_CRC_MspInit+0x3c>)
 8001500:	2180      	movs	r1, #128	; 0x80
 8001502:	0149      	lsls	r1, r1, #5
 8001504:	430a      	orrs	r2, r1
 8001506:	639a      	str	r2, [r3, #56]	; 0x38
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_CRC_MspInit+0x3c>)
 800150a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	015b      	lsls	r3, r3, #5
 8001510:	4013      	ands	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b004      	add	sp, #16
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	40023000 	.word	0x40023000
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b095      	sub	sp, #84	; 0x54
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	233c      	movs	r3, #60	; 0x3c
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	0018      	movs	r0, r3
 8001536:	2314      	movs	r3, #20
 8001538:	001a      	movs	r2, r3
 800153a:	2100      	movs	r1, #0
 800153c:	f003 f870 	bl	8004620 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001540:	2420      	movs	r4, #32
 8001542:	193b      	adds	r3, r7, r4
 8001544:	0018      	movs	r0, r3
 8001546:	231c      	movs	r3, #28
 8001548:	001a      	movs	r2, r3
 800154a:	2100      	movs	r1, #0
 800154c:	f003 f868 	bl	8004620 <memset>
  if(huart->Instance==USART1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a50      	ldr	r2, [pc, #320]	; (8001698 <HAL_UART_MspInit+0x170>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d140      	bne.n	80015dc <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800155a:	193b      	adds	r3, r7, r4
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001560:	193b      	adds	r3, r7, r4
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001566:	193b      	adds	r3, r7, r4
 8001568:	0018      	movs	r0, r3
 800156a:	f002 f90f 	bl	800378c <HAL_RCCEx_PeriphCLKConfig>
 800156e:	1e03      	subs	r3, r0, #0
 8001570:	d001      	beq.n	8001576 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001572:	f7ff ff4b 	bl	800140c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001576:	4b49      	ldr	r3, [pc, #292]	; (800169c <HAL_UART_MspInit+0x174>)
 8001578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800157a:	4b48      	ldr	r3, [pc, #288]	; (800169c <HAL_UART_MspInit+0x174>)
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	01c9      	lsls	r1, r1, #7
 8001580:	430a      	orrs	r2, r1
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
 8001584:	4b45      	ldr	r3, [pc, #276]	; (800169c <HAL_UART_MspInit+0x174>)
 8001586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	01db      	lsls	r3, r3, #7
 800158c:	4013      	ands	r3, r2
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b42      	ldr	r3, [pc, #264]	; (800169c <HAL_UART_MspInit+0x174>)
 8001594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001596:	4b41      	ldr	r3, [pc, #260]	; (800169c <HAL_UART_MspInit+0x174>)
 8001598:	2101      	movs	r1, #1
 800159a:	430a      	orrs	r2, r1
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
 800159e:	4b3f      	ldr	r3, [pc, #252]	; (800169c <HAL_UART_MspInit+0x174>)
 80015a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a2:	2201      	movs	r2, #1
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015aa:	213c      	movs	r1, #60	; 0x3c
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	22c0      	movs	r2, #192	; 0xc0
 80015b0:	00d2      	lsls	r2, r2, #3
 80015b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	2202      	movs	r2, #2
 80015b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	187b      	adds	r3, r7, r1
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	2201      	movs	r2, #1
 80015ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	187a      	adds	r2, r7, r1
 80015ce:	23a0      	movs	r3, #160	; 0xa0
 80015d0:	05db      	lsls	r3, r3, #23
 80015d2:	0011      	movs	r1, r2
 80015d4:	0018      	movs	r0, r3
 80015d6:	f001 fa51 	bl	8002a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015da:	e058      	b.n	800168e <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART3)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a2f      	ldr	r2, [pc, #188]	; (80016a0 <HAL_UART_MspInit+0x178>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d153      	bne.n	800168e <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <HAL_UART_MspInit+0x174>)
 80015e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015ea:	4b2c      	ldr	r3, [pc, #176]	; (800169c <HAL_UART_MspInit+0x174>)
 80015ec:	2180      	movs	r1, #128	; 0x80
 80015ee:	02c9      	lsls	r1, r1, #11
 80015f0:	430a      	orrs	r2, r1
 80015f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80015f4:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_UART_MspInit+0x174>)
 80015f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	02db      	lsls	r3, r3, #11
 80015fc:	4013      	ands	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_UART_MspInit+0x174>)
 8001604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001606:	4b25      	ldr	r3, [pc, #148]	; (800169c <HAL_UART_MspInit+0x174>)
 8001608:	2101      	movs	r1, #1
 800160a:	430a      	orrs	r2, r1
 800160c:	635a      	str	r2, [r3, #52]	; 0x34
 800160e:	4b23      	ldr	r3, [pc, #140]	; (800169c <HAL_UART_MspInit+0x174>)
 8001610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001612:	2201      	movs	r2, #1
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <HAL_UART_MspInit+0x174>)
 800161c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800161e:	4b1f      	ldr	r3, [pc, #124]	; (800169c <HAL_UART_MspInit+0x174>)
 8001620:	2102      	movs	r1, #2
 8001622:	430a      	orrs	r2, r1
 8001624:	635a      	str	r2, [r3, #52]	; 0x34
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_UART_MspInit+0x174>)
 8001628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162a:	2202      	movs	r2, #2
 800162c:	4013      	ands	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U3TX_Pin;
 8001632:	243c      	movs	r4, #60	; 0x3c
 8001634:	193b      	adds	r3, r7, r4
 8001636:	2220      	movs	r2, #32
 8001638:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	193b      	adds	r3, r7, r4
 800163c:	2202      	movs	r2, #2
 800163e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	193b      	adds	r3, r7, r4
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	193b      	adds	r3, r7, r4
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800164c:	193b      	adds	r3, r7, r4
 800164e:	2204      	movs	r2, #4
 8001650:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(U3TX_GPIO_Port, &GPIO_InitStruct);
 8001652:	193a      	adds	r2, r7, r4
 8001654:	23a0      	movs	r3, #160	; 0xa0
 8001656:	05db      	lsls	r3, r3, #23
 8001658:	0011      	movs	r1, r2
 800165a:	0018      	movs	r0, r3
 800165c:	f001 fa0e 	bl	8002a7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = U3RX_Pin|U3DE_Pin;
 8001660:	0021      	movs	r1, r4
 8001662:	187b      	adds	r3, r7, r1
 8001664:	2290      	movs	r2, #144	; 0x90
 8001666:	01d2      	lsls	r2, r2, #7
 8001668:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	187b      	adds	r3, r7, r1
 800166c:	2202      	movs	r2, #2
 800166e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	187b      	adds	r3, r7, r1
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	187b      	adds	r3, r7, r1
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800167c:	187b      	adds	r3, r7, r1
 800167e:	2204      	movs	r2, #4
 8001680:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001682:	187b      	adds	r3, r7, r1
 8001684:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_UART_MspInit+0x17c>)
 8001686:	0019      	movs	r1, r3
 8001688:	0010      	movs	r0, r2
 800168a:	f001 f9f7 	bl	8002a7c <HAL_GPIO_Init>
}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	b015      	add	sp, #84	; 0x54
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	40013800 	.word	0x40013800
 800169c:	40021000 	.word	0x40021000
 80016a0:	40004800 	.word	0x40004800
 80016a4:	50000400 	.word	0x50000400

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <NMI_Handler+0x4>

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016cc:	f000 f8d4 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <_sbrk+0x5c>)
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <_sbrk+0x60>)
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <_sbrk+0x64>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <_sbrk+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	18d3      	adds	r3, r2, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	429a      	cmp	r2, r3
 8001706:	d207      	bcs.n	8001718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001708:	f002 ff60 	bl	80045cc <__errno>
 800170c:	0003      	movs	r3, r0
 800170e:	220c      	movs	r2, #12
 8001710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001712:	2301      	movs	r3, #1
 8001714:	425b      	negs	r3, r3
 8001716:	e009      	b.n	800172c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	18d2      	adds	r2, r2, r3
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <_sbrk+0x64>)
 8001728:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	b006      	add	sp, #24
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20009000 	.word	0x20009000
 8001738:	00000400 	.word	0x00000400
 800173c:	200004c0 	.word	0x200004c0
 8001740:	200004d8 	.word	0x200004d8

08001744 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001752:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001754:	f7ff fff6 	bl	8001744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001758:	480c      	ldr	r0, [pc, #48]	; (800178c <LoopForever+0x6>)
  ldr r1, =_edata
 800175a:	490d      	ldr	r1, [pc, #52]	; (8001790 <LoopForever+0xa>)
  ldr r2, =_sidata
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <LoopForever+0xe>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001770:	4c0a      	ldr	r4, [pc, #40]	; (800179c <LoopForever+0x16>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800177e:	f002 ff2b 	bl	80045d8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001782:	f7ff fb79 	bl	8000e78 <main>

08001786 <LoopForever>:

LoopForever:
  b LoopForever
 8001786:	e7fe      	b.n	8001786 <LoopForever>
  ldr   r0, =_estack
 8001788:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800178c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001790:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001794:	08005094 	.word	0x08005094
  ldr r2, =_sbss
 8001798:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800179c:	200004d8 	.word	0x200004d8

080017a0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a0:	e7fe      	b.n	80017a0 <ADC1_IRQHandler>
	...

080017a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017aa:	1dfb      	adds	r3, r7, #7
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_Init+0x3c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <HAL_Init+0x3c>)
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	0049      	lsls	r1, r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017be:	2003      	movs	r0, #3
 80017c0:	f000 f810 	bl	80017e4 <HAL_InitTick>
 80017c4:	1e03      	subs	r3, r0, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80017c8:	1dfb      	adds	r3, r7, #7
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	e001      	b.n	80017d4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fe22 	bl	8001418 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017d4:	1dfb      	adds	r3, r7, #7
 80017d6:	781b      	ldrb	r3, [r3, #0]
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b002      	add	sp, #8
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40022000 	.word	0x40022000

080017e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017ec:	230f      	movs	r3, #15
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_InitTick+0x88>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d02b      	beq.n	8001854 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <HAL_InitTick+0x8c>)
 80017fe:	681c      	ldr	r4, [r3, #0]
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_InitTick+0x88>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	0019      	movs	r1, r3
 8001806:	23fa      	movs	r3, #250	; 0xfa
 8001808:	0098      	lsls	r0, r3, #2
 800180a:	f7fe fc83 	bl	8000114 <__udivsi3>
 800180e:	0003      	movs	r3, r0
 8001810:	0019      	movs	r1, r3
 8001812:	0020      	movs	r0, r4
 8001814:	f7fe fc7e 	bl	8000114 <__udivsi3>
 8001818:	0003      	movs	r3, r0
 800181a:	0018      	movs	r0, r3
 800181c:	f001 f84d 	bl	80028ba <HAL_SYSTICK_Config>
 8001820:	1e03      	subs	r3, r0, #0
 8001822:	d112      	bne.n	800184a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d80a      	bhi.n	8001840 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	2301      	movs	r3, #1
 800182e:	425b      	negs	r3, r3
 8001830:	2200      	movs	r2, #0
 8001832:	0018      	movs	r0, r3
 8001834:	f001 f82c 	bl	8002890 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_InitTick+0x90>)
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e00d      	b.n	800185c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001840:	230f      	movs	r3, #15
 8001842:	18fb      	adds	r3, r7, r3
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e008      	b.n	800185c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800184a:	230f      	movs	r3, #15
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	e003      	b.n	800185c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001854:	230f      	movs	r3, #15
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800185c:	230f      	movs	r3, #15
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	781b      	ldrb	r3, [r3, #0]
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b005      	add	sp, #20
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	20000008 	.word	0x20000008
 8001870:	20000000 	.word	0x20000000
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_IncTick+0x1c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	001a      	movs	r2, r3
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x20>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	18d2      	adds	r2, r2, r3
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <HAL_IncTick+0x20>)
 800188a:	601a      	str	r2, [r3, #0]
}
 800188c:	46c0      	nop			; (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	20000008 	.word	0x20000008
 8001898:	200004c4 	.word	0x200004c4

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b02      	ldr	r3, [pc, #8]	; (80018ac <HAL_GetTick+0x10>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	0018      	movs	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	200004c4 	.word	0x200004c4

080018b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff fff0 	bl	800189c <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3301      	adds	r3, #1
 80018c8:	d005      	beq.n	80018d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_Delay+0x44>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	001a      	movs	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	189b      	adds	r3, r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	f7ff ffe0 	bl	800189c <HAL_GetTick>
 80018dc:	0002      	movs	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d8f7      	bhi.n	80018d8 <HAL_Delay+0x28>
  {
  }
}
 80018e8:	46c0      	nop			; (mov r8, r8)
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b004      	add	sp, #16
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	20000008 	.word	0x20000008

080018f8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001908:	401a      	ands	r2, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	46bd      	mov	sp, r7
 8001916:	b002      	add	sp, #8
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	fe3fffff 	.word	0xfe3fffff

08001920 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	23e0      	movs	r3, #224	; 0xe0
 800192e:	045b      	lsls	r3, r3, #17
 8001930:	4013      	ands	r3, r2
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b002      	add	sp, #8
 8001938:	bd80      	pop	{r7, pc}

0800193a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	2104      	movs	r1, #4
 800194e:	400a      	ands	r2, r1
 8001950:	2107      	movs	r1, #7
 8001952:	4091      	lsls	r1, r2
 8001954:	000a      	movs	r2, r1
 8001956:	43d2      	mvns	r2, r2
 8001958:	401a      	ands	r2, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2104      	movs	r1, #4
 800195e:	400b      	ands	r3, r1
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4099      	lsls	r1, r3
 8001964:	000b      	movs	r3, r1
 8001966:	431a      	orrs	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800196c:	46c0      	nop			; (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b004      	add	sp, #16
 8001972:	bd80      	pop	{r7, pc}

08001974 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	2104      	movs	r1, #4
 8001986:	400a      	ands	r2, r1
 8001988:	2107      	movs	r1, #7
 800198a:	4091      	lsls	r1, r2
 800198c:	000a      	movs	r2, r1
 800198e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2104      	movs	r1, #4
 8001994:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001996:	40da      	lsrs	r2, r3
 8001998:	0013      	movs	r3, r2
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b002      	add	sp, #8
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	23c0      	movs	r3, #192	; 0xc0
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	4013      	ands	r3, r2
 80019b4:	d101      	bne.n	80019ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	211f      	movs	r1, #31
 80019d8:	400a      	ands	r2, r1
 80019da:	210f      	movs	r1, #15
 80019dc:	4091      	lsls	r1, r2
 80019de:	000a      	movs	r2, r1
 80019e0:	43d2      	mvns	r2, r2
 80019e2:	401a      	ands	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	0e9b      	lsrs	r3, r3, #26
 80019e8:	210f      	movs	r1, #15
 80019ea:	4019      	ands	r1, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	201f      	movs	r0, #31
 80019f0:	4003      	ands	r3, r0
 80019f2:	4099      	lsls	r1, r3
 80019f4:	000b      	movs	r3, r1
 80019f6:	431a      	orrs	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b004      	add	sp, #16
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	035b      	lsls	r3, r3, #13
 8001a16:	0b5b      	lsrs	r3, r3, #13
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b002      	add	sp, #8
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	0352      	lsls	r2, r2, #13
 8001a38:	0b52      	lsrs	r2, r2, #13
 8001a3a:	43d2      	mvns	r2, r2
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b002      	add	sp, #8
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	0212      	lsls	r2, r2, #8
 8001a60:	43d2      	mvns	r2, r2
 8001a62:	401a      	ands	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
 8001a6c:	4904      	ldr	r1, [pc, #16]	; (8001a80 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001a6e:	400b      	ands	r3, r1
 8001a70:	431a      	orrs	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	b004      	add	sp, #16
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	07ffff00 	.word	0x07ffff00

08001a84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	2280      	movs	r2, #128	; 0x80
 8001a96:	0552      	lsls	r2, r2, #21
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b002      	add	sp, #8
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	6fffffe8 	.word	0x6fffffe8

08001aac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	055b      	lsls	r3, r3, #21
 8001abc:	401a      	ands	r2, r3
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	055b      	lsls	r3, r3, #21
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d101      	bne.n	8001aca <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <LL_ADC_Enable+0x20>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	7fffffe8 	.word	0x7fffffe8

08001af8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <LL_ADC_Disable+0x20>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	2202      	movs	r2, #2
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	7fffffe8 	.word	0x7fffffe8

08001b1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <LL_ADC_IsEnabled+0x18>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <LL_ADC_IsEnabled+0x1a>
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	0018      	movs	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b002      	add	sp, #8
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d101      	bne.n	8001b56 <LL_ADC_IsDisableOngoing+0x18>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <LL_ADC_IsDisableOngoing+0x1a>
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	0018      	movs	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b002      	add	sp, #8
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <LL_ADC_REG_StartConversion+0x20>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2204      	movs	r2, #4
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b002      	add	sp, #8
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	7fffffe8 	.word	0x7fffffe8

08001b84 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <LL_ADC_REG_StopConversion+0x20>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	2210      	movs	r2, #16
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b002      	add	sp, #8
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	7fffffe8 	.word	0x7fffffe8

08001ba8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d101      	bne.n	8001bc0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b002      	add	sp, #8
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd4:	231f      	movs	r3, #31
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e17f      	b.n	8001ef2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10a      	bne.n	8001c10 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f7ff fc2f 	bl	8001460 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2254      	movs	r2, #84	; 0x54
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff ff49 	bl	8001aac <LL_ADC_IsInternalRegulatorEnabled>
 8001c1a:	1e03      	subs	r3, r0, #0
 8001c1c:	d115      	bne.n	8001c4a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	0018      	movs	r0, r3
 8001c24:	f7ff ff2e 	bl	8001a84 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c28:	4bb4      	ldr	r3, [pc, #720]	; (8001efc <HAL_ADC_Init+0x330>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	49b4      	ldr	r1, [pc, #720]	; (8001f00 <HAL_ADC_Init+0x334>)
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f7fe fa70 	bl	8000114 <__udivsi3>
 8001c34:	0003      	movs	r3, r0
 8001c36:	3301      	adds	r3, #1
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c3c:	e002      	b.n	8001c44 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f9      	bne.n	8001c3e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f7ff ff2c 	bl	8001aac <LL_ADC_IsInternalRegulatorEnabled>
 8001c54:	1e03      	subs	r3, r0, #0
 8001c56:	d10f      	bne.n	8001c78 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c68:	2201      	movs	r2, #1
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c70:	231f      	movs	r3, #31
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff ff93 	bl	8001ba8 <LL_ADC_REG_IsConversionOngoing>
 8001c82:	0003      	movs	r3, r0
 8001c84:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d000      	beq.n	8001c92 <HAL_ADC_Init+0xc6>
 8001c90:	e122      	b.n	8001ed8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d000      	beq.n	8001c9a <HAL_ADC_Init+0xce>
 8001c98:	e11e      	b.n	8001ed8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	4a99      	ldr	r2, [pc, #612]	; (8001f04 <HAL_ADC_Init+0x338>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f7ff ff34 	bl	8001b1c <LL_ADC_IsEnabled>
 8001cb4:	1e03      	subs	r3, r0, #0
 8001cb6:	d000      	beq.n	8001cba <HAL_ADC_Init+0xee>
 8001cb8:	e0ad      	b.n	8001e16 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	7e1b      	ldrb	r3, [r3, #24]
 8001cc2:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001cc4:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7e5b      	ldrb	r3, [r3, #25]
 8001cca:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ccc:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7e9b      	ldrb	r3, [r3, #26]
 8001cd2:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001cd4:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <HAL_ADC_Init+0x118>
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	015b      	lsls	r3, r3, #5
 8001ce2:	e000      	b.n	8001ce6 <HAL_ADC_Init+0x11a>
 8001ce4:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001ce6:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001cec:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	da04      	bge.n	8001d00 <HAL_ADC_Init+0x134>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	085b      	lsrs	r3, r3, #1
 8001cfe:	e001      	b.n	8001d04 <HAL_ADC_Init+0x138>
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001d04:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	212c      	movs	r1, #44	; 0x2c
 8001d0a:	5c5b      	ldrb	r3, [r3, r1]
 8001d0c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001d0e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	5c9b      	ldrb	r3, [r3, r2]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d115      	bne.n	8001d4c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7e9b      	ldrb	r3, [r3, #26]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2280      	movs	r2, #128	; 0x80
 8001d2c:	0252      	lsls	r2, r2, #9
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	e00b      	b.n	8001d4c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	2220      	movs	r2, #32
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	2201      	movs	r2, #1
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00a      	beq.n	8001d6a <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d58:	23e0      	movs	r3, #224	; 0xe0
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001d62:	4313      	orrs	r3, r2
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4a65      	ldr	r2, [pc, #404]	; (8001f08 <HAL_ADC_Init+0x33c>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	0f9b      	lsrs	r3, r3, #30
 8001d86:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	223c      	movs	r2, #60	; 0x3c
 8001d98:	5c9b      	ldrb	r3, [r3, r2]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d111      	bne.n	8001dc2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	0f9b      	lsrs	r3, r3, #30
 8001da4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001daa:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001db0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001db6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	4a50      	ldr	r2, [pc, #320]	; (8001f0c <HAL_ADC_Init+0x340>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	0019      	movs	r1, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	23c0      	movs	r3, #192	; 0xc0
 8001dde:	061b      	lsls	r3, r3, #24
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d018      	beq.n	8001e16 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	05db      	lsls	r3, r3, #23
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d012      	beq.n	8001e16 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	061b      	lsls	r3, r3, #24
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d00c      	beq.n	8001e16 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001dfc:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <HAL_ADC_Init+0x344>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a44      	ldr	r2, [pc, #272]	; (8001f14 <HAL_ADC_Init+0x348>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	23f0      	movs	r3, #240	; 0xf0
 8001e0c:	039b      	lsls	r3, r3, #14
 8001e0e:	401a      	ands	r2, r3
 8001e10:	4b3f      	ldr	r3, [pc, #252]	; (8001f10 <HAL_ADC_Init+0x344>)
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1e:	001a      	movs	r2, r3
 8001e20:	2100      	movs	r1, #0
 8001e22:	f7ff fd8a 	bl	800193a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2e:	493a      	ldr	r1, [pc, #232]	; (8001f18 <HAL_ADC_Init+0x34c>)
 8001e30:	001a      	movs	r2, r3
 8001e32:	f7ff fd82 	bl	800193a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2110      	movs	r1, #16
 8001e4a:	4249      	negs	r1, r1
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
 8001e50:	e018      	b.n	8001e84 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	039b      	lsls	r3, r3, #14
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d112      	bne.n	8001e84 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	221c      	movs	r2, #28
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2210      	movs	r2, #16
 8001e72:	4252      	negs	r2, r2
 8001e74:	409a      	lsls	r2, r3
 8001e76:	0011      	movs	r1, r2
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2100      	movs	r1, #0
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f7ff fd72 	bl	8001974 <LL_ADC_GetSamplingTimeCommonChannels>
 8001e90:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d10b      	bne.n	8001eb2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	4393      	bics	r3, r2
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001eb0:	e01c      	b.n	8001eec <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	2212      	movs	r2, #18
 8001eb8:	4393      	bics	r3, r2
 8001eba:	2210      	movs	r2, #16
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001ece:	231f      	movs	r3, #31
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ed6:	e009      	b.n	8001eec <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	2210      	movs	r2, #16
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ee4:	231f      	movs	r3, #31
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001eec:	231f      	movs	r3, #31
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	781b      	ldrb	r3, [r3, #0]
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b008      	add	sp, #32
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	20000000 	.word	0x20000000
 8001f00:	00030d40 	.word	0x00030d40
 8001f04:	fffffefd 	.word	0xfffffefd
 8001f08:	fffe0201 	.word	0xfffe0201
 8001f0c:	1ffffc02 	.word	0x1ffffc02
 8001f10:	40012708 	.word	0x40012708
 8001f14:	ffc3ffff 	.word	0xffc3ffff
 8001f18:	07ffff04 	.word	0x07ffff04

08001f1c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f1c:	b5b0      	push	{r4, r5, r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff fe3d 	bl	8001ba8 <LL_ADC_REG_IsConversionOngoing>
 8001f2e:	1e03      	subs	r3, r0, #0
 8001f30:	d135      	bne.n	8001f9e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2254      	movs	r2, #84	; 0x54
 8001f36:	5c9b      	ldrb	r3, [r3, r2]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADC_Start+0x24>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e035      	b.n	8001fac <HAL_ADC_Start+0x90>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2254      	movs	r2, #84	; 0x54
 8001f44:	2101      	movs	r1, #1
 8001f46:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f48:	250f      	movs	r5, #15
 8001f4a:	197c      	adds	r4, r7, r5
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f000 fb28 	bl	80025a4 <ADC_Enable>
 8001f54:	0003      	movs	r3, r0
 8001f56:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f58:	197b      	adds	r3, r7, r5
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d119      	bne.n	8001f94 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <HAL_ADC_Start+0x98>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	2280      	movs	r2, #128	; 0x80
 8001f6a:	0052      	lsls	r2, r2, #1
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	221c      	movs	r2, #28
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2254      	movs	r2, #84	; 0x54
 8001f84:	2100      	movs	r1, #0
 8001f86:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7ff fde7 	bl	8001b60 <LL_ADC_REG_StartConversion>
 8001f92:	e008      	b.n	8001fa6 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2254      	movs	r2, #84	; 0x54
 8001f98:	2100      	movs	r1, #0
 8001f9a:	5499      	strb	r1, [r3, r2]
 8001f9c:	e003      	b.n	8001fa6 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f9e:	230f      	movs	r3, #15
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001fa6:	230f      	movs	r3, #15
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	781b      	ldrb	r3, [r3, #0]
}
 8001fac:	0018      	movs	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b004      	add	sp, #16
 8001fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb4:	fffff0fe 	.word	0xfffff0fe

08001fb8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b5b0      	push	{r4, r5, r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2254      	movs	r2, #84	; 0x54
 8001fc4:	5c9b      	ldrb	r3, [r3, r2]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_ADC_Stop+0x16>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e029      	b.n	8002022 <HAL_ADC_Stop+0x6a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2254      	movs	r2, #84	; 0x54
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001fd6:	250f      	movs	r5, #15
 8001fd8:	197c      	adds	r4, r7, r5
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 fa9f 	bl	8002520 <ADC_ConversionStop>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001fe6:	197b      	adds	r3, r7, r5
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d112      	bne.n	8002014 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001fee:	197c      	adds	r4, r7, r5
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f000 fb5c 	bl	80026b0 <ADC_Disable>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ffc:	197b      	adds	r3, r7, r5
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d107      	bne.n	8002014 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	4a08      	ldr	r2, [pc, #32]	; (800202c <HAL_ADC_Stop+0x74>)
 800200a:	4013      	ands	r3, r2
 800200c:	2201      	movs	r2, #1
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2254      	movs	r2, #84	; 0x54
 8002018:	2100      	movs	r1, #0
 800201a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800201c:	230f      	movs	r3, #15
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	781b      	ldrb	r3, [r3, #0]
}
 8002022:	0018      	movs	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	b004      	add	sp, #16
 8002028:	bdb0      	pop	{r4, r5, r7, pc}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	fffffefe 	.word	0xfffffefe

08002030 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	2b08      	cmp	r3, #8
 8002040:	d102      	bne.n	8002048 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002042:	2308      	movs	r3, #8
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e00f      	b.n	8002068 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	4013      	ands	r3, r2
 8002052:	d007      	beq.n	8002064 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	2220      	movs	r2, #32
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e072      	b.n	800214a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002064:	2304      	movs	r3, #4
 8002066:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002068:	f7ff fc18 	bl	800189c <HAL_GetTick>
 800206c:	0003      	movs	r3, r0
 800206e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002070:	e01f      	b.n	80020b2 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	3301      	adds	r3, #1
 8002076:	d01c      	beq.n	80020b2 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002078:	f7ff fc10 	bl	800189c <HAL_GetTick>
 800207c:	0002      	movs	r2, r0
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d302      	bcc.n	800208e <HAL_ADC_PollForConversion+0x5e>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d111      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	d10b      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	2204      	movs	r2, #4
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2254      	movs	r2, #84	; 0x54
 80020aa:	2100      	movs	r1, #0
 80020ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e04b      	b.n	800214a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4013      	ands	r3, r2
 80020bc:	d0d9      	beq.n	8002072 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	2280      	movs	r2, #128	; 0x80
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff fc66 	bl	80019a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d02e      	beq.n	8002138 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	7e9b      	ldrb	r3, [r3, #26]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d12a      	bne.n	8002138 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2208      	movs	r2, #8
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d123      	bne.n	8002138 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff fd57 	bl	8001ba8 <LL_ADC_REG_IsConversionOngoing>
 80020fa:	1e03      	subs	r3, r0, #0
 80020fc:	d110      	bne.n	8002120 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	210c      	movs	r1, #12
 800210a:	438a      	bics	r2, r1
 800210c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	4a10      	ldr	r2, [pc, #64]	; (8002154 <HAL_ADC_PollForConversion+0x124>)
 8002114:	4013      	ands	r3, r2
 8002116:	2201      	movs	r2, #1
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	659a      	str	r2, [r3, #88]	; 0x58
 800211e:	e00b      	b.n	8002138 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	2220      	movs	r2, #32
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002130:	2201      	movs	r2, #1
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7e1b      	ldrb	r3, [r3, #24]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d103      	bne.n	8002148 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	220c      	movs	r2, #12
 8002146:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b004      	add	sp, #16
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	fffffefe 	.word	0xfffffefe

08002158 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b002      	add	sp, #8
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800217a:	2317      	movs	r3, #23
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2254      	movs	r2, #84	; 0x54
 800218a:	5c9b      	ldrb	r3, [r3, r2]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x24>
 8002190:	2302      	movs	r3, #2
 8002192:	e1c0      	b.n	8002516 <HAL_ADC_ConfigChannel+0x3a6>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2254      	movs	r2, #84	; 0x54
 8002198:	2101      	movs	r1, #1
 800219a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7ff fd01 	bl	8001ba8 <LL_ADC_REG_IsConversionOngoing>
 80021a6:	1e03      	subs	r3, r0, #0
 80021a8:	d000      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x3c>
 80021aa:	e1a3      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d100      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x46>
 80021b4:	e143      	b.n	800243e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691a      	ldr	r2, [r3, #16]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	429a      	cmp	r2, r3
 80021c0:	d004      	beq.n	80021cc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80021c6:	4ac1      	ldr	r2, [pc, #772]	; (80024cc <HAL_ADC_ConfigChannel+0x35c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d108      	bne.n	80021de <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0019      	movs	r1, r3
 80021d6:	0010      	movs	r0, r2
 80021d8:	f7ff fc14 	bl	8001a04 <LL_ADC_REG_SetSequencerChAdd>
 80021dc:	e0c9      	b.n	8002372 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	211f      	movs	r1, #31
 80021e8:	400b      	ands	r3, r1
 80021ea:	210f      	movs	r1, #15
 80021ec:	4099      	lsls	r1, r3
 80021ee:	000b      	movs	r3, r1
 80021f0:	43db      	mvns	r3, r3
 80021f2:	4013      	ands	r3, r2
 80021f4:	0019      	movs	r1, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	035b      	lsls	r3, r3, #13
 80021fc:	0b5b      	lsrs	r3, r3, #13
 80021fe:	d105      	bne.n	800220c <HAL_ADC_ConfigChannel+0x9c>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0e9b      	lsrs	r3, r3, #26
 8002206:	221f      	movs	r2, #31
 8002208:	4013      	ands	r3, r2
 800220a:	e098      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2201      	movs	r2, #1
 8002212:	4013      	ands	r3, r2
 8002214:	d000      	beq.n	8002218 <HAL_ADC_ConfigChannel+0xa8>
 8002216:	e091      	b.n	800233c <HAL_ADC_ConfigChannel+0x1cc>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2202      	movs	r2, #2
 800221e:	4013      	ands	r3, r2
 8002220:	d000      	beq.n	8002224 <HAL_ADC_ConfigChannel+0xb4>
 8002222:	e089      	b.n	8002338 <HAL_ADC_ConfigChannel+0x1c8>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2204      	movs	r2, #4
 800222a:	4013      	ands	r3, r2
 800222c:	d000      	beq.n	8002230 <HAL_ADC_ConfigChannel+0xc0>
 800222e:	e081      	b.n	8002334 <HAL_ADC_ConfigChannel+0x1c4>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2208      	movs	r2, #8
 8002236:	4013      	ands	r3, r2
 8002238:	d000      	beq.n	800223c <HAL_ADC_ConfigChannel+0xcc>
 800223a:	e079      	b.n	8002330 <HAL_ADC_ConfigChannel+0x1c0>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2210      	movs	r2, #16
 8002242:	4013      	ands	r3, r2
 8002244:	d000      	beq.n	8002248 <HAL_ADC_ConfigChannel+0xd8>
 8002246:	e071      	b.n	800232c <HAL_ADC_ConfigChannel+0x1bc>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2220      	movs	r2, #32
 800224e:	4013      	ands	r3, r2
 8002250:	d000      	beq.n	8002254 <HAL_ADC_ConfigChannel+0xe4>
 8002252:	e069      	b.n	8002328 <HAL_ADC_ConfigChannel+0x1b8>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2240      	movs	r2, #64	; 0x40
 800225a:	4013      	ands	r3, r2
 800225c:	d000      	beq.n	8002260 <HAL_ADC_ConfigChannel+0xf0>
 800225e:	e061      	b.n	8002324 <HAL_ADC_ConfigChannel+0x1b4>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2280      	movs	r2, #128	; 0x80
 8002266:	4013      	ands	r3, r2
 8002268:	d000      	beq.n	800226c <HAL_ADC_ConfigChannel+0xfc>
 800226a:	e059      	b.n	8002320 <HAL_ADC_ConfigChannel+0x1b0>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4013      	ands	r3, r2
 8002276:	d151      	bne.n	800231c <HAL_ADC_ConfigChannel+0x1ac>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4013      	ands	r3, r2
 8002282:	d149      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x1a8>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4013      	ands	r3, r2
 800228e:	d141      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x1a4>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	4013      	ands	r3, r2
 800229a:	d139      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x1a0>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	015b      	lsls	r3, r3, #5
 80022a4:	4013      	ands	r3, r2
 80022a6:	d131      	bne.n	800230c <HAL_ADC_ConfigChannel+0x19c>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	019b      	lsls	r3, r3, #6
 80022b0:	4013      	ands	r3, r2
 80022b2:	d129      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x198>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	01db      	lsls	r3, r3, #7
 80022bc:	4013      	ands	r3, r2
 80022be:	d121      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x194>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	4013      	ands	r3, r2
 80022ca:	d119      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x190>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	025b      	lsls	r3, r3, #9
 80022d4:	4013      	ands	r3, r2
 80022d6:	d111      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x18c>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	029b      	lsls	r3, r3, #10
 80022e0:	4013      	ands	r3, r2
 80022e2:	d109      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x188>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	02db      	lsls	r3, r3, #11
 80022ec:	4013      	ands	r3, r2
 80022ee:	d001      	beq.n	80022f4 <HAL_ADC_ConfigChannel+0x184>
 80022f0:	2312      	movs	r3, #18
 80022f2:	e024      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 80022f4:	2300      	movs	r3, #0
 80022f6:	e022      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 80022f8:	2311      	movs	r3, #17
 80022fa:	e020      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 80022fc:	2310      	movs	r3, #16
 80022fe:	e01e      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 8002300:	230f      	movs	r3, #15
 8002302:	e01c      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 8002304:	230e      	movs	r3, #14
 8002306:	e01a      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 8002308:	230d      	movs	r3, #13
 800230a:	e018      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 800230c:	230c      	movs	r3, #12
 800230e:	e016      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 8002310:	230b      	movs	r3, #11
 8002312:	e014      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 8002314:	230a      	movs	r3, #10
 8002316:	e012      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 8002318:	2309      	movs	r3, #9
 800231a:	e010      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 800231c:	2308      	movs	r3, #8
 800231e:	e00e      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 8002320:	2307      	movs	r3, #7
 8002322:	e00c      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 8002324:	2306      	movs	r3, #6
 8002326:	e00a      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 8002328:	2305      	movs	r3, #5
 800232a:	e008      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 800232c:	2304      	movs	r3, #4
 800232e:	e006      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 8002330:	2303      	movs	r3, #3
 8002332:	e004      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 8002334:	2302      	movs	r3, #2
 8002336:	e002      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ce>
 800233c:	2300      	movs	r3, #0
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	6852      	ldr	r2, [r2, #4]
 8002342:	201f      	movs	r0, #31
 8002344:	4002      	ands	r2, r0
 8002346:	4093      	lsls	r3, r2
 8002348:	000a      	movs	r2, r1
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	429a      	cmp	r2, r3
 800235e:	d808      	bhi.n	8002372 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	001a      	movs	r2, r3
 800236e:	f7ff fb29 	bl	80019c4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6819      	ldr	r1, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	001a      	movs	r2, r3
 8002380:	f7ff fb64 	bl	8001a4c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db00      	blt.n	800238e <HAL_ADC_ConfigChannel+0x21e>
 800238c:	e0bc      	b.n	8002508 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800238e:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <HAL_ADC_ConfigChannel+0x360>)
 8002390:	0018      	movs	r0, r3
 8002392:	f7ff fac5 	bl	8001920 <LL_ADC_GetCommonPathInternalCh>
 8002396:	0003      	movs	r3, r0
 8002398:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a4d      	ldr	r2, [pc, #308]	; (80024d4 <HAL_ADC_ConfigChannel+0x364>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d122      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	041b      	lsls	r3, r3, #16
 80023aa:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023ac:	d11d      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2280      	movs	r2, #128	; 0x80
 80023b2:	0412      	lsls	r2, r2, #16
 80023b4:	4313      	orrs	r3, r2
 80023b6:	4a46      	ldr	r2, [pc, #280]	; (80024d0 <HAL_ADC_ConfigChannel+0x360>)
 80023b8:	0019      	movs	r1, r3
 80023ba:	0010      	movs	r0, r2
 80023bc:	f7ff fa9c 	bl	80018f8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023c0:	4b45      	ldr	r3, [pc, #276]	; (80024d8 <HAL_ADC_ConfigChannel+0x368>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4945      	ldr	r1, [pc, #276]	; (80024dc <HAL_ADC_ConfigChannel+0x36c>)
 80023c6:	0018      	movs	r0, r3
 80023c8:	f7fd fea4 	bl	8000114 <__udivsi3>
 80023cc:	0003      	movs	r3, r0
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	0013      	movs	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	189b      	adds	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023da:	e002      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	3b01      	subs	r3, #1
 80023e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f9      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023e8:	e08e      	b.n	8002508 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a3c      	ldr	r2, [pc, #240]	; (80024e0 <HAL_ADC_ConfigChannel+0x370>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d10e      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	045b      	lsls	r3, r3, #17
 80023fa:	4013      	ands	r3, r2
 80023fc:	d109      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2280      	movs	r2, #128	; 0x80
 8002402:	0452      	lsls	r2, r2, #17
 8002404:	4313      	orrs	r3, r2
 8002406:	4a32      	ldr	r2, [pc, #200]	; (80024d0 <HAL_ADC_ConfigChannel+0x360>)
 8002408:	0019      	movs	r1, r3
 800240a:	0010      	movs	r0, r2
 800240c:	f7ff fa74 	bl	80018f8 <LL_ADC_SetCommonPathInternalCh>
 8002410:	e07a      	b.n	8002508 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a33      	ldr	r2, [pc, #204]	; (80024e4 <HAL_ADC_ConfigChannel+0x374>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d000      	beq.n	800241e <HAL_ADC_ConfigChannel+0x2ae>
 800241c:	e074      	b.n	8002508 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	03db      	lsls	r3, r3, #15
 8002424:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002426:	d000      	beq.n	800242a <HAL_ADC_ConfigChannel+0x2ba>
 8002428:	e06e      	b.n	8002508 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2280      	movs	r2, #128	; 0x80
 800242e:	03d2      	lsls	r2, r2, #15
 8002430:	4313      	orrs	r3, r2
 8002432:	4a27      	ldr	r2, [pc, #156]	; (80024d0 <HAL_ADC_ConfigChannel+0x360>)
 8002434:	0019      	movs	r1, r3
 8002436:	0010      	movs	r0, r2
 8002438:	f7ff fa5e 	bl	80018f8 <LL_ADC_SetCommonPathInternalCh>
 800243c:	e064      	b.n	8002508 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	061b      	lsls	r3, r3, #24
 8002446:	429a      	cmp	r2, r3
 8002448:	d004      	beq.n	8002454 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800244e:	4a1f      	ldr	r2, [pc, #124]	; (80024cc <HAL_ADC_ConfigChannel+0x35c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d107      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0019      	movs	r1, r3
 800245e:	0010      	movs	r0, r2
 8002460:	f7ff fae1 	bl	8001a26 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	da4d      	bge.n	8002508 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <HAL_ADC_ConfigChannel+0x360>)
 800246e:	0018      	movs	r0, r3
 8002470:	f7ff fa56 	bl	8001920 <LL_ADC_GetCommonPathInternalCh>
 8002474:	0003      	movs	r3, r0
 8002476:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a15      	ldr	r2, [pc, #84]	; (80024d4 <HAL_ADC_ConfigChannel+0x364>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d108      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4a18      	ldr	r2, [pc, #96]	; (80024e8 <HAL_ADC_ConfigChannel+0x378>)
 8002486:	4013      	ands	r3, r2
 8002488:	4a11      	ldr	r2, [pc, #68]	; (80024d0 <HAL_ADC_ConfigChannel+0x360>)
 800248a:	0019      	movs	r1, r3
 800248c:	0010      	movs	r0, r2
 800248e:	f7ff fa33 	bl	80018f8 <LL_ADC_SetCommonPathInternalCh>
 8002492:	e039      	b.n	8002508 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <HAL_ADC_ConfigChannel+0x370>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d108      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4a12      	ldr	r2, [pc, #72]	; (80024ec <HAL_ADC_ConfigChannel+0x37c>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <HAL_ADC_ConfigChannel+0x360>)
 80024a6:	0019      	movs	r1, r3
 80024a8:	0010      	movs	r0, r2
 80024aa:	f7ff fa25 	bl	80018f8 <LL_ADC_SetCommonPathInternalCh>
 80024ae:	e02b      	b.n	8002508 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <HAL_ADC_ConfigChannel+0x374>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d126      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4a0c      	ldr	r2, [pc, #48]	; (80024f0 <HAL_ADC_ConfigChannel+0x380>)
 80024be:	4013      	ands	r3, r2
 80024c0:	4a03      	ldr	r2, [pc, #12]	; (80024d0 <HAL_ADC_ConfigChannel+0x360>)
 80024c2:	0019      	movs	r1, r3
 80024c4:	0010      	movs	r0, r2
 80024c6:	f7ff fa17 	bl	80018f8 <LL_ADC_SetCommonPathInternalCh>
 80024ca:	e01d      	b.n	8002508 <HAL_ADC_ConfigChannel+0x398>
 80024cc:	80000004 	.word	0x80000004
 80024d0:	40012708 	.word	0x40012708
 80024d4:	b0001000 	.word	0xb0001000
 80024d8:	20000000 	.word	0x20000000
 80024dc:	00030d40 	.word	0x00030d40
 80024e0:	b8004000 	.word	0xb8004000
 80024e4:	b4002000 	.word	0xb4002000
 80024e8:	ff7fffff 	.word	0xff7fffff
 80024ec:	feffffff 	.word	0xfeffffff
 80024f0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	2220      	movs	r2, #32
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002500:	2317      	movs	r3, #23
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2254      	movs	r2, #84	; 0x54
 800250c:	2100      	movs	r1, #0
 800250e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002510:	2317      	movs	r3, #23
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	781b      	ldrb	r3, [r3, #0]
}
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	b006      	add	sp, #24
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)

08002520 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0018      	movs	r0, r3
 800252e:	f7ff fb3b 	bl	8001ba8 <LL_ADC_REG_IsConversionOngoing>
 8002532:	1e03      	subs	r3, r0, #0
 8002534:	d031      	beq.n	800259a <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	0018      	movs	r0, r3
 800253c:	f7ff faff 	bl	8001b3e <LL_ADC_IsDisableOngoing>
 8002540:	1e03      	subs	r3, r0, #0
 8002542:	d104      	bne.n	800254e <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0018      	movs	r0, r3
 800254a:	f7ff fb1b 	bl	8001b84 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800254e:	f7ff f9a5 	bl	800189c <HAL_GetTick>
 8002552:	0003      	movs	r3, r0
 8002554:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002556:	e01a      	b.n	800258e <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002558:	f7ff f9a0 	bl	800189c <HAL_GetTick>
 800255c:	0002      	movs	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d913      	bls.n	800258e <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2204      	movs	r2, #4
 800256e:	4013      	ands	r3, r2
 8002570:	d00d      	beq.n	800258e <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	2210      	movs	r2, #16
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	2201      	movs	r2, #1
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e006      	b.n	800259c <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2204      	movs	r2, #4
 8002596:	4013      	ands	r3, r2
 8002598:	d1de      	bne.n	8002558 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b004      	add	sp, #16
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7ff fab1 	bl	8001b1c <LL_ADC_IsEnabled>
 80025ba:	1e03      	subs	r3, r0, #0
 80025bc:	d000      	beq.n	80025c0 <ADC_Enable+0x1c>
 80025be:	e069      	b.n	8002694 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	4a36      	ldr	r2, [pc, #216]	; (80026a0 <ADC_Enable+0xfc>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	d00d      	beq.n	80025e8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	2210      	movs	r2, #16
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	2201      	movs	r2, #1
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e056      	b.n	8002696 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0018      	movs	r0, r3
 80025ee:	f7ff fa71 	bl	8001ad4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80025f2:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <ADC_Enable+0x100>)
 80025f4:	0018      	movs	r0, r3
 80025f6:	f7ff f993 	bl	8001920 <LL_ADC_GetCommonPathInternalCh>
 80025fa:	0002      	movs	r2, r0
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	041b      	lsls	r3, r3, #16
 8002600:	4013      	ands	r3, r2
 8002602:	d00f      	beq.n	8002624 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002604:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <ADC_Enable+0x104>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4928      	ldr	r1, [pc, #160]	; (80026ac <ADC_Enable+0x108>)
 800260a:	0018      	movs	r0, r3
 800260c:	f7fd fd82 	bl	8000114 <__udivsi3>
 8002610:	0003      	movs	r3, r0
 8002612:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002614:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002616:	e002      	b.n	800261e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	3b01      	subs	r3, #1
 800261c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f9      	bne.n	8002618 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7e5b      	ldrb	r3, [r3, #25]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d033      	beq.n	8002694 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800262c:	f7ff f936 	bl	800189c <HAL_GetTick>
 8002630:	0003      	movs	r3, r0
 8002632:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002634:	e027      	b.n	8002686 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	0018      	movs	r0, r3
 800263c:	f7ff fa6e 	bl	8001b1c <LL_ADC_IsEnabled>
 8002640:	1e03      	subs	r3, r0, #0
 8002642:	d104      	bne.n	800264e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0018      	movs	r0, r3
 800264a:	f7ff fa43 	bl	8001ad4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800264e:	f7ff f925 	bl	800189c <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d914      	bls.n	8002686 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2201      	movs	r2, #1
 8002664:	4013      	ands	r3, r2
 8002666:	2b01      	cmp	r3, #1
 8002668:	d00d      	beq.n	8002686 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	2210      	movs	r2, #16
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	2201      	movs	r2, #1
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e007      	b.n	8002696 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2201      	movs	r2, #1
 800268e:	4013      	ands	r3, r2
 8002690:	2b01      	cmp	r3, #1
 8002692:	d1d0      	bne.n	8002636 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b004      	add	sp, #16
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	80000017 	.word	0x80000017
 80026a4:	40012708 	.word	0x40012708
 80026a8:	20000000 	.word	0x20000000
 80026ac:	00030d40 	.word	0x00030d40

080026b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0018      	movs	r0, r3
 80026be:	f7ff fa3e 	bl	8001b3e <LL_ADC_IsDisableOngoing>
 80026c2:	0003      	movs	r3, r0
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	0018      	movs	r0, r3
 80026cc:	f7ff fa26 	bl	8001b1c <LL_ADC_IsEnabled>
 80026d0:	1e03      	subs	r3, r0, #0
 80026d2:	d046      	beq.n	8002762 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d143      	bne.n	8002762 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2205      	movs	r2, #5
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d10d      	bne.n	8002704 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7ff fa03 	bl	8001af8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2203      	movs	r2, #3
 80026f8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026fa:	f7ff f8cf 	bl	800189c <HAL_GetTick>
 80026fe:	0003      	movs	r3, r0
 8002700:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002702:	e028      	b.n	8002756 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	2210      	movs	r2, #16
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002714:	2201      	movs	r2, #1
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e021      	b.n	8002764 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002720:	f7ff f8bc 	bl	800189c <HAL_GetTick>
 8002724:	0002      	movs	r2, r0
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d913      	bls.n	8002756 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2201      	movs	r2, #1
 8002736:	4013      	ands	r3, r2
 8002738:	d00d      	beq.n	8002756 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	2210      	movs	r2, #16
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274a:	2201      	movs	r2, #1
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e006      	b.n	8002764 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2201      	movs	r2, #1
 800275e:	4013      	ands	r3, r2
 8002760:	d1de      	bne.n	8002720 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	0018      	movs	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	b004      	add	sp, #16
 800276a:	bd80      	pop	{r7, pc}

0800276c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	0002      	movs	r2, r0
 8002774:	6039      	str	r1, [r7, #0]
 8002776:	1dfb      	adds	r3, r7, #7
 8002778:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800277a:	1dfb      	adds	r3, r7, #7
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b7f      	cmp	r3, #127	; 0x7f
 8002780:	d828      	bhi.n	80027d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002782:	4a2f      	ldr	r2, [pc, #188]	; (8002840 <__NVIC_SetPriority+0xd4>)
 8002784:	1dfb      	adds	r3, r7, #7
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	b25b      	sxtb	r3, r3
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	33c0      	adds	r3, #192	; 0xc0
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	589b      	ldr	r3, [r3, r2]
 8002792:	1dfa      	adds	r2, r7, #7
 8002794:	7812      	ldrb	r2, [r2, #0]
 8002796:	0011      	movs	r1, r2
 8002798:	2203      	movs	r2, #3
 800279a:	400a      	ands	r2, r1
 800279c:	00d2      	lsls	r2, r2, #3
 800279e:	21ff      	movs	r1, #255	; 0xff
 80027a0:	4091      	lsls	r1, r2
 80027a2:	000a      	movs	r2, r1
 80027a4:	43d2      	mvns	r2, r2
 80027a6:	401a      	ands	r2, r3
 80027a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	019b      	lsls	r3, r3, #6
 80027ae:	22ff      	movs	r2, #255	; 0xff
 80027b0:	401a      	ands	r2, r3
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	0018      	movs	r0, r3
 80027b8:	2303      	movs	r3, #3
 80027ba:	4003      	ands	r3, r0
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027c0:	481f      	ldr	r0, [pc, #124]	; (8002840 <__NVIC_SetPriority+0xd4>)
 80027c2:	1dfb      	adds	r3, r7, #7
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	b25b      	sxtb	r3, r3
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	430a      	orrs	r2, r1
 80027cc:	33c0      	adds	r3, #192	; 0xc0
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027d2:	e031      	b.n	8002838 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027d4:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <__NVIC_SetPriority+0xd8>)
 80027d6:	1dfb      	adds	r3, r7, #7
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	0019      	movs	r1, r3
 80027dc:	230f      	movs	r3, #15
 80027de:	400b      	ands	r3, r1
 80027e0:	3b08      	subs	r3, #8
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	3306      	adds	r3, #6
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	18d3      	adds	r3, r2, r3
 80027ea:	3304      	adds	r3, #4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	1dfa      	adds	r2, r7, #7
 80027f0:	7812      	ldrb	r2, [r2, #0]
 80027f2:	0011      	movs	r1, r2
 80027f4:	2203      	movs	r2, #3
 80027f6:	400a      	ands	r2, r1
 80027f8:	00d2      	lsls	r2, r2, #3
 80027fa:	21ff      	movs	r1, #255	; 0xff
 80027fc:	4091      	lsls	r1, r2
 80027fe:	000a      	movs	r2, r1
 8002800:	43d2      	mvns	r2, r2
 8002802:	401a      	ands	r2, r3
 8002804:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	019b      	lsls	r3, r3, #6
 800280a:	22ff      	movs	r2, #255	; 0xff
 800280c:	401a      	ands	r2, r3
 800280e:	1dfb      	adds	r3, r7, #7
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	0018      	movs	r0, r3
 8002814:	2303      	movs	r3, #3
 8002816:	4003      	ands	r3, r0
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800281c:	4809      	ldr	r0, [pc, #36]	; (8002844 <__NVIC_SetPriority+0xd8>)
 800281e:	1dfb      	adds	r3, r7, #7
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	001c      	movs	r4, r3
 8002824:	230f      	movs	r3, #15
 8002826:	4023      	ands	r3, r4
 8002828:	3b08      	subs	r3, #8
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	430a      	orrs	r2, r1
 800282e:	3306      	adds	r3, #6
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	18c3      	adds	r3, r0, r3
 8002834:	3304      	adds	r3, #4
 8002836:	601a      	str	r2, [r3, #0]
}
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	b003      	add	sp, #12
 800283e:	bd90      	pop	{r4, r7, pc}
 8002840:	e000e100 	.word	0xe000e100
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	1e5a      	subs	r2, r3, #1
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	045b      	lsls	r3, r3, #17
 8002858:	429a      	cmp	r2, r3
 800285a:	d301      	bcc.n	8002860 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285c:	2301      	movs	r3, #1
 800285e:	e010      	b.n	8002882 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <SysTick_Config+0x44>)
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	3a01      	subs	r2, #1
 8002866:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002868:	2301      	movs	r3, #1
 800286a:	425b      	negs	r3, r3
 800286c:	2103      	movs	r1, #3
 800286e:	0018      	movs	r0, r3
 8002870:	f7ff ff7c 	bl	800276c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <SysTick_Config+0x44>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287a:	4b04      	ldr	r3, [pc, #16]	; (800288c <SysTick_Config+0x44>)
 800287c:	2207      	movs	r2, #7
 800287e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002880:	2300      	movs	r3, #0
}
 8002882:	0018      	movs	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	b002      	add	sp, #8
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	e000e010 	.word	0xe000e010

08002890 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	210f      	movs	r1, #15
 800289c:	187b      	adds	r3, r7, r1
 800289e:	1c02      	adds	r2, r0, #0
 80028a0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	b25b      	sxtb	r3, r3
 80028aa:	0011      	movs	r1, r2
 80028ac:	0018      	movs	r0, r3
 80028ae:	f7ff ff5d 	bl	800276c <__NVIC_SetPriority>
}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b004      	add	sp, #16
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7ff ffbf 	bl	8002848 <SysTick_Config>
 80028ca:	0003      	movs	r3, r0
}
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b002      	add	sp, #8
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e056      	b.n	8002994 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	7f5b      	ldrb	r3, [r3, #29]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d106      	bne.n	80028fe <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	0018      	movs	r0, r3
 80028fa:	f7fe fdf5 	bl	80014e8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2202      	movs	r2, #2
 8002902:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	791b      	ldrb	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10c      	bne.n	8002926 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a22      	ldr	r2, [pc, #136]	; (800299c <HAL_CRC_Init+0xc8>)
 8002912:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2118      	movs	r1, #24
 8002920:	438a      	bics	r2, r1
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	e00b      	b.n	800293e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6899      	ldr	r1, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0018      	movs	r0, r3
 8002932:	f000 f835 	bl	80029a0 <HAL_CRCEx_Polynomial_Set>
 8002936:	1e03      	subs	r3, r0, #0
 8002938:	d001      	beq.n	800293e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e02a      	b.n	8002994 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	795b      	ldrb	r3, [r3, #5]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d105      	bne.n	8002952 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2201      	movs	r2, #1
 800294c:	4252      	negs	r2, r2
 800294e:	611a      	str	r2, [r3, #16]
 8002950:	e004      	b.n	800295c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6912      	ldr	r2, [r2, #16]
 800295a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2260      	movs	r2, #96	; 0x60
 8002964:	4393      	bics	r3, r2
 8002966:	0019      	movs	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2280      	movs	r2, #128	; 0x80
 800297c:	4393      	bics	r3, r2
 800297e:	0019      	movs	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	b002      	add	sp, #8
 800299a:	bd80      	pop	{r7, pc}
 800299c:	04c11db7 	.word	0x04c11db7

080029a0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ac:	2317      	movs	r3, #23
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80029b4:	231f      	movs	r3, #31
 80029b6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1e5a      	subs	r2, r3, #1
 80029be:	613a      	str	r2, [r7, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_CRCEx_Polynomial_Set+0x36>
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	221f      	movs	r2, #31
 80029c8:	4013      	ands	r3, r2
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	40da      	lsrs	r2, r3
 80029ce:	0013      	movs	r3, r2
 80029d0:	2201      	movs	r2, #1
 80029d2:	4013      	ands	r3, r2
 80029d4:	d0f1      	beq.n	80029ba <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b18      	cmp	r3, #24
 80029da:	d00f      	beq.n	80029fc <HAL_CRCEx_Polynomial_Set+0x5c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b18      	cmp	r3, #24
 80029e0:	d824      	bhi.n	8002a2c <HAL_CRCEx_Polynomial_Set+0x8c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	d011      	beq.n	8002a0c <HAL_CRCEx_Polynomial_Set+0x6c>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d81e      	bhi.n	8002a2c <HAL_CRCEx_Polynomial_Set+0x8c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d020      	beq.n	8002a36 <HAL_CRCEx_Polynomial_Set+0x96>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d010      	beq.n	8002a1c <HAL_CRCEx_Polynomial_Set+0x7c>
 80029fa:	e017      	b.n	8002a2c <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d91b      	bls.n	8002a3a <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8002a02:	2317      	movs	r3, #23
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
      }
      break;
 8002a0a:	e016      	b.n	8002a3a <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b07      	cmp	r3, #7
 8002a10:	d915      	bls.n	8002a3e <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8002a12:	2317      	movs	r3, #23
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	2201      	movs	r2, #1
 8002a18:	701a      	strb	r2, [r3, #0]
      }
      break;
 8002a1a:	e010      	b.n	8002a3e <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	d90f      	bls.n	8002a42 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8002a22:	2317      	movs	r3, #23
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
      }
      break;
 8002a2a:	e00a      	b.n	8002a42 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002a2c:	2317      	movs	r3, #23
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
      break;
 8002a34:	e006      	b.n	8002a44 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	e004      	b.n	8002a44 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	e002      	b.n	8002a44 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	e000      	b.n	8002a44 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002a42:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8002a44:	2317      	movs	r3, #23
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10e      	bne.n	8002a6c <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2218      	movs	r2, #24
 8002a5e:	4393      	bics	r3, r2
 8002a60:	0019      	movs	r1, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002a6c:	2317      	movs	r3, #23
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	781b      	ldrb	r3, [r3, #0]
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b006      	add	sp, #24
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a8a:	e147      	b.n	8002d1c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2101      	movs	r1, #1
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4091      	lsls	r1, r2
 8002a96:	000a      	movs	r2, r1
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d100      	bne.n	8002aa4 <HAL_GPIO_Init+0x28>
 8002aa2:	e138      	b.n	8002d16 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d005      	beq.n	8002abc <HAL_GPIO_Init+0x40>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d130      	bne.n	8002b1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	0013      	movs	r3, r2
 8002acc:	43da      	mvns	r2, r3
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	409a      	lsls	r2, r3
 8002ade:	0013      	movs	r3, r2
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002af2:	2201      	movs	r2, #1
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	409a      	lsls	r2, r3
 8002af8:	0013      	movs	r3, r2
 8002afa:	43da      	mvns	r2, r3
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	2201      	movs	r2, #1
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	0013      	movs	r3, r2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2203      	movs	r2, #3
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d017      	beq.n	8002b5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	409a      	lsls	r2, r3
 8002b38:	0013      	movs	r3, r2
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	0013      	movs	r3, r2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2203      	movs	r2, #3
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d123      	bne.n	8002bae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	08da      	lsrs	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3208      	adds	r2, #8
 8002b6e:	0092      	lsls	r2, r2, #2
 8002b70:	58d3      	ldr	r3, [r2, r3]
 8002b72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2207      	movs	r2, #7
 8002b78:	4013      	ands	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	220f      	movs	r2, #15
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	0013      	movs	r3, r2
 8002b82:	43da      	mvns	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2107      	movs	r1, #7
 8002b92:	400b      	ands	r3, r1
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	409a      	lsls	r2, r3
 8002b98:	0013      	movs	r3, r2
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	08da      	lsrs	r2, r3, #3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3208      	adds	r2, #8
 8002ba8:	0092      	lsls	r2, r2, #2
 8002baa:	6939      	ldr	r1, [r7, #16]
 8002bac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	2203      	movs	r2, #3
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	0013      	movs	r3, r2
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2203      	movs	r2, #3
 8002bcc:	401a      	ands	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	0013      	movs	r3, r2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	23c0      	movs	r3, #192	; 0xc0
 8002be8:	029b      	lsls	r3, r3, #10
 8002bea:	4013      	ands	r3, r2
 8002bec:	d100      	bne.n	8002bf0 <HAL_GPIO_Init+0x174>
 8002bee:	e092      	b.n	8002d16 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002bf0:	4a50      	ldr	r2, [pc, #320]	; (8002d34 <HAL_GPIO_Init+0x2b8>)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	089b      	lsrs	r3, r3, #2
 8002bf6:	3318      	adds	r3, #24
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	589b      	ldr	r3, [r3, r2]
 8002bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2203      	movs	r2, #3
 8002c02:	4013      	ands	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	220f      	movs	r2, #15
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	0013      	movs	r3, r2
 8002c0c:	43da      	mvns	r2, r3
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4013      	ands	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	23a0      	movs	r3, #160	; 0xa0
 8002c18:	05db      	lsls	r3, r3, #23
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d013      	beq.n	8002c46 <HAL_GPIO_Init+0x1ca>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a45      	ldr	r2, [pc, #276]	; (8002d38 <HAL_GPIO_Init+0x2bc>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00d      	beq.n	8002c42 <HAL_GPIO_Init+0x1c6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a44      	ldr	r2, [pc, #272]	; (8002d3c <HAL_GPIO_Init+0x2c0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d007      	beq.n	8002c3e <HAL_GPIO_Init+0x1c2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a43      	ldr	r2, [pc, #268]	; (8002d40 <HAL_GPIO_Init+0x2c4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_GPIO_Init+0x1be>
 8002c36:	2303      	movs	r3, #3
 8002c38:	e006      	b.n	8002c48 <HAL_GPIO_Init+0x1cc>
 8002c3a:	2305      	movs	r3, #5
 8002c3c:	e004      	b.n	8002c48 <HAL_GPIO_Init+0x1cc>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e002      	b.n	8002c48 <HAL_GPIO_Init+0x1cc>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_GPIO_Init+0x1cc>
 8002c46:	2300      	movs	r3, #0
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	2103      	movs	r1, #3
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	00d2      	lsls	r2, r2, #3
 8002c50:	4093      	lsls	r3, r2
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002c58:	4936      	ldr	r1, [pc, #216]	; (8002d34 <HAL_GPIO_Init+0x2b8>)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	3318      	adds	r3, #24
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c66:	4b33      	ldr	r3, [pc, #204]	; (8002d34 <HAL_GPIO_Init+0x2b8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	035b      	lsls	r3, r3, #13
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c8a:	4b2a      	ldr	r3, [pc, #168]	; (8002d34 <HAL_GPIO_Init+0x2b8>)
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002c90:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <HAL_GPIO_Init+0x2b8>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	43da      	mvns	r2, r3
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	039b      	lsls	r3, r3, #14
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cb4:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <HAL_GPIO_Init+0x2b8>)
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cba:	4a1e      	ldr	r2, [pc, #120]	; (8002d34 <HAL_GPIO_Init+0x2b8>)
 8002cbc:	2384      	movs	r3, #132	; 0x84
 8002cbe:	58d3      	ldr	r3, [r2, r3]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	43da      	mvns	r2, r3
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	2380      	movs	r3, #128	; 0x80
 8002cd2:	029b      	lsls	r3, r3, #10
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ce0:	4914      	ldr	r1, [pc, #80]	; (8002d34 <HAL_GPIO_Init+0x2b8>)
 8002ce2:	2284      	movs	r2, #132	; 0x84
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002ce8:	4a12      	ldr	r2, [pc, #72]	; (8002d34 <HAL_GPIO_Init+0x2b8>)
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	58d3      	ldr	r3, [r2, r3]
 8002cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	025b      	lsls	r3, r3, #9
 8002d02:	4013      	ands	r3, r2
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d0e:	4909      	ldr	r1, [pc, #36]	; (8002d34 <HAL_GPIO_Init+0x2b8>)
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	40da      	lsrs	r2, r3
 8002d24:	1e13      	subs	r3, r2, #0
 8002d26:	d000      	beq.n	8002d2a <HAL_GPIO_Init+0x2ae>
 8002d28:	e6b0      	b.n	8002a8c <HAL_GPIO_Init+0x10>
  }
}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b006      	add	sp, #24
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021800 	.word	0x40021800
 8002d38:	50000400 	.word	0x50000400
 8002d3c:	50000800 	.word	0x50000800
 8002d40:	50000c00 	.word	0x50000c00

08002d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	0008      	movs	r0, r1
 8002d4e:	0011      	movs	r1, r2
 8002d50:	1cbb      	adds	r3, r7, #2
 8002d52:	1c02      	adds	r2, r0, #0
 8002d54:	801a      	strh	r2, [r3, #0]
 8002d56:	1c7b      	adds	r3, r7, #1
 8002d58:	1c0a      	adds	r2, r1, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d5c:	1c7b      	adds	r3, r7, #1
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d004      	beq.n	8002d6e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d64:	1cbb      	adds	r3, r7, #2
 8002d66:	881a      	ldrh	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d6c:	e003      	b.n	8002d76 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d6e:	1cbb      	adds	r3, r7, #2
 8002d70:	881a      	ldrh	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b002      	add	sp, #8
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002d88:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	0019      	movs	r1, r3
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d11f      	bne.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002da4:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	0013      	movs	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	189b      	adds	r3, r3, r2
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4912      	ldr	r1, [pc, #72]	; (8002dfc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002db2:	0018      	movs	r0, r3
 8002db4:	f7fd f9ae 	bl	8000114 <__udivsi3>
 8002db8:	0003      	movs	r3, r0
 8002dba:	3301      	adds	r3, #1
 8002dbc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dbe:	e008      	b.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e001      	b.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e009      	b.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dd2:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	401a      	ands	r2, r3
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d0ed      	beq.n	8002dc0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	0018      	movs	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b004      	add	sp, #16
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	40007000 	.word	0x40007000
 8002df4:	fffff9ff 	.word	0xfffff9ff
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	000f4240 	.word	0x000f4240

08002e00 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	23e0      	movs	r3, #224	; 0xe0
 8002e0a:	01db      	lsls	r3, r3, #7
 8002e0c:	4013      	ands	r3, r2
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000

08002e18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e2f3      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	4013      	ands	r3, r2
 8002e32:	d100      	bne.n	8002e36 <HAL_RCC_OscConfig+0x1e>
 8002e34:	e07c      	b.n	8002f30 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e36:	4bc3      	ldr	r3, [pc, #780]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2238      	movs	r2, #56	; 0x38
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e40:	4bc0      	ldr	r3, [pc, #768]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	2203      	movs	r2, #3
 8002e46:	4013      	ands	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	d102      	bne.n	8002e56 <HAL_RCC_OscConfig+0x3e>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d002      	beq.n	8002e5c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d10b      	bne.n	8002e74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5c:	4bb9      	ldr	r3, [pc, #740]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	029b      	lsls	r3, r3, #10
 8002e64:	4013      	ands	r3, r2
 8002e66:	d062      	beq.n	8002f2e <HAL_RCC_OscConfig+0x116>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d15e      	bne.n	8002f2e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e2ce      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	025b      	lsls	r3, r3, #9
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_OscConfig+0x78>
 8002e80:	4bb0      	ldr	r3, [pc, #704]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4baf      	ldr	r3, [pc, #700]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002e86:	2180      	movs	r1, #128	; 0x80
 8002e88:	0249      	lsls	r1, r1, #9
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e020      	b.n	8002ed2 <HAL_RCC_OscConfig+0xba>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	23a0      	movs	r3, #160	; 0xa0
 8002e96:	02db      	lsls	r3, r3, #11
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d10e      	bne.n	8002eba <HAL_RCC_OscConfig+0xa2>
 8002e9c:	4ba9      	ldr	r3, [pc, #676]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4ba8      	ldr	r3, [pc, #672]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002ea2:	2180      	movs	r1, #128	; 0x80
 8002ea4:	02c9      	lsls	r1, r1, #11
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	4ba6      	ldr	r3, [pc, #664]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	4ba5      	ldr	r3, [pc, #660]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002eb0:	2180      	movs	r1, #128	; 0x80
 8002eb2:	0249      	lsls	r1, r1, #9
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	e00b      	b.n	8002ed2 <HAL_RCC_OscConfig+0xba>
 8002eba:	4ba2      	ldr	r3, [pc, #648]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	4ba1      	ldr	r3, [pc, #644]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002ec0:	49a1      	ldr	r1, [pc, #644]	; (8003148 <HAL_RCC_OscConfig+0x330>)
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	4b9f      	ldr	r3, [pc, #636]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b9e      	ldr	r3, [pc, #632]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002ecc:	499f      	ldr	r1, [pc, #636]	; (800314c <HAL_RCC_OscConfig+0x334>)
 8002ece:	400a      	ands	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d014      	beq.n	8002f04 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eda:	f7fe fcdf 	bl	800189c <HAL_GetTick>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7fe fcda 	bl	800189c <HAL_GetTick>
 8002ee8:	0002      	movs	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e28d      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ef6:	4b93      	ldr	r3, [pc, #588]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	029b      	lsls	r3, r3, #10
 8002efe:	4013      	ands	r3, r2
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xcc>
 8002f02:	e015      	b.n	8002f30 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe fcca 	bl	800189c <HAL_GetTick>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f0e:	f7fe fcc5 	bl	800189c <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b64      	cmp	r3, #100	; 0x64
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e278      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f20:	4b88      	ldr	r3, [pc, #544]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	029b      	lsls	r3, r3, #10
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d1f0      	bne.n	8002f0e <HAL_RCC_OscConfig+0xf6>
 8002f2c:	e000      	b.n	8002f30 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2202      	movs	r2, #2
 8002f36:	4013      	ands	r3, r2
 8002f38:	d100      	bne.n	8002f3c <HAL_RCC_OscConfig+0x124>
 8002f3a:	e099      	b.n	8003070 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f3c:	4b81      	ldr	r3, [pc, #516]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2238      	movs	r2, #56	; 0x38
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f46:	4b7f      	ldr	r3, [pc, #508]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	2b10      	cmp	r3, #16
 8002f54:	d102      	bne.n	8002f5c <HAL_RCC_OscConfig+0x144>
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d002      	beq.n	8002f62 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d135      	bne.n	8002fce <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f62:	4b78      	ldr	r3, [pc, #480]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d005      	beq.n	8002f7a <HAL_RCC_OscConfig+0x162>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e24b      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7a:	4b72      	ldr	r3, [pc, #456]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4a74      	ldr	r2, [pc, #464]	; (8003150 <HAL_RCC_OscConfig+0x338>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	0019      	movs	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	021a      	lsls	r2, r3, #8
 8002f8a:	4b6e      	ldr	r3, [pc, #440]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d112      	bne.n	8002fbc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002f96:	4b6b      	ldr	r3, [pc, #428]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a6e      	ldr	r2, [pc, #440]	; (8003154 <HAL_RCC_OscConfig+0x33c>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	4b67      	ldr	r3, [pc, #412]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002faa:	4b66      	ldr	r3, [pc, #408]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	0adb      	lsrs	r3, r3, #11
 8002fb0:	2207      	movs	r2, #7
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	4a68      	ldr	r2, [pc, #416]	; (8003158 <HAL_RCC_OscConfig+0x340>)
 8002fb6:	40da      	lsrs	r2, r3
 8002fb8:	4b68      	ldr	r3, [pc, #416]	; (800315c <HAL_RCC_OscConfig+0x344>)
 8002fba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fbc:	4b68      	ldr	r3, [pc, #416]	; (8003160 <HAL_RCC_OscConfig+0x348>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f7fe fc0f 	bl	80017e4 <HAL_InitTick>
 8002fc6:	1e03      	subs	r3, r0, #0
 8002fc8:	d051      	beq.n	800306e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e221      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d030      	beq.n	8003038 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fd6:	4b5b      	ldr	r3, [pc, #364]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a5e      	ldr	r2, [pc, #376]	; (8003154 <HAL_RCC_OscConfig+0x33c>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	4b57      	ldr	r3, [pc, #348]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002fea:	4b56      	ldr	r3, [pc, #344]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4b55      	ldr	r3, [pc, #340]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8002ff0:	2180      	movs	r1, #128	; 0x80
 8002ff2:	0049      	lsls	r1, r1, #1
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fc50 	bl	800189c <HAL_GetTick>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003002:	f7fe fc4b 	bl	800189c <HAL_GetTick>
 8003006:	0002      	movs	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e1fe      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003014:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4013      	ands	r3, r2
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	4b48      	ldr	r3, [pc, #288]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4a4a      	ldr	r2, [pc, #296]	; (8003150 <HAL_RCC_OscConfig+0x338>)
 8003026:	4013      	ands	r3, r2
 8003028:	0019      	movs	r1, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	021a      	lsls	r2, r3, #8
 8003030:	4b44      	ldr	r3, [pc, #272]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	e01b      	b.n	8003070 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003038:	4b42      	ldr	r3, [pc, #264]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 800303e:	4949      	ldr	r1, [pc, #292]	; (8003164 <HAL_RCC_OscConfig+0x34c>)
 8003040:	400a      	ands	r2, r1
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe fc2a 	bl	800189c <HAL_GetTick>
 8003048:	0003      	movs	r3, r0
 800304a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304e:	f7fe fc25 	bl	800189c <HAL_GetTick>
 8003052:	0002      	movs	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e1d8      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003060:	4b38      	ldr	r3, [pc, #224]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4013      	ands	r3, r2
 800306a:	d1f0      	bne.n	800304e <HAL_RCC_OscConfig+0x236>
 800306c:	e000      	b.n	8003070 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800306e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2208      	movs	r2, #8
 8003076:	4013      	ands	r3, r2
 8003078:	d047      	beq.n	800310a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800307a:	4b32      	ldr	r3, [pc, #200]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2238      	movs	r2, #56	; 0x38
 8003080:	4013      	ands	r3, r2
 8003082:	2b18      	cmp	r3, #24
 8003084:	d10a      	bne.n	800309c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003086:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8003088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308a:	2202      	movs	r2, #2
 800308c:	4013      	ands	r3, r2
 800308e:	d03c      	beq.n	800310a <HAL_RCC_OscConfig+0x2f2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d138      	bne.n	800310a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e1ba      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d019      	beq.n	80030d8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80030a4:	4b27      	ldr	r3, [pc, #156]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 80030a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030a8:	4b26      	ldr	r3, [pc, #152]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 80030aa:	2101      	movs	r1, #1
 80030ac:	430a      	orrs	r2, r1
 80030ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fe fbf4 	bl	800189c <HAL_GetTick>
 80030b4:	0003      	movs	r3, r0
 80030b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ba:	f7fe fbef 	bl	800189c <HAL_GetTick>
 80030be:	0002      	movs	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e1a2      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030cc:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 80030ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d0:	2202      	movs	r2, #2
 80030d2:	4013      	ands	r3, r2
 80030d4:	d0f1      	beq.n	80030ba <HAL_RCC_OscConfig+0x2a2>
 80030d6:	e018      	b.n	800310a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80030d8:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 80030da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 80030de:	2101      	movs	r1, #1
 80030e0:	438a      	bics	r2, r1
 80030e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fe fbda 	bl	800189c <HAL_GetTick>
 80030e8:	0003      	movs	r3, r0
 80030ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ee:	f7fe fbd5 	bl	800189c <HAL_GetTick>
 80030f2:	0002      	movs	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e188      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003100:	4b10      	ldr	r3, [pc, #64]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8003102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003104:	2202      	movs	r2, #2
 8003106:	4013      	ands	r3, r2
 8003108:	d1f1      	bne.n	80030ee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2204      	movs	r2, #4
 8003110:	4013      	ands	r3, r2
 8003112:	d100      	bne.n	8003116 <HAL_RCC_OscConfig+0x2fe>
 8003114:	e0c6      	b.n	80032a4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003116:	231f      	movs	r3, #31
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2238      	movs	r2, #56	; 0x38
 8003124:	4013      	ands	r3, r2
 8003126:	2b20      	cmp	r3, #32
 8003128:	d11e      	bne.n	8003168 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_RCC_OscConfig+0x32c>)
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	2202      	movs	r2, #2
 8003130:	4013      	ands	r3, r2
 8003132:	d100      	bne.n	8003136 <HAL_RCC_OscConfig+0x31e>
 8003134:	e0b6      	b.n	80032a4 <HAL_RCC_OscConfig+0x48c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d000      	beq.n	8003140 <HAL_RCC_OscConfig+0x328>
 800313e:	e0b1      	b.n	80032a4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e166      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
 8003144:	40021000 	.word	0x40021000
 8003148:	fffeffff 	.word	0xfffeffff
 800314c:	fffbffff 	.word	0xfffbffff
 8003150:	ffff80ff 	.word	0xffff80ff
 8003154:	ffffc7ff 	.word	0xffffc7ff
 8003158:	00f42400 	.word	0x00f42400
 800315c:	20000000 	.word	0x20000000
 8003160:	20000004 	.word	0x20000004
 8003164:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003168:	4bac      	ldr	r3, [pc, #688]	; (800341c <HAL_RCC_OscConfig+0x604>)
 800316a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	055b      	lsls	r3, r3, #21
 8003170:	4013      	ands	r3, r2
 8003172:	d101      	bne.n	8003178 <HAL_RCC_OscConfig+0x360>
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x362>
 8003178:	2300      	movs	r3, #0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d011      	beq.n	80031a2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800317e:	4ba7      	ldr	r3, [pc, #668]	; (800341c <HAL_RCC_OscConfig+0x604>)
 8003180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003182:	4ba6      	ldr	r3, [pc, #664]	; (800341c <HAL_RCC_OscConfig+0x604>)
 8003184:	2180      	movs	r1, #128	; 0x80
 8003186:	0549      	lsls	r1, r1, #21
 8003188:	430a      	orrs	r2, r1
 800318a:	63da      	str	r2, [r3, #60]	; 0x3c
 800318c:	4ba3      	ldr	r3, [pc, #652]	; (800341c <HAL_RCC_OscConfig+0x604>)
 800318e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	055b      	lsls	r3, r3, #21
 8003194:	4013      	ands	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800319a:	231f      	movs	r3, #31
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a2:	4b9f      	ldr	r3, [pc, #636]	; (8003420 <HAL_RCC_OscConfig+0x608>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4013      	ands	r3, r2
 80031ac:	d11a      	bne.n	80031e4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031ae:	4b9c      	ldr	r3, [pc, #624]	; (8003420 <HAL_RCC_OscConfig+0x608>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4b9b      	ldr	r3, [pc, #620]	; (8003420 <HAL_RCC_OscConfig+0x608>)
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	0049      	lsls	r1, r1, #1
 80031b8:	430a      	orrs	r2, r1
 80031ba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80031bc:	f7fe fb6e 	bl	800189c <HAL_GetTick>
 80031c0:	0003      	movs	r3, r0
 80031c2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c6:	f7fe fb69 	bl	800189c <HAL_GetTick>
 80031ca:	0002      	movs	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e11c      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d8:	4b91      	ldr	r3, [pc, #580]	; (8003420 <HAL_RCC_OscConfig+0x608>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4013      	ands	r3, r2
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d106      	bne.n	80031fa <HAL_RCC_OscConfig+0x3e2>
 80031ec:	4b8b      	ldr	r3, [pc, #556]	; (800341c <HAL_RCC_OscConfig+0x604>)
 80031ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031f0:	4b8a      	ldr	r3, [pc, #552]	; (800341c <HAL_RCC_OscConfig+0x604>)
 80031f2:	2101      	movs	r1, #1
 80031f4:	430a      	orrs	r2, r1
 80031f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80031f8:	e01c      	b.n	8003234 <HAL_RCC_OscConfig+0x41c>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b05      	cmp	r3, #5
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0x404>
 8003202:	4b86      	ldr	r3, [pc, #536]	; (800341c <HAL_RCC_OscConfig+0x604>)
 8003204:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003206:	4b85      	ldr	r3, [pc, #532]	; (800341c <HAL_RCC_OscConfig+0x604>)
 8003208:	2104      	movs	r1, #4
 800320a:	430a      	orrs	r2, r1
 800320c:	65da      	str	r2, [r3, #92]	; 0x5c
 800320e:	4b83      	ldr	r3, [pc, #524]	; (800341c <HAL_RCC_OscConfig+0x604>)
 8003210:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003212:	4b82      	ldr	r3, [pc, #520]	; (800341c <HAL_RCC_OscConfig+0x604>)
 8003214:	2101      	movs	r1, #1
 8003216:	430a      	orrs	r2, r1
 8003218:	65da      	str	r2, [r3, #92]	; 0x5c
 800321a:	e00b      	b.n	8003234 <HAL_RCC_OscConfig+0x41c>
 800321c:	4b7f      	ldr	r3, [pc, #508]	; (800341c <HAL_RCC_OscConfig+0x604>)
 800321e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003220:	4b7e      	ldr	r3, [pc, #504]	; (800341c <HAL_RCC_OscConfig+0x604>)
 8003222:	2101      	movs	r1, #1
 8003224:	438a      	bics	r2, r1
 8003226:	65da      	str	r2, [r3, #92]	; 0x5c
 8003228:	4b7c      	ldr	r3, [pc, #496]	; (800341c <HAL_RCC_OscConfig+0x604>)
 800322a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800322c:	4b7b      	ldr	r3, [pc, #492]	; (800341c <HAL_RCC_OscConfig+0x604>)
 800322e:	2104      	movs	r1, #4
 8003230:	438a      	bics	r2, r1
 8003232:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d014      	beq.n	8003266 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fb2e 	bl	800189c <HAL_GetTick>
 8003240:	0003      	movs	r3, r0
 8003242:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003244:	e009      	b.n	800325a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fe fb29 	bl	800189c <HAL_GetTick>
 800324a:	0002      	movs	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	4a74      	ldr	r2, [pc, #464]	; (8003424 <HAL_RCC_OscConfig+0x60c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0db      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800325a:	4b70      	ldr	r3, [pc, #448]	; (800341c <HAL_RCC_OscConfig+0x604>)
 800325c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325e:	2202      	movs	r2, #2
 8003260:	4013      	ands	r3, r2
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x42e>
 8003264:	e013      	b.n	800328e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7fe fb19 	bl	800189c <HAL_GetTick>
 800326a:	0003      	movs	r3, r0
 800326c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800326e:	e009      	b.n	8003284 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fe fb14 	bl	800189c <HAL_GetTick>
 8003274:	0002      	movs	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	4a6a      	ldr	r2, [pc, #424]	; (8003424 <HAL_RCC_OscConfig+0x60c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0c6      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003284:	4b65      	ldr	r3, [pc, #404]	; (800341c <HAL_RCC_OscConfig+0x604>)
 8003286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003288:	2202      	movs	r2, #2
 800328a:	4013      	ands	r3, r2
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800328e:	231f      	movs	r3, #31
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d105      	bne.n	80032a4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003298:	4b60      	ldr	r3, [pc, #384]	; (800341c <HAL_RCC_OscConfig+0x604>)
 800329a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800329c:	4b5f      	ldr	r3, [pc, #380]	; (800341c <HAL_RCC_OscConfig+0x604>)
 800329e:	4962      	ldr	r1, [pc, #392]	; (8003428 <HAL_RCC_OscConfig+0x610>)
 80032a0:	400a      	ands	r2, r1
 80032a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d100      	bne.n	80032ae <HAL_RCC_OscConfig+0x496>
 80032ac:	e0b0      	b.n	8003410 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ae:	4b5b      	ldr	r3, [pc, #364]	; (800341c <HAL_RCC_OscConfig+0x604>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2238      	movs	r2, #56	; 0x38
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d100      	bne.n	80032bc <HAL_RCC_OscConfig+0x4a4>
 80032ba:	e078      	b.n	80033ae <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d153      	bne.n	800336c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c4:	4b55      	ldr	r3, [pc, #340]	; (800341c <HAL_RCC_OscConfig+0x604>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4b54      	ldr	r3, [pc, #336]	; (800341c <HAL_RCC_OscConfig+0x604>)
 80032ca:	4958      	ldr	r1, [pc, #352]	; (800342c <HAL_RCC_OscConfig+0x614>)
 80032cc:	400a      	ands	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe fae4 	bl	800189c <HAL_GetTick>
 80032d4:	0003      	movs	r3, r0
 80032d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032da:	f7fe fadf 	bl	800189c <HAL_GetTick>
 80032de:	0002      	movs	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e092      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ec:	4b4b      	ldr	r3, [pc, #300]	; (800341c <HAL_RCC_OscConfig+0x604>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	049b      	lsls	r3, r3, #18
 80032f4:	4013      	ands	r3, r2
 80032f6:	d1f0      	bne.n	80032da <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f8:	4b48      	ldr	r3, [pc, #288]	; (800341c <HAL_RCC_OscConfig+0x604>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a4c      	ldr	r2, [pc, #304]	; (8003430 <HAL_RCC_OscConfig+0x618>)
 80032fe:	4013      	ands	r3, r2
 8003300:	0019      	movs	r1, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1a      	ldr	r2, [r3, #32]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	431a      	orrs	r2, r3
 8003320:	4b3e      	ldr	r3, [pc, #248]	; (800341c <HAL_RCC_OscConfig+0x604>)
 8003322:	430a      	orrs	r2, r1
 8003324:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003326:	4b3d      	ldr	r3, [pc, #244]	; (800341c <HAL_RCC_OscConfig+0x604>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4b3c      	ldr	r3, [pc, #240]	; (800341c <HAL_RCC_OscConfig+0x604>)
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	0449      	lsls	r1, r1, #17
 8003330:	430a      	orrs	r2, r1
 8003332:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003334:	4b39      	ldr	r3, [pc, #228]	; (800341c <HAL_RCC_OscConfig+0x604>)
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	4b38      	ldr	r3, [pc, #224]	; (800341c <HAL_RCC_OscConfig+0x604>)
 800333a:	2180      	movs	r1, #128	; 0x80
 800333c:	0549      	lsls	r1, r1, #21
 800333e:	430a      	orrs	r2, r1
 8003340:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7fe faab 	bl	800189c <HAL_GetTick>
 8003346:	0003      	movs	r3, r0
 8003348:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334c:	f7fe faa6 	bl	800189c <HAL_GetTick>
 8003350:	0002      	movs	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e059      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335e:	4b2f      	ldr	r3, [pc, #188]	; (800341c <HAL_RCC_OscConfig+0x604>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	049b      	lsls	r3, r3, #18
 8003366:	4013      	ands	r3, r2
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x534>
 800336a:	e051      	b.n	8003410 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336c:	4b2b      	ldr	r3, [pc, #172]	; (800341c <HAL_RCC_OscConfig+0x604>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b2a      	ldr	r3, [pc, #168]	; (800341c <HAL_RCC_OscConfig+0x604>)
 8003372:	492e      	ldr	r1, [pc, #184]	; (800342c <HAL_RCC_OscConfig+0x614>)
 8003374:	400a      	ands	r2, r1
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe fa90 	bl	800189c <HAL_GetTick>
 800337c:	0003      	movs	r3, r0
 800337e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003382:	f7fe fa8b 	bl	800189c <HAL_GetTick>
 8003386:	0002      	movs	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e03e      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <HAL_RCC_OscConfig+0x604>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	2380      	movs	r3, #128	; 0x80
 800339a:	049b      	lsls	r3, r3, #18
 800339c:	4013      	ands	r3, r2
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80033a0:	4b1e      	ldr	r3, [pc, #120]	; (800341c <HAL_RCC_OscConfig+0x604>)
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_RCC_OscConfig+0x604>)
 80033a6:	4923      	ldr	r1, [pc, #140]	; (8003434 <HAL_RCC_OscConfig+0x61c>)
 80033a8:	400a      	ands	r2, r1
 80033aa:	60da      	str	r2, [r3, #12]
 80033ac:	e030      	b.n	8003410 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e02b      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80033ba:	4b18      	ldr	r3, [pc, #96]	; (800341c <HAL_RCC_OscConfig+0x604>)
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2203      	movs	r2, #3
 80033c4:	401a      	ands	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d11e      	bne.n	800340c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2270      	movs	r2, #112	; 0x70
 80033d2:	401a      	ands	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d117      	bne.n	800340c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	23fe      	movs	r3, #254	; 0xfe
 80033e0:	01db      	lsls	r3, r3, #7
 80033e2:	401a      	ands	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d10e      	bne.n	800340c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	23f8      	movs	r3, #248	; 0xf8
 80033f2:	039b      	lsls	r3, r3, #14
 80033f4:	401a      	ands	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d106      	bne.n	800340c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	0f5b      	lsrs	r3, r3, #29
 8003402:	075a      	lsls	r2, r3, #29
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	0018      	movs	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	b008      	add	sp, #32
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	40021000 	.word	0x40021000
 8003420:	40007000 	.word	0x40007000
 8003424:	00001388 	.word	0x00001388
 8003428:	efffffff 	.word	0xefffffff
 800342c:	feffffff 	.word	0xfeffffff
 8003430:	1fc1808c 	.word	0x1fc1808c
 8003434:	effefffc 	.word	0xeffefffc

08003438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0e9      	b.n	8003620 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800344c:	4b76      	ldr	r3, [pc, #472]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2207      	movs	r2, #7
 8003452:	4013      	ands	r3, r2
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d91e      	bls.n	8003498 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b73      	ldr	r3, [pc, #460]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2207      	movs	r2, #7
 8003460:	4393      	bics	r3, r2
 8003462:	0019      	movs	r1, r3
 8003464:	4b70      	ldr	r3, [pc, #448]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800346c:	f7fe fa16 	bl	800189c <HAL_GetTick>
 8003470:	0003      	movs	r3, r0
 8003472:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003474:	e009      	b.n	800348a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003476:	f7fe fa11 	bl	800189c <HAL_GetTick>
 800347a:	0002      	movs	r2, r0
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	4a6a      	ldr	r2, [pc, #424]	; (800362c <HAL_RCC_ClockConfig+0x1f4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e0ca      	b.n	8003620 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800348a:	4b67      	ldr	r3, [pc, #412]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2207      	movs	r2, #7
 8003490:	4013      	ands	r3, r2
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d1ee      	bne.n	8003476 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2202      	movs	r2, #2
 800349e:	4013      	ands	r3, r2
 80034a0:	d015      	beq.n	80034ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2204      	movs	r2, #4
 80034a8:	4013      	ands	r3, r2
 80034aa:	d006      	beq.n	80034ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80034ac:	4b60      	ldr	r3, [pc, #384]	; (8003630 <HAL_RCC_ClockConfig+0x1f8>)
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	4b5f      	ldr	r3, [pc, #380]	; (8003630 <HAL_RCC_ClockConfig+0x1f8>)
 80034b2:	21e0      	movs	r1, #224	; 0xe0
 80034b4:	01c9      	lsls	r1, r1, #7
 80034b6:	430a      	orrs	r2, r1
 80034b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ba:	4b5d      	ldr	r3, [pc, #372]	; (8003630 <HAL_RCC_ClockConfig+0x1f8>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	4a5d      	ldr	r2, [pc, #372]	; (8003634 <HAL_RCC_ClockConfig+0x1fc>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	0019      	movs	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	4b59      	ldr	r3, [pc, #356]	; (8003630 <HAL_RCC_ClockConfig+0x1f8>)
 80034ca:	430a      	orrs	r2, r1
 80034cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2201      	movs	r2, #1
 80034d4:	4013      	ands	r3, r2
 80034d6:	d057      	beq.n	8003588 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d107      	bne.n	80034f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034e0:	4b53      	ldr	r3, [pc, #332]	; (8003630 <HAL_RCC_ClockConfig+0x1f8>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	029b      	lsls	r3, r3, #10
 80034e8:	4013      	ands	r3, r2
 80034ea:	d12b      	bne.n	8003544 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e097      	b.n	8003620 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d107      	bne.n	8003508 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f8:	4b4d      	ldr	r3, [pc, #308]	; (8003630 <HAL_RCC_ClockConfig+0x1f8>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	049b      	lsls	r3, r3, #18
 8003500:	4013      	ands	r3, r2
 8003502:	d11f      	bne.n	8003544 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e08b      	b.n	8003620 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d107      	bne.n	8003520 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003510:	4b47      	ldr	r3, [pc, #284]	; (8003630 <HAL_RCC_ClockConfig+0x1f8>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4013      	ands	r3, r2
 800351a:	d113      	bne.n	8003544 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e07f      	b.n	8003620 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d106      	bne.n	8003536 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003528:	4b41      	ldr	r3, [pc, #260]	; (8003630 <HAL_RCC_ClockConfig+0x1f8>)
 800352a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352c:	2202      	movs	r2, #2
 800352e:	4013      	ands	r3, r2
 8003530:	d108      	bne.n	8003544 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e074      	b.n	8003620 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003536:	4b3e      	ldr	r3, [pc, #248]	; (8003630 <HAL_RCC_ClockConfig+0x1f8>)
 8003538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353a:	2202      	movs	r2, #2
 800353c:	4013      	ands	r3, r2
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e06d      	b.n	8003620 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003544:	4b3a      	ldr	r3, [pc, #232]	; (8003630 <HAL_RCC_ClockConfig+0x1f8>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2207      	movs	r2, #7
 800354a:	4393      	bics	r3, r2
 800354c:	0019      	movs	r1, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	4b37      	ldr	r3, [pc, #220]	; (8003630 <HAL_RCC_ClockConfig+0x1f8>)
 8003554:	430a      	orrs	r2, r1
 8003556:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003558:	f7fe f9a0 	bl	800189c <HAL_GetTick>
 800355c:	0003      	movs	r3, r0
 800355e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003560:	e009      	b.n	8003576 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003562:	f7fe f99b 	bl	800189c <HAL_GetTick>
 8003566:	0002      	movs	r2, r0
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	4a2f      	ldr	r2, [pc, #188]	; (800362c <HAL_RCC_ClockConfig+0x1f4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e054      	b.n	8003620 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003576:	4b2e      	ldr	r3, [pc, #184]	; (8003630 <HAL_RCC_ClockConfig+0x1f8>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2238      	movs	r2, #56	; 0x38
 800357c:	401a      	ands	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	429a      	cmp	r2, r3
 8003586:	d1ec      	bne.n	8003562 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003588:	4b27      	ldr	r3, [pc, #156]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2207      	movs	r2, #7
 800358e:	4013      	ands	r3, r2
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d21e      	bcs.n	80035d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003596:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2207      	movs	r2, #7
 800359c:	4393      	bics	r3, r2
 800359e:	0019      	movs	r1, r3
 80035a0:	4b21      	ldr	r3, [pc, #132]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035a8:	f7fe f978 	bl	800189c <HAL_GetTick>
 80035ac:	0003      	movs	r3, r0
 80035ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035b0:	e009      	b.n	80035c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b2:	f7fe f973 	bl	800189c <HAL_GetTick>
 80035b6:	0002      	movs	r2, r0
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	4a1b      	ldr	r2, [pc, #108]	; (800362c <HAL_RCC_ClockConfig+0x1f4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e02c      	b.n	8003620 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035c6:	4b18      	ldr	r3, [pc, #96]	; (8003628 <HAL_RCC_ClockConfig+0x1f0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2207      	movs	r2, #7
 80035cc:	4013      	ands	r3, r2
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d1ee      	bne.n	80035b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2204      	movs	r2, #4
 80035da:	4013      	ands	r3, r2
 80035dc:	d009      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80035de:	4b14      	ldr	r3, [pc, #80]	; (8003630 <HAL_RCC_ClockConfig+0x1f8>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	4a15      	ldr	r2, [pc, #84]	; (8003638 <HAL_RCC_ClockConfig+0x200>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	0019      	movs	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	4b10      	ldr	r3, [pc, #64]	; (8003630 <HAL_RCC_ClockConfig+0x1f8>)
 80035ee:	430a      	orrs	r2, r1
 80035f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80035f2:	f000 f829 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 80035f6:	0001      	movs	r1, r0
 80035f8:	4b0d      	ldr	r3, [pc, #52]	; (8003630 <HAL_RCC_ClockConfig+0x1f8>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	0a1b      	lsrs	r3, r3, #8
 80035fe:	220f      	movs	r2, #15
 8003600:	401a      	ands	r2, r3
 8003602:	4b0e      	ldr	r3, [pc, #56]	; (800363c <HAL_RCC_ClockConfig+0x204>)
 8003604:	0092      	lsls	r2, r2, #2
 8003606:	58d3      	ldr	r3, [r2, r3]
 8003608:	221f      	movs	r2, #31
 800360a:	4013      	ands	r3, r2
 800360c:	000a      	movs	r2, r1
 800360e:	40da      	lsrs	r2, r3
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_ClockConfig+0x208>)
 8003612:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCC_ClockConfig+0x20c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	0018      	movs	r0, r3
 800361a:	f7fe f8e3 	bl	80017e4 <HAL_InitTick>
 800361e:	0003      	movs	r3, r0
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	b004      	add	sp, #16
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40022000 	.word	0x40022000
 800362c:	00001388 	.word	0x00001388
 8003630:	40021000 	.word	0x40021000
 8003634:	fffff0ff 	.word	0xfffff0ff
 8003638:	ffff8fff 	.word	0xffff8fff
 800363c:	08004fd0 	.word	0x08004fd0
 8003640:	20000000 	.word	0x20000000
 8003644:	20000004 	.word	0x20000004

08003648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800364e:	4b3c      	ldr	r3, [pc, #240]	; (8003740 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2238      	movs	r2, #56	; 0x38
 8003654:	4013      	ands	r3, r2
 8003656:	d10f      	bne.n	8003678 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003658:	4b39      	ldr	r3, [pc, #228]	; (8003740 <HAL_RCC_GetSysClockFreq+0xf8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	0adb      	lsrs	r3, r3, #11
 800365e:	2207      	movs	r2, #7
 8003660:	4013      	ands	r3, r2
 8003662:	2201      	movs	r2, #1
 8003664:	409a      	lsls	r2, r3
 8003666:	0013      	movs	r3, r2
 8003668:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800366a:	6839      	ldr	r1, [r7, #0]
 800366c:	4835      	ldr	r0, [pc, #212]	; (8003744 <HAL_RCC_GetSysClockFreq+0xfc>)
 800366e:	f7fc fd51 	bl	8000114 <__udivsi3>
 8003672:	0003      	movs	r3, r0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	e05d      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003678:	4b31      	ldr	r3, [pc, #196]	; (8003740 <HAL_RCC_GetSysClockFreq+0xf8>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2238      	movs	r2, #56	; 0x38
 800367e:	4013      	ands	r3, r2
 8003680:	2b08      	cmp	r3, #8
 8003682:	d102      	bne.n	800368a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003684:	4b30      	ldr	r3, [pc, #192]	; (8003748 <HAL_RCC_GetSysClockFreq+0x100>)
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	e054      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800368a:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <HAL_RCC_GetSysClockFreq+0xf8>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2238      	movs	r2, #56	; 0x38
 8003690:	4013      	ands	r3, r2
 8003692:	2b10      	cmp	r3, #16
 8003694:	d138      	bne.n	8003708 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2203      	movs	r2, #3
 800369c:	4013      	ands	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036a0:	4b27      	ldr	r3, [pc, #156]	; (8003740 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	2207      	movs	r2, #7
 80036a8:	4013      	ands	r3, r2
 80036aa:	3301      	adds	r3, #1
 80036ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d10d      	bne.n	80036d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	4824      	ldr	r0, [pc, #144]	; (8003748 <HAL_RCC_GetSysClockFreq+0x100>)
 80036b8:	f7fc fd2c 	bl	8000114 <__udivsi3>
 80036bc:	0003      	movs	r3, r0
 80036be:	0019      	movs	r1, r3
 80036c0:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	0a1b      	lsrs	r3, r3, #8
 80036c6:	227f      	movs	r2, #127	; 0x7f
 80036c8:	4013      	ands	r3, r2
 80036ca:	434b      	muls	r3, r1
 80036cc:	617b      	str	r3, [r7, #20]
        break;
 80036ce:	e00d      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	481c      	ldr	r0, [pc, #112]	; (8003744 <HAL_RCC_GetSysClockFreq+0xfc>)
 80036d4:	f7fc fd1e 	bl	8000114 <__udivsi3>
 80036d8:	0003      	movs	r3, r0
 80036da:	0019      	movs	r1, r3
 80036dc:	4b18      	ldr	r3, [pc, #96]	; (8003740 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	0a1b      	lsrs	r3, r3, #8
 80036e2:	227f      	movs	r2, #127	; 0x7f
 80036e4:	4013      	ands	r3, r2
 80036e6:	434b      	muls	r3, r1
 80036e8:	617b      	str	r3, [r7, #20]
        break;
 80036ea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80036ec:	4b14      	ldr	r3, [pc, #80]	; (8003740 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	0f5b      	lsrs	r3, r3, #29
 80036f2:	2207      	movs	r2, #7
 80036f4:	4013      	ands	r3, r2
 80036f6:	3301      	adds	r3, #1
 80036f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	6978      	ldr	r0, [r7, #20]
 80036fe:	f7fc fd09 	bl	8000114 <__udivsi3>
 8003702:	0003      	movs	r3, r0
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	e015      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003708:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <HAL_RCC_GetSysClockFreq+0xf8>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2238      	movs	r2, #56	; 0x38
 800370e:	4013      	ands	r3, r2
 8003710:	2b20      	cmp	r3, #32
 8003712:	d103      	bne.n	800371c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	e00b      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800371c:	4b08      	ldr	r3, [pc, #32]	; (8003740 <HAL_RCC_GetSysClockFreq+0xf8>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2238      	movs	r2, #56	; 0x38
 8003722:	4013      	ands	r3, r2
 8003724:	2b18      	cmp	r3, #24
 8003726:	d103      	bne.n	8003730 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003728:	23fa      	movs	r3, #250	; 0xfa
 800372a:	01db      	lsls	r3, r3, #7
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	e001      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003734:	693b      	ldr	r3, [r7, #16]
}
 8003736:	0018      	movs	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	b006      	add	sp, #24
 800373c:	bd80      	pop	{r7, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	40021000 	.word	0x40021000
 8003744:	00f42400 	.word	0x00f42400
 8003748:	007a1200 	.word	0x007a1200

0800374c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003750:	4b02      	ldr	r3, [pc, #8]	; (800375c <HAL_RCC_GetHCLKFreq+0x10>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	0018      	movs	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	20000000 	.word	0x20000000

08003760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003760:	b5b0      	push	{r4, r5, r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003764:	f7ff fff2 	bl	800374c <HAL_RCC_GetHCLKFreq>
 8003768:	0004      	movs	r4, r0
 800376a:	f7ff fb49 	bl	8002e00 <LL_RCC_GetAPB1Prescaler>
 800376e:	0003      	movs	r3, r0
 8003770:	0b1a      	lsrs	r2, r3, #12
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003774:	0092      	lsls	r2, r2, #2
 8003776:	58d3      	ldr	r3, [r2, r3]
 8003778:	221f      	movs	r2, #31
 800377a:	4013      	ands	r3, r2
 800377c:	40dc      	lsrs	r4, r3
 800377e:	0023      	movs	r3, r4
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	bdb0      	pop	{r4, r5, r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	08005010 	.word	0x08005010

0800378c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003794:	2313      	movs	r3, #19
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800379c:	2312      	movs	r3, #18
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	029b      	lsls	r3, r3, #10
 80037ac:	4013      	ands	r3, r2
 80037ae:	d100      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80037b0:	e0a3      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037b2:	2011      	movs	r0, #17
 80037b4:	183b      	adds	r3, r7, r0
 80037b6:	2200      	movs	r2, #0
 80037b8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ba:	4b86      	ldr	r3, [pc, #536]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	055b      	lsls	r3, r3, #21
 80037c2:	4013      	ands	r3, r2
 80037c4:	d110      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c6:	4b83      	ldr	r3, [pc, #524]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037ca:	4b82      	ldr	r3, [pc, #520]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037cc:	2180      	movs	r1, #128	; 0x80
 80037ce:	0549      	lsls	r1, r1, #21
 80037d0:	430a      	orrs	r2, r1
 80037d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80037d4:	4b7f      	ldr	r3, [pc, #508]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	055b      	lsls	r3, r3, #21
 80037dc:	4013      	ands	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e2:	183b      	adds	r3, r7, r0
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037e8:	4b7b      	ldr	r3, [pc, #492]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b7a      	ldr	r3, [pc, #488]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80037ee:	2180      	movs	r1, #128	; 0x80
 80037f0:	0049      	lsls	r1, r1, #1
 80037f2:	430a      	orrs	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037f6:	f7fe f851 	bl	800189c <HAL_GetTick>
 80037fa:	0003      	movs	r3, r0
 80037fc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037fe:	e00b      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003800:	f7fe f84c 	bl	800189c <HAL_GetTick>
 8003804:	0002      	movs	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d904      	bls.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800380e:	2313      	movs	r3, #19
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	2203      	movs	r2, #3
 8003814:	701a      	strb	r2, [r3, #0]
        break;
 8003816:	e005      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003818:	4b6f      	ldr	r3, [pc, #444]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4013      	ands	r3, r2
 8003822:	d0ed      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003824:	2313      	movs	r3, #19
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d154      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800382e:	4b69      	ldr	r3, [pc, #420]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003830:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003832:	23c0      	movs	r3, #192	; 0xc0
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4013      	ands	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d019      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	429a      	cmp	r2, r3
 8003848:	d014      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800384a:	4b62      	ldr	r3, [pc, #392]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800384c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384e:	4a63      	ldr	r2, [pc, #396]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003850:	4013      	ands	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003854:	4b5f      	ldr	r3, [pc, #380]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003856:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003858:	4b5e      	ldr	r3, [pc, #376]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800385a:	2180      	movs	r1, #128	; 0x80
 800385c:	0249      	lsls	r1, r1, #9
 800385e:	430a      	orrs	r2, r1
 8003860:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003862:	4b5c      	ldr	r3, [pc, #368]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003864:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003866:	4b5b      	ldr	r3, [pc, #364]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003868:	495d      	ldr	r1, [pc, #372]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800386a:	400a      	ands	r2, r1
 800386c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800386e:	4b59      	ldr	r3, [pc, #356]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2201      	movs	r2, #1
 8003878:	4013      	ands	r3, r2
 800387a:	d016      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fe f80e 	bl	800189c <HAL_GetTick>
 8003880:	0003      	movs	r3, r0
 8003882:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003884:	e00c      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003886:	f7fe f809 	bl	800189c <HAL_GetTick>
 800388a:	0002      	movs	r2, r0
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	4a54      	ldr	r2, [pc, #336]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d904      	bls.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003896:	2313      	movs	r3, #19
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	2203      	movs	r2, #3
 800389c:	701a      	strb	r2, [r3, #0]
            break;
 800389e:	e004      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a0:	4b4c      	ldr	r3, [pc, #304]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a4:	2202      	movs	r2, #2
 80038a6:	4013      	ands	r3, r2
 80038a8:	d0ed      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80038aa:	2313      	movs	r3, #19
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b4:	4b47      	ldr	r3, [pc, #284]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	4a48      	ldr	r2, [pc, #288]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	0019      	movs	r1, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699a      	ldr	r2, [r3, #24]
 80038c2:	4b44      	ldr	r3, [pc, #272]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038c4:	430a      	orrs	r2, r1
 80038c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80038c8:	e00c      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038ca:	2312      	movs	r3, #18
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	2213      	movs	r2, #19
 80038d0:	18ba      	adds	r2, r7, r2
 80038d2:	7812      	ldrb	r2, [r2, #0]
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	e005      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	2312      	movs	r3, #18
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	2213      	movs	r2, #19
 80038de:	18ba      	adds	r2, r7, r2
 80038e0:	7812      	ldrb	r2, [r2, #0]
 80038e2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038e4:	2311      	movs	r3, #17
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d105      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ee:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038f2:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038f4:	493c      	ldr	r1, [pc, #240]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80038f6:	400a      	ands	r2, r1
 80038f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2201      	movs	r2, #1
 8003900:	4013      	ands	r3, r2
 8003902:	d009      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003904:	4b33      	ldr	r3, [pc, #204]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	2203      	movs	r2, #3
 800390a:	4393      	bics	r3, r2
 800390c:	0019      	movs	r1, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	4b30      	ldr	r3, [pc, #192]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003914:	430a      	orrs	r2, r1
 8003916:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2202      	movs	r2, #2
 800391e:	4013      	ands	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003922:	4b2c      	ldr	r3, [pc, #176]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003926:	220c      	movs	r2, #12
 8003928:	4393      	bics	r3, r2
 800392a:	0019      	movs	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003932:	430a      	orrs	r2, r1
 8003934:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2220      	movs	r2, #32
 800393c:	4013      	ands	r3, r2
 800393e:	d009      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003940:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003944:	4a29      	ldr	r2, [pc, #164]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003946:	4013      	ands	r3, r2
 8003948:	0019      	movs	r1, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003950:	430a      	orrs	r2, r1
 8003952:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	01db      	lsls	r3, r3, #7
 800395c:	4013      	ands	r3, r2
 800395e:	d015      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003960:	4b1c      	ldr	r3, [pc, #112]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	0899      	lsrs	r1, r3, #2
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800396e:	430a      	orrs	r2, r1
 8003970:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	05db      	lsls	r3, r3, #23
 800397a:	429a      	cmp	r2, r3
 800397c:	d106      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800397e:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003984:	2180      	movs	r1, #128	; 0x80
 8003986:	0249      	lsls	r1, r1, #9
 8003988:	430a      	orrs	r2, r1
 800398a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	4013      	ands	r3, r2
 8003996:	d016      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	4a14      	ldr	r2, [pc, #80]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800399e:	4013      	ands	r3, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039a8:	430a      	orrs	r2, r1
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	01db      	lsls	r3, r3, #7
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d106      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039be:	2180      	movs	r1, #128	; 0x80
 80039c0:	0249      	lsls	r1, r1, #9
 80039c2:	430a      	orrs	r2, r1
 80039c4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80039c6:	2312      	movs	r3, #18
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	781b      	ldrb	r3, [r3, #0]
}
 80039cc:	0018      	movs	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b006      	add	sp, #24
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40007000 	.word	0x40007000
 80039dc:	fffffcff 	.word	0xfffffcff
 80039e0:	fffeffff 	.word	0xfffeffff
 80039e4:	00001388 	.word	0x00001388
 80039e8:	efffffff 	.word	0xefffffff
 80039ec:	ffffcfff 	.word	0xffffcfff
 80039f0:	ffff3fff 	.word	0xffff3fff

080039f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e046      	b.n	8003a94 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2288      	movs	r2, #136	; 0x88
 8003a0a:	589b      	ldr	r3, [r3, r2]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d107      	bne.n	8003a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2284      	movs	r2, #132	; 0x84
 8003a14:	2100      	movs	r1, #0
 8003a16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7fd fd84 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2288      	movs	r2, #136	; 0x88
 8003a24:	2124      	movs	r1, #36	; 0x24
 8003a26:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2101      	movs	r1, #1
 8003a34:	438a      	bics	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f000 f8cc 	bl	8003bd8 <UART_SetConfig>
 8003a40:	0003      	movs	r3, r0
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e024      	b.n	8003a94 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f000 fa63 	bl	8003f20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	490d      	ldr	r1, [pc, #52]	; (8003a9c <HAL_UART_Init+0xa8>)
 8003a66:	400a      	ands	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	212a      	movs	r1, #42	; 0x2a
 8003a76:	438a      	bics	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2101      	movs	r1, #1
 8003a86:	430a      	orrs	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f000 fafb 	bl	8004088 <UART_CheckIdleState>
 8003a92:	0003      	movs	r3, r0
}
 8003a94:	0018      	movs	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b002      	add	sp, #8
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	ffffb7ff 	.word	0xffffb7ff

08003aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	1dbb      	adds	r3, r7, #6
 8003aae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2288      	movs	r2, #136	; 0x88
 8003ab4:	589b      	ldr	r3, [r3, r2]
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d000      	beq.n	8003abc <HAL_UART_Transmit+0x1c>
 8003aba:	e088      	b.n	8003bce <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_UART_Transmit+0x2a>
 8003ac2:	1dbb      	adds	r3, r7, #6
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e080      	b.n	8003bd0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	015b      	lsls	r3, r3, #5
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d109      	bne.n	8003aee <HAL_UART_Transmit+0x4e>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d105      	bne.n	8003aee <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d001      	beq.n	8003aee <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e070      	b.n	8003bd0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2290      	movs	r2, #144	; 0x90
 8003af2:	2100      	movs	r1, #0
 8003af4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2288      	movs	r2, #136	; 0x88
 8003afa:	2121      	movs	r1, #33	; 0x21
 8003afc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003afe:	f7fd fecd 	bl	800189c <HAL_GetTick>
 8003b02:	0003      	movs	r3, r0
 8003b04:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1dba      	adds	r2, r7, #6
 8003b0a:	2154      	movs	r1, #84	; 0x54
 8003b0c:	8812      	ldrh	r2, [r2, #0]
 8003b0e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1dba      	adds	r2, r7, #6
 8003b14:	2156      	movs	r1, #86	; 0x56
 8003b16:	8812      	ldrh	r2, [r2, #0]
 8003b18:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	015b      	lsls	r3, r3, #5
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d108      	bne.n	8003b38 <HAL_UART_Transmit+0x98>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d104      	bne.n	8003b38 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	e003      	b.n	8003b40 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b40:	e02c      	b.n	8003b9c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	0013      	movs	r3, r2
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2180      	movs	r1, #128	; 0x80
 8003b50:	f000 fae8 	bl	8004124 <UART_WaitOnFlagUntilTimeout>
 8003b54:	1e03      	subs	r3, r0, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e039      	b.n	8003bd0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10b      	bne.n	8003b7a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	001a      	movs	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	05d2      	lsls	r2, r2, #23
 8003b6e:	0dd2      	lsrs	r2, r2, #23
 8003b70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	3302      	adds	r3, #2
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	e007      	b.n	8003b8a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	781a      	ldrb	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	3301      	adds	r3, #1
 8003b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2256      	movs	r2, #86	; 0x56
 8003b8e:	5a9b      	ldrh	r3, [r3, r2]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b299      	uxth	r1, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2256      	movs	r2, #86	; 0x56
 8003b9a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2256      	movs	r2, #86	; 0x56
 8003ba0:	5a9b      	ldrh	r3, [r3, r2]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1cc      	bne.n	8003b42 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	0013      	movs	r3, r2
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2140      	movs	r1, #64	; 0x40
 8003bb6:	f000 fab5 	bl	8004124 <UART_WaitOnFlagUntilTimeout>
 8003bba:	1e03      	subs	r3, r0, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e006      	b.n	8003bd0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2288      	movs	r2, #136	; 0x88
 8003bc6:	2120      	movs	r1, #32
 8003bc8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e000      	b.n	8003bd0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
  }
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b008      	add	sp, #32
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003be0:	231a      	movs	r3, #26
 8003be2:	18fb      	adds	r3, r7, r3
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4abc      	ldr	r2, [pc, #752]	; (8003ef8 <UART_SetConfig+0x320>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4ab7      	ldr	r2, [pc, #732]	; (8003efc <UART_SetConfig+0x324>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	0019      	movs	r1, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4aae      	ldr	r2, [pc, #696]	; (8003f00 <UART_SetConfig+0x328>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	0019      	movs	r1, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	220f      	movs	r2, #15
 8003c5c:	4393      	bics	r3, r2
 8003c5e:	0019      	movs	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4aa4      	ldr	r2, [pc, #656]	; (8003f04 <UART_SetConfig+0x32c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d127      	bne.n	8003cc6 <UART_SetConfig+0xee>
 8003c76:	4ba4      	ldr	r3, [pc, #656]	; (8003f08 <UART_SetConfig+0x330>)
 8003c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d017      	beq.n	8003cb2 <UART_SetConfig+0xda>
 8003c82:	d81b      	bhi.n	8003cbc <UART_SetConfig+0xe4>
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d00a      	beq.n	8003c9e <UART_SetConfig+0xc6>
 8003c88:	d818      	bhi.n	8003cbc <UART_SetConfig+0xe4>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <UART_SetConfig+0xbc>
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d00a      	beq.n	8003ca8 <UART_SetConfig+0xd0>
 8003c92:	e013      	b.n	8003cbc <UART_SetConfig+0xe4>
 8003c94:	231b      	movs	r3, #27
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	e058      	b.n	8003d50 <UART_SetConfig+0x178>
 8003c9e:	231b      	movs	r3, #27
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	e053      	b.n	8003d50 <UART_SetConfig+0x178>
 8003ca8:	231b      	movs	r3, #27
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	2204      	movs	r2, #4
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	e04e      	b.n	8003d50 <UART_SetConfig+0x178>
 8003cb2:	231b      	movs	r3, #27
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	e049      	b.n	8003d50 <UART_SetConfig+0x178>
 8003cbc:	231b      	movs	r3, #27
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	701a      	strb	r2, [r3, #0]
 8003cc4:	e044      	b.n	8003d50 <UART_SetConfig+0x178>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a90      	ldr	r2, [pc, #576]	; (8003f0c <UART_SetConfig+0x334>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d127      	bne.n	8003d20 <UART_SetConfig+0x148>
 8003cd0:	4b8d      	ldr	r3, [pc, #564]	; (8003f08 <UART_SetConfig+0x330>)
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd4:	220c      	movs	r2, #12
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b0c      	cmp	r3, #12
 8003cda:	d017      	beq.n	8003d0c <UART_SetConfig+0x134>
 8003cdc:	d81b      	bhi.n	8003d16 <UART_SetConfig+0x13e>
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d00a      	beq.n	8003cf8 <UART_SetConfig+0x120>
 8003ce2:	d818      	bhi.n	8003d16 <UART_SetConfig+0x13e>
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <UART_SetConfig+0x116>
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d00a      	beq.n	8003d02 <UART_SetConfig+0x12a>
 8003cec:	e013      	b.n	8003d16 <UART_SetConfig+0x13e>
 8003cee:	231b      	movs	r3, #27
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	e02b      	b.n	8003d50 <UART_SetConfig+0x178>
 8003cf8:	231b      	movs	r3, #27
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	e026      	b.n	8003d50 <UART_SetConfig+0x178>
 8003d02:	231b      	movs	r3, #27
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	2204      	movs	r2, #4
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	e021      	b.n	8003d50 <UART_SetConfig+0x178>
 8003d0c:	231b      	movs	r3, #27
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	2208      	movs	r2, #8
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	e01c      	b.n	8003d50 <UART_SetConfig+0x178>
 8003d16:	231b      	movs	r3, #27
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	2210      	movs	r2, #16
 8003d1c:	701a      	strb	r2, [r3, #0]
 8003d1e:	e017      	b.n	8003d50 <UART_SetConfig+0x178>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a7a      	ldr	r2, [pc, #488]	; (8003f10 <UART_SetConfig+0x338>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d104      	bne.n	8003d34 <UART_SetConfig+0x15c>
 8003d2a:	231b      	movs	r3, #27
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	2200      	movs	r2, #0
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	e00d      	b.n	8003d50 <UART_SetConfig+0x178>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a76      	ldr	r2, [pc, #472]	; (8003f14 <UART_SetConfig+0x33c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d104      	bne.n	8003d48 <UART_SetConfig+0x170>
 8003d3e:	231b      	movs	r3, #27
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	2200      	movs	r2, #0
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	e003      	b.n	8003d50 <UART_SetConfig+0x178>
 8003d48:	231b      	movs	r3, #27
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69da      	ldr	r2, [r3, #28]
 8003d54:	2380      	movs	r3, #128	; 0x80
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d000      	beq.n	8003d5e <UART_SetConfig+0x186>
 8003d5c:	e065      	b.n	8003e2a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8003d5e:	231b      	movs	r3, #27
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d015      	beq.n	8003d94 <UART_SetConfig+0x1bc>
 8003d68:	dc18      	bgt.n	8003d9c <UART_SetConfig+0x1c4>
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d00d      	beq.n	8003d8a <UART_SetConfig+0x1b2>
 8003d6e:	dc15      	bgt.n	8003d9c <UART_SetConfig+0x1c4>
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <UART_SetConfig+0x1a2>
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d005      	beq.n	8003d84 <UART_SetConfig+0x1ac>
 8003d78:	e010      	b.n	8003d9c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d7a:	f7ff fcf1 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	617b      	str	r3, [r7, #20]
        break;
 8003d82:	e012      	b.n	8003daa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d84:	4b64      	ldr	r3, [pc, #400]	; (8003f18 <UART_SetConfig+0x340>)
 8003d86:	617b      	str	r3, [r7, #20]
        break;
 8003d88:	e00f      	b.n	8003daa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d8a:	f7ff fc5d 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8003d8e:	0003      	movs	r3, r0
 8003d90:	617b      	str	r3, [r7, #20]
        break;
 8003d92:	e00a      	b.n	8003daa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	617b      	str	r3, [r7, #20]
        break;
 8003d9a:	e006      	b.n	8003daa <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003da0:	231a      	movs	r3, #26
 8003da2:	18fb      	adds	r3, r7, r3
 8003da4:	2201      	movs	r2, #1
 8003da6:	701a      	strb	r2, [r3, #0]
        break;
 8003da8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d100      	bne.n	8003db2 <UART_SetConfig+0x1da>
 8003db0:	e08d      	b.n	8003ece <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003db6:	4b59      	ldr	r3, [pc, #356]	; (8003f1c <UART_SetConfig+0x344>)
 8003db8:	0052      	lsls	r2, r2, #1
 8003dba:	5ad3      	ldrh	r3, [r2, r3]
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	6978      	ldr	r0, [r7, #20]
 8003dc0:	f7fc f9a8 	bl	8000114 <__udivsi3>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	005a      	lsls	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	18d2      	adds	r2, r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	0010      	movs	r0, r2
 8003dd8:	f7fc f99c 	bl	8000114 <__udivsi3>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b0f      	cmp	r3, #15
 8003de4:	d91c      	bls.n	8003e20 <UART_SetConfig+0x248>
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	025b      	lsls	r3, r3, #9
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d217      	bcs.n	8003e20 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	200e      	movs	r0, #14
 8003df6:	183b      	adds	r3, r7, r0
 8003df8:	210f      	movs	r1, #15
 8003dfa:	438a      	bics	r2, r1
 8003dfc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2207      	movs	r2, #7
 8003e06:	4013      	ands	r3, r2
 8003e08:	b299      	uxth	r1, r3
 8003e0a:	183b      	adds	r3, r7, r0
 8003e0c:	183a      	adds	r2, r7, r0
 8003e0e:	8812      	ldrh	r2, [r2, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	183a      	adds	r2, r7, r0
 8003e1a:	8812      	ldrh	r2, [r2, #0]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	e056      	b.n	8003ece <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003e20:	231a      	movs	r3, #26
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	e051      	b.n	8003ece <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e2a:	231b      	movs	r3, #27
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d015      	beq.n	8003e60 <UART_SetConfig+0x288>
 8003e34:	dc18      	bgt.n	8003e68 <UART_SetConfig+0x290>
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d00d      	beq.n	8003e56 <UART_SetConfig+0x27e>
 8003e3a:	dc15      	bgt.n	8003e68 <UART_SetConfig+0x290>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <UART_SetConfig+0x26e>
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d005      	beq.n	8003e50 <UART_SetConfig+0x278>
 8003e44:	e010      	b.n	8003e68 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e46:	f7ff fc8b 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 8003e4a:	0003      	movs	r3, r0
 8003e4c:	617b      	str	r3, [r7, #20]
        break;
 8003e4e:	e012      	b.n	8003e76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e50:	4b31      	ldr	r3, [pc, #196]	; (8003f18 <UART_SetConfig+0x340>)
 8003e52:	617b      	str	r3, [r7, #20]
        break;
 8003e54:	e00f      	b.n	8003e76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e56:	f7ff fbf7 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	617b      	str	r3, [r7, #20]
        break;
 8003e5e:	e00a      	b.n	8003e76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	617b      	str	r3, [r7, #20]
        break;
 8003e66:	e006      	b.n	8003e76 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e6c:	231a      	movs	r3, #26
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
        break;
 8003e74:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d028      	beq.n	8003ece <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e80:	4b26      	ldr	r3, [pc, #152]	; (8003f1c <UART_SetConfig+0x344>)
 8003e82:	0052      	lsls	r2, r2, #1
 8003e84:	5ad3      	ldrh	r3, [r2, r3]
 8003e86:	0019      	movs	r1, r3
 8003e88:	6978      	ldr	r0, [r7, #20]
 8003e8a:	f7fc f943 	bl	8000114 <__udivsi3>
 8003e8e:	0003      	movs	r3, r0
 8003e90:	001a      	movs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	18d2      	adds	r2, r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	0010      	movs	r0, r2
 8003ea2:	f7fc f937 	bl	8000114 <__udivsi3>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b0f      	cmp	r3, #15
 8003eae:	d90a      	bls.n	8003ec6 <UART_SetConfig+0x2ee>
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	2380      	movs	r3, #128	; 0x80
 8003eb4:	025b      	lsls	r3, r3, #9
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d205      	bcs.n	8003ec6 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60da      	str	r2, [r3, #12]
 8003ec4:	e003      	b.n	8003ece <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003ec6:	231a      	movs	r3, #26
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	2201      	movs	r2, #1
 8003ecc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	226a      	movs	r2, #106	; 0x6a
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2268      	movs	r2, #104	; 0x68
 8003eda:	2101      	movs	r1, #1
 8003edc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003eea:	231a      	movs	r3, #26
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	781b      	ldrb	r3, [r3, #0]
}
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b008      	add	sp, #32
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	cfff69f3 	.word	0xcfff69f3
 8003efc:	ffffcfff 	.word	0xffffcfff
 8003f00:	11fff4ff 	.word	0x11fff4ff
 8003f04:	40013800 	.word	0x40013800
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40004400 	.word	0x40004400
 8003f10:	40004800 	.word	0x40004800
 8003f14:	40004c00 	.word	0x40004c00
 8003f18:	00f42400 	.word	0x00f42400
 8003f1c:	08005030 	.word	0x08005030

08003f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d00b      	beq.n	8003f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4a4a      	ldr	r2, [pc, #296]	; (8004064 <UART_AdvFeatureConfig+0x144>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	0019      	movs	r1, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	2202      	movs	r2, #2
 8003f50:	4013      	ands	r3, r2
 8003f52:	d00b      	beq.n	8003f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4a43      	ldr	r2, [pc, #268]	; (8004068 <UART_AdvFeatureConfig+0x148>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	0019      	movs	r1, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	2204      	movs	r2, #4
 8003f72:	4013      	ands	r3, r2
 8003f74:	d00b      	beq.n	8003f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4a3b      	ldr	r2, [pc, #236]	; (800406c <UART_AdvFeatureConfig+0x14c>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	0019      	movs	r1, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	2208      	movs	r2, #8
 8003f94:	4013      	ands	r3, r2
 8003f96:	d00b      	beq.n	8003fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	4a34      	ldr	r2, [pc, #208]	; (8004070 <UART_AdvFeatureConfig+0x150>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	0019      	movs	r1, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d00b      	beq.n	8003fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a2c      	ldr	r2, [pc, #176]	; (8004074 <UART_AdvFeatureConfig+0x154>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	0019      	movs	r1, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d00b      	beq.n	8003ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	4a25      	ldr	r2, [pc, #148]	; (8004078 <UART_AdvFeatureConfig+0x158>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	0019      	movs	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	2240      	movs	r2, #64	; 0x40
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d01d      	beq.n	800403a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	4a1d      	ldr	r2, [pc, #116]	; (800407c <UART_AdvFeatureConfig+0x15c>)
 8004006:	4013      	ands	r3, r2
 8004008:	0019      	movs	r1, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	035b      	lsls	r3, r3, #13
 800401e:	429a      	cmp	r2, r3
 8004020:	d10b      	bne.n	800403a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	4a15      	ldr	r2, [pc, #84]	; (8004080 <UART_AdvFeatureConfig+0x160>)
 800402a:	4013      	ands	r3, r2
 800402c:	0019      	movs	r1, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	2280      	movs	r2, #128	; 0x80
 8004040:	4013      	ands	r3, r2
 8004042:	d00b      	beq.n	800405c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4a0e      	ldr	r2, [pc, #56]	; (8004084 <UART_AdvFeatureConfig+0x164>)
 800404c:	4013      	ands	r3, r2
 800404e:	0019      	movs	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	605a      	str	r2, [r3, #4]
  }
}
 800405c:	46c0      	nop			; (mov r8, r8)
 800405e:	46bd      	mov	sp, r7
 8004060:	b002      	add	sp, #8
 8004062:	bd80      	pop	{r7, pc}
 8004064:	fffdffff 	.word	0xfffdffff
 8004068:	fffeffff 	.word	0xfffeffff
 800406c:	fffbffff 	.word	0xfffbffff
 8004070:	ffff7fff 	.word	0xffff7fff
 8004074:	ffffefff 	.word	0xffffefff
 8004078:	ffffdfff 	.word	0xffffdfff
 800407c:	ffefffff 	.word	0xffefffff
 8004080:	ff9fffff 	.word	0xff9fffff
 8004084:	fff7ffff 	.word	0xfff7ffff

08004088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af02      	add	r7, sp, #8
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2290      	movs	r2, #144	; 0x90
 8004094:	2100      	movs	r1, #0
 8004096:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004098:	f7fd fc00 	bl	800189c <HAL_GetTick>
 800409c:	0003      	movs	r3, r0
 800409e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2208      	movs	r2, #8
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d10c      	bne.n	80040c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2280      	movs	r2, #128	; 0x80
 80040b2:	0391      	lsls	r1, r2, #14
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	4a1a      	ldr	r2, [pc, #104]	; (8004120 <UART_CheckIdleState+0x98>)
 80040b8:	9200      	str	r2, [sp, #0]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f000 f832 	bl	8004124 <UART_WaitOnFlagUntilTimeout>
 80040c0:	1e03      	subs	r3, r0, #0
 80040c2:	d001      	beq.n	80040c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e026      	b.n	8004116 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2204      	movs	r2, #4
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d10c      	bne.n	80040f0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2280      	movs	r2, #128	; 0x80
 80040da:	03d1      	lsls	r1, r2, #15
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	4a10      	ldr	r2, [pc, #64]	; (8004120 <UART_CheckIdleState+0x98>)
 80040e0:	9200      	str	r2, [sp, #0]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f000 f81e 	bl	8004124 <UART_WaitOnFlagUntilTimeout>
 80040e8:	1e03      	subs	r3, r0, #0
 80040ea:	d001      	beq.n	80040f0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e012      	b.n	8004116 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2288      	movs	r2, #136	; 0x88
 80040f4:	2120      	movs	r1, #32
 80040f6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	228c      	movs	r2, #140	; 0x8c
 80040fc:	2120      	movs	r1, #32
 80040fe:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2284      	movs	r2, #132	; 0x84
 8004110:	2100      	movs	r1, #0
 8004112:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	0018      	movs	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	b004      	add	sp, #16
 800411c:	bd80      	pop	{r7, pc}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	01ffffff 	.word	0x01ffffff

08004124 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b094      	sub	sp, #80	; 0x50
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	1dfb      	adds	r3, r7, #7
 8004132:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004134:	e0a7      	b.n	8004286 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004138:	3301      	adds	r3, #1
 800413a:	d100      	bne.n	800413e <UART_WaitOnFlagUntilTimeout+0x1a>
 800413c:	e0a3      	b.n	8004286 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413e:	f7fd fbad 	bl	800189c <HAL_GetTick>
 8004142:	0002      	movs	r2, r0
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800414a:	429a      	cmp	r2, r3
 800414c:	d302      	bcc.n	8004154 <UART_WaitOnFlagUntilTimeout+0x30>
 800414e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004150:	2b00      	cmp	r3, #0
 8004152:	d13f      	bne.n	80041d4 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004154:	f3ef 8310 	mrs	r3, PRIMASK
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800415c:	647b      	str	r3, [r7, #68]	; 0x44
 800415e:	2301      	movs	r3, #1
 8004160:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	f383 8810 	msr	PRIMASK, r3
}
 8004168:	46c0      	nop			; (mov r8, r8)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	494e      	ldr	r1, [pc, #312]	; (80042b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004176:	400a      	ands	r2, r1
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800417c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	f383 8810 	msr	PRIMASK, r3
}
 8004184:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004186:	f3ef 8310 	mrs	r3, PRIMASK
 800418a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800418c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418e:	643b      	str	r3, [r7, #64]	; 0x40
 8004190:	2301      	movs	r3, #1
 8004192:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004196:	f383 8810 	msr	PRIMASK, r3
}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2101      	movs	r1, #1
 80041a8:	438a      	bics	r2, r1
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b2:	f383 8810 	msr	PRIMASK, r3
}
 80041b6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2288      	movs	r2, #136	; 0x88
 80041bc:	2120      	movs	r1, #32
 80041be:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	228c      	movs	r2, #140	; 0x8c
 80041c4:	2120      	movs	r1, #32
 80041c6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2284      	movs	r2, #132	; 0x84
 80041cc:	2100      	movs	r1, #0
 80041ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e069      	b.n	80042a8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2204      	movs	r2, #4
 80041dc:	4013      	ands	r3, r2
 80041de:	d052      	beq.n	8004286 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69da      	ldr	r2, [r3, #28]
 80041e6:	2380      	movs	r3, #128	; 0x80
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	401a      	ands	r2, r3
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d148      	bne.n	8004286 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2280      	movs	r2, #128	; 0x80
 80041fa:	0112      	lsls	r2, r2, #4
 80041fc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004202:	613b      	str	r3, [r7, #16]
  return(result);
 8004204:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004208:	2301      	movs	r3, #1
 800420a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f383 8810 	msr	PRIMASK, r3
}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4924      	ldr	r1, [pc, #144]	; (80042b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004220:	400a      	ands	r2, r1
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004226:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f383 8810 	msr	PRIMASK, r3
}
 800422e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004230:	f3ef 8310 	mrs	r3, PRIMASK
 8004234:	61fb      	str	r3, [r7, #28]
  return(result);
 8004236:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004238:	64bb      	str	r3, [r7, #72]	; 0x48
 800423a:	2301      	movs	r3, #1
 800423c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	f383 8810 	msr	PRIMASK, r3
}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2101      	movs	r1, #1
 8004252:	438a      	bics	r2, r1
 8004254:	609a      	str	r2, [r3, #8]
 8004256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	f383 8810 	msr	PRIMASK, r3
}
 8004260:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2288      	movs	r2, #136	; 0x88
 8004266:	2120      	movs	r1, #32
 8004268:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	228c      	movs	r2, #140	; 0x8c
 800426e:	2120      	movs	r1, #32
 8004270:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2290      	movs	r2, #144	; 0x90
 8004276:	2120      	movs	r1, #32
 8004278:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2284      	movs	r2, #132	; 0x84
 800427e:	2100      	movs	r1, #0
 8004280:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e010      	b.n	80042a8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	4013      	ands	r3, r2
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	425a      	negs	r2, r3
 8004296:	4153      	adcs	r3, r2
 8004298:	b2db      	uxtb	r3, r3
 800429a:	001a      	movs	r2, r3
 800429c:	1dfb      	adds	r3, r7, #7
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d100      	bne.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x182>
 80042a4:	e747      	b.n	8004136 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b014      	add	sp, #80	; 0x50
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	fffffe5f 	.word	0xfffffe5f

080042b4 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e05d      	b.n	8004388 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2288      	movs	r2, #136	; 0x88
 80042d0:	589b      	ldr	r3, [r3, r2]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d107      	bne.n	80042e6 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2284      	movs	r2, #132	; 0x84
 80042da:	2100      	movs	r1, #0
 80042dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	0018      	movs	r0, r3
 80042e2:	f7fd f921 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2288      	movs	r2, #136	; 0x88
 80042ea:	2124      	movs	r1, #36	; 0x24
 80042ec:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2101      	movs	r1, #1
 80042fa:	438a      	bics	r2, r1
 80042fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	0018      	movs	r0, r3
 8004302:	f7ff fc69 	bl	8003bd8 <UART_SetConfig>
 8004306:	0003      	movs	r3, r0
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_RS485Ex_Init+0x5c>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e03b      	b.n	8004388 <HAL_RS485Ex_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_RS485Ex_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	0018      	movs	r0, r3
 800431c:	f7ff fe00 	bl	8003f20 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2180      	movs	r1, #128	; 0x80
 800432c:	01c9      	lsls	r1, r1, #7
 800432e:	430a      	orrs	r2, r1
 8004330:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	4a15      	ldr	r2, [pc, #84]	; (8004390 <HAL_RS485Ex_Init+0xdc>)
 800433a:	4013      	ands	r3, r2
 800433c:	0019      	movs	r1, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	430a      	orrs	r2, r1
 8004346:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	055b      	lsls	r3, r3, #21
 800434c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	041b      	lsls	r3, r3, #16
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a0d      	ldr	r2, [pc, #52]	; (8004394 <HAL_RS485Ex_Init+0xe0>)
 8004360:	4013      	ands	r3, r2
 8004362:	0019      	movs	r1, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	430a      	orrs	r2, r1
 800436c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2101      	movs	r1, #1
 800437a:	430a      	orrs	r2, r1
 800437c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	0018      	movs	r0, r3
 8004382:	f7ff fe81 	bl	8004088 <UART_CheckIdleState>
 8004386:	0003      	movs	r3, r0
}
 8004388:	0018      	movs	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	b006      	add	sp, #24
 800438e:	bd80      	pop	{r7, pc}
 8004390:	ffff7fff 	.word	0xffff7fff
 8004394:	fc00ffff 	.word	0xfc00ffff

08004398 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2284      	movs	r2, #132	; 0x84
 80043a4:	5c9b      	ldrb	r3, [r3, r2]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <HAL_UARTEx_DisableFifoMode+0x16>
 80043aa:	2302      	movs	r3, #2
 80043ac:	e027      	b.n	80043fe <HAL_UARTEx_DisableFifoMode+0x66>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2284      	movs	r2, #132	; 0x84
 80043b2:	2101      	movs	r1, #1
 80043b4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2288      	movs	r2, #136	; 0x88
 80043ba:	2124      	movs	r1, #36	; 0x24
 80043bc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2101      	movs	r1, #1
 80043d2:	438a      	bics	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4a0b      	ldr	r2, [pc, #44]	; (8004408 <HAL_UARTEx_DisableFifoMode+0x70>)
 80043da:	4013      	ands	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2288      	movs	r2, #136	; 0x88
 80043f0:	2120      	movs	r1, #32
 80043f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2284      	movs	r2, #132	; 0x84
 80043f8:	2100      	movs	r1, #0
 80043fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	0018      	movs	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	b004      	add	sp, #16
 8004404:	bd80      	pop	{r7, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	dfffffff 	.word	0xdfffffff

0800440c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2284      	movs	r2, #132	; 0x84
 800441a:	5c9b      	ldrb	r3, [r3, r2]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004420:	2302      	movs	r3, #2
 8004422:	e02e      	b.n	8004482 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2284      	movs	r2, #132	; 0x84
 8004428:	2101      	movs	r1, #1
 800442a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2288      	movs	r2, #136	; 0x88
 8004430:	2124      	movs	r1, #36	; 0x24
 8004432:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2101      	movs	r1, #1
 8004448:	438a      	bics	r2, r1
 800444a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	08d9      	lsrs	r1, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	0018      	movs	r0, r3
 8004464:	f000 f854 	bl	8004510 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2288      	movs	r2, #136	; 0x88
 8004474:	2120      	movs	r1, #32
 8004476:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2284      	movs	r2, #132	; 0x84
 800447c:	2100      	movs	r1, #0
 800447e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	0018      	movs	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	b004      	add	sp, #16
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2284      	movs	r2, #132	; 0x84
 800449a:	5c9b      	ldrb	r3, [r3, r2]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e02f      	b.n	8004504 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2284      	movs	r2, #132	; 0x84
 80044a8:	2101      	movs	r1, #1
 80044aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2288      	movs	r2, #136	; 0x88
 80044b0:	2124      	movs	r1, #36	; 0x24
 80044b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2101      	movs	r1, #1
 80044c8:	438a      	bics	r2, r1
 80044ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	4a0e      	ldr	r2, [pc, #56]	; (800450c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	0019      	movs	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	0018      	movs	r0, r3
 80044e6:	f000 f813 	bl	8004510 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2288      	movs	r2, #136	; 0x88
 80044f6:	2120      	movs	r1, #32
 80044f8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2284      	movs	r2, #132	; 0x84
 80044fe:	2100      	movs	r1, #0
 8004500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	0018      	movs	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	b004      	add	sp, #16
 800450a:	bd80      	pop	{r7, pc}
 800450c:	f1ffffff 	.word	0xf1ffffff

08004510 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451c:	2b00      	cmp	r3, #0
 800451e:	d108      	bne.n	8004532 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	226a      	movs	r2, #106	; 0x6a
 8004524:	2101      	movs	r1, #1
 8004526:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2268      	movs	r2, #104	; 0x68
 800452c:	2101      	movs	r1, #1
 800452e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004530:	e043      	b.n	80045ba <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004532:	260f      	movs	r6, #15
 8004534:	19bb      	adds	r3, r7, r6
 8004536:	2208      	movs	r2, #8
 8004538:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800453a:	200e      	movs	r0, #14
 800453c:	183b      	adds	r3, r7, r0
 800453e:	2208      	movs	r2, #8
 8004540:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	0e5b      	lsrs	r3, r3, #25
 800454a:	b2da      	uxtb	r2, r3
 800454c:	240d      	movs	r4, #13
 800454e:	193b      	adds	r3, r7, r4
 8004550:	2107      	movs	r1, #7
 8004552:	400a      	ands	r2, r1
 8004554:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	0f5b      	lsrs	r3, r3, #29
 800455e:	b2da      	uxtb	r2, r3
 8004560:	250c      	movs	r5, #12
 8004562:	197b      	adds	r3, r7, r5
 8004564:	2107      	movs	r1, #7
 8004566:	400a      	ands	r2, r1
 8004568:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800456a:	183b      	adds	r3, r7, r0
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	197a      	adds	r2, r7, r5
 8004570:	7812      	ldrb	r2, [r2, #0]
 8004572:	4914      	ldr	r1, [pc, #80]	; (80045c4 <UARTEx_SetNbDataToProcess+0xb4>)
 8004574:	5c8a      	ldrb	r2, [r1, r2]
 8004576:	435a      	muls	r2, r3
 8004578:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800457a:	197b      	adds	r3, r7, r5
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <UARTEx_SetNbDataToProcess+0xb8>)
 8004580:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004582:	0019      	movs	r1, r3
 8004584:	f7fb fe50 	bl	8000228 <__divsi3>
 8004588:	0003      	movs	r3, r0
 800458a:	b299      	uxth	r1, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	226a      	movs	r2, #106	; 0x6a
 8004590:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004592:	19bb      	adds	r3, r7, r6
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	193a      	adds	r2, r7, r4
 8004598:	7812      	ldrb	r2, [r2, #0]
 800459a:	490a      	ldr	r1, [pc, #40]	; (80045c4 <UARTEx_SetNbDataToProcess+0xb4>)
 800459c:	5c8a      	ldrb	r2, [r1, r2]
 800459e:	435a      	muls	r2, r3
 80045a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80045a2:	193b      	adds	r3, r7, r4
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <UARTEx_SetNbDataToProcess+0xb8>)
 80045a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045aa:	0019      	movs	r1, r3
 80045ac:	f7fb fe3c 	bl	8000228 <__divsi3>
 80045b0:	0003      	movs	r3, r0
 80045b2:	b299      	uxth	r1, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2268      	movs	r2, #104	; 0x68
 80045b8:	5299      	strh	r1, [r3, r2]
}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	46bd      	mov	sp, r7
 80045be:	b005      	add	sp, #20
 80045c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	08005048 	.word	0x08005048
 80045c8:	08005050 	.word	0x08005050

080045cc <__errno>:
 80045cc:	4b01      	ldr	r3, [pc, #4]	; (80045d4 <__errno+0x8>)
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	4770      	bx	lr
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	2000000c 	.word	0x2000000c

080045d8 <__libc_init_array>:
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	2600      	movs	r6, #0
 80045dc:	4d0c      	ldr	r5, [pc, #48]	; (8004610 <__libc_init_array+0x38>)
 80045de:	4c0d      	ldr	r4, [pc, #52]	; (8004614 <__libc_init_array+0x3c>)
 80045e0:	1b64      	subs	r4, r4, r5
 80045e2:	10a4      	asrs	r4, r4, #2
 80045e4:	42a6      	cmp	r6, r4
 80045e6:	d109      	bne.n	80045fc <__libc_init_array+0x24>
 80045e8:	2600      	movs	r6, #0
 80045ea:	f000 fc8b 	bl	8004f04 <_init>
 80045ee:	4d0a      	ldr	r5, [pc, #40]	; (8004618 <__libc_init_array+0x40>)
 80045f0:	4c0a      	ldr	r4, [pc, #40]	; (800461c <__libc_init_array+0x44>)
 80045f2:	1b64      	subs	r4, r4, r5
 80045f4:	10a4      	asrs	r4, r4, #2
 80045f6:	42a6      	cmp	r6, r4
 80045f8:	d105      	bne.n	8004606 <__libc_init_array+0x2e>
 80045fa:	bd70      	pop	{r4, r5, r6, pc}
 80045fc:	00b3      	lsls	r3, r6, #2
 80045fe:	58eb      	ldr	r3, [r5, r3]
 8004600:	4798      	blx	r3
 8004602:	3601      	adds	r6, #1
 8004604:	e7ee      	b.n	80045e4 <__libc_init_array+0xc>
 8004606:	00b3      	lsls	r3, r6, #2
 8004608:	58eb      	ldr	r3, [r5, r3]
 800460a:	4798      	blx	r3
 800460c:	3601      	adds	r6, #1
 800460e:	e7f2      	b.n	80045f6 <__libc_init_array+0x1e>
 8004610:	0800508c 	.word	0x0800508c
 8004614:	0800508c 	.word	0x0800508c
 8004618:	0800508c 	.word	0x0800508c
 800461c:	08005090 	.word	0x08005090

08004620 <memset>:
 8004620:	0003      	movs	r3, r0
 8004622:	1882      	adds	r2, r0, r2
 8004624:	4293      	cmp	r3, r2
 8004626:	d100      	bne.n	800462a <memset+0xa>
 8004628:	4770      	bx	lr
 800462a:	7019      	strb	r1, [r3, #0]
 800462c:	3301      	adds	r3, #1
 800462e:	e7f9      	b.n	8004624 <memset+0x4>

08004630 <siprintf>:
 8004630:	b40e      	push	{r1, r2, r3}
 8004632:	b500      	push	{lr}
 8004634:	490b      	ldr	r1, [pc, #44]	; (8004664 <siprintf+0x34>)
 8004636:	b09c      	sub	sp, #112	; 0x70
 8004638:	ab1d      	add	r3, sp, #116	; 0x74
 800463a:	9002      	str	r0, [sp, #8]
 800463c:	9006      	str	r0, [sp, #24]
 800463e:	9107      	str	r1, [sp, #28]
 8004640:	9104      	str	r1, [sp, #16]
 8004642:	4809      	ldr	r0, [pc, #36]	; (8004668 <siprintf+0x38>)
 8004644:	4909      	ldr	r1, [pc, #36]	; (800466c <siprintf+0x3c>)
 8004646:	cb04      	ldmia	r3!, {r2}
 8004648:	9105      	str	r1, [sp, #20]
 800464a:	6800      	ldr	r0, [r0, #0]
 800464c:	a902      	add	r1, sp, #8
 800464e:	9301      	str	r3, [sp, #4]
 8004650:	f000 f870 	bl	8004734 <_svfiprintf_r>
 8004654:	2300      	movs	r3, #0
 8004656:	9a02      	ldr	r2, [sp, #8]
 8004658:	7013      	strb	r3, [r2, #0]
 800465a:	b01c      	add	sp, #112	; 0x70
 800465c:	bc08      	pop	{r3}
 800465e:	b003      	add	sp, #12
 8004660:	4718      	bx	r3
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	7fffffff 	.word	0x7fffffff
 8004668:	2000000c 	.word	0x2000000c
 800466c:	ffff0208 	.word	0xffff0208

08004670 <__ssputs_r>:
 8004670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004672:	688e      	ldr	r6, [r1, #8]
 8004674:	b085      	sub	sp, #20
 8004676:	0007      	movs	r7, r0
 8004678:	000c      	movs	r4, r1
 800467a:	9203      	str	r2, [sp, #12]
 800467c:	9301      	str	r3, [sp, #4]
 800467e:	429e      	cmp	r6, r3
 8004680:	d83c      	bhi.n	80046fc <__ssputs_r+0x8c>
 8004682:	2390      	movs	r3, #144	; 0x90
 8004684:	898a      	ldrh	r2, [r1, #12]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	421a      	tst	r2, r3
 800468a:	d034      	beq.n	80046f6 <__ssputs_r+0x86>
 800468c:	6909      	ldr	r1, [r1, #16]
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	6960      	ldr	r0, [r4, #20]
 8004692:	1a5b      	subs	r3, r3, r1
 8004694:	9302      	str	r3, [sp, #8]
 8004696:	2303      	movs	r3, #3
 8004698:	4343      	muls	r3, r0
 800469a:	0fdd      	lsrs	r5, r3, #31
 800469c:	18ed      	adds	r5, r5, r3
 800469e:	9b01      	ldr	r3, [sp, #4]
 80046a0:	9802      	ldr	r0, [sp, #8]
 80046a2:	3301      	adds	r3, #1
 80046a4:	181b      	adds	r3, r3, r0
 80046a6:	106d      	asrs	r5, r5, #1
 80046a8:	42ab      	cmp	r3, r5
 80046aa:	d900      	bls.n	80046ae <__ssputs_r+0x3e>
 80046ac:	001d      	movs	r5, r3
 80046ae:	0553      	lsls	r3, r2, #21
 80046b0:	d532      	bpl.n	8004718 <__ssputs_r+0xa8>
 80046b2:	0029      	movs	r1, r5
 80046b4:	0038      	movs	r0, r7
 80046b6:	f000 fb53 	bl	8004d60 <_malloc_r>
 80046ba:	1e06      	subs	r6, r0, #0
 80046bc:	d109      	bne.n	80046d2 <__ssputs_r+0x62>
 80046be:	230c      	movs	r3, #12
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	2340      	movs	r3, #64	; 0x40
 80046c4:	2001      	movs	r0, #1
 80046c6:	89a2      	ldrh	r2, [r4, #12]
 80046c8:	4240      	negs	r0, r0
 80046ca:	4313      	orrs	r3, r2
 80046cc:	81a3      	strh	r3, [r4, #12]
 80046ce:	b005      	add	sp, #20
 80046d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046d2:	9a02      	ldr	r2, [sp, #8]
 80046d4:	6921      	ldr	r1, [r4, #16]
 80046d6:	f000 faba 	bl	8004c4e <memcpy>
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	4a14      	ldr	r2, [pc, #80]	; (8004730 <__ssputs_r+0xc0>)
 80046de:	401a      	ands	r2, r3
 80046e0:	2380      	movs	r3, #128	; 0x80
 80046e2:	4313      	orrs	r3, r2
 80046e4:	81a3      	strh	r3, [r4, #12]
 80046e6:	9b02      	ldr	r3, [sp, #8]
 80046e8:	6126      	str	r6, [r4, #16]
 80046ea:	18f6      	adds	r6, r6, r3
 80046ec:	6026      	str	r6, [r4, #0]
 80046ee:	6165      	str	r5, [r4, #20]
 80046f0:	9e01      	ldr	r6, [sp, #4]
 80046f2:	1aed      	subs	r5, r5, r3
 80046f4:	60a5      	str	r5, [r4, #8]
 80046f6:	9b01      	ldr	r3, [sp, #4]
 80046f8:	429e      	cmp	r6, r3
 80046fa:	d900      	bls.n	80046fe <__ssputs_r+0x8e>
 80046fc:	9e01      	ldr	r6, [sp, #4]
 80046fe:	0032      	movs	r2, r6
 8004700:	9903      	ldr	r1, [sp, #12]
 8004702:	6820      	ldr	r0, [r4, #0]
 8004704:	f000 faac 	bl	8004c60 <memmove>
 8004708:	68a3      	ldr	r3, [r4, #8]
 800470a:	2000      	movs	r0, #0
 800470c:	1b9b      	subs	r3, r3, r6
 800470e:	60a3      	str	r3, [r4, #8]
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	199e      	adds	r6, r3, r6
 8004714:	6026      	str	r6, [r4, #0]
 8004716:	e7da      	b.n	80046ce <__ssputs_r+0x5e>
 8004718:	002a      	movs	r2, r5
 800471a:	0038      	movs	r0, r7
 800471c:	f000 fb96 	bl	8004e4c <_realloc_r>
 8004720:	1e06      	subs	r6, r0, #0
 8004722:	d1e0      	bne.n	80046e6 <__ssputs_r+0x76>
 8004724:	0038      	movs	r0, r7
 8004726:	6921      	ldr	r1, [r4, #16]
 8004728:	f000 faae 	bl	8004c88 <_free_r>
 800472c:	e7c7      	b.n	80046be <__ssputs_r+0x4e>
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	fffffb7f 	.word	0xfffffb7f

08004734 <_svfiprintf_r>:
 8004734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004736:	b0a1      	sub	sp, #132	; 0x84
 8004738:	9003      	str	r0, [sp, #12]
 800473a:	001d      	movs	r5, r3
 800473c:	898b      	ldrh	r3, [r1, #12]
 800473e:	000f      	movs	r7, r1
 8004740:	0016      	movs	r6, r2
 8004742:	061b      	lsls	r3, r3, #24
 8004744:	d511      	bpl.n	800476a <_svfiprintf_r+0x36>
 8004746:	690b      	ldr	r3, [r1, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10e      	bne.n	800476a <_svfiprintf_r+0x36>
 800474c:	2140      	movs	r1, #64	; 0x40
 800474e:	f000 fb07 	bl	8004d60 <_malloc_r>
 8004752:	6038      	str	r0, [r7, #0]
 8004754:	6138      	str	r0, [r7, #16]
 8004756:	2800      	cmp	r0, #0
 8004758:	d105      	bne.n	8004766 <_svfiprintf_r+0x32>
 800475a:	230c      	movs	r3, #12
 800475c:	9a03      	ldr	r2, [sp, #12]
 800475e:	3801      	subs	r0, #1
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	b021      	add	sp, #132	; 0x84
 8004764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004766:	2340      	movs	r3, #64	; 0x40
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	2300      	movs	r3, #0
 800476c:	ac08      	add	r4, sp, #32
 800476e:	6163      	str	r3, [r4, #20]
 8004770:	3320      	adds	r3, #32
 8004772:	7663      	strb	r3, [r4, #25]
 8004774:	3310      	adds	r3, #16
 8004776:	76a3      	strb	r3, [r4, #26]
 8004778:	9507      	str	r5, [sp, #28]
 800477a:	0035      	movs	r5, r6
 800477c:	782b      	ldrb	r3, [r5, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <_svfiprintf_r+0x52>
 8004782:	2b25      	cmp	r3, #37	; 0x25
 8004784:	d147      	bne.n	8004816 <_svfiprintf_r+0xe2>
 8004786:	1bab      	subs	r3, r5, r6
 8004788:	9305      	str	r3, [sp, #20]
 800478a:	42b5      	cmp	r5, r6
 800478c:	d00c      	beq.n	80047a8 <_svfiprintf_r+0x74>
 800478e:	0032      	movs	r2, r6
 8004790:	0039      	movs	r1, r7
 8004792:	9803      	ldr	r0, [sp, #12]
 8004794:	f7ff ff6c 	bl	8004670 <__ssputs_r>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d100      	bne.n	800479e <_svfiprintf_r+0x6a>
 800479c:	e0ae      	b.n	80048fc <_svfiprintf_r+0x1c8>
 800479e:	6962      	ldr	r2, [r4, #20]
 80047a0:	9b05      	ldr	r3, [sp, #20]
 80047a2:	4694      	mov	ip, r2
 80047a4:	4463      	add	r3, ip
 80047a6:	6163      	str	r3, [r4, #20]
 80047a8:	782b      	ldrb	r3, [r5, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d100      	bne.n	80047b0 <_svfiprintf_r+0x7c>
 80047ae:	e0a5      	b.n	80048fc <_svfiprintf_r+0x1c8>
 80047b0:	2201      	movs	r2, #1
 80047b2:	2300      	movs	r3, #0
 80047b4:	4252      	negs	r2, r2
 80047b6:	6062      	str	r2, [r4, #4]
 80047b8:	a904      	add	r1, sp, #16
 80047ba:	3254      	adds	r2, #84	; 0x54
 80047bc:	1852      	adds	r2, r2, r1
 80047be:	1c6e      	adds	r6, r5, #1
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	60e3      	str	r3, [r4, #12]
 80047c4:	60a3      	str	r3, [r4, #8]
 80047c6:	7013      	strb	r3, [r2, #0]
 80047c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80047ca:	2205      	movs	r2, #5
 80047cc:	7831      	ldrb	r1, [r6, #0]
 80047ce:	4854      	ldr	r0, [pc, #336]	; (8004920 <_svfiprintf_r+0x1ec>)
 80047d0:	f000 fa32 	bl	8004c38 <memchr>
 80047d4:	1c75      	adds	r5, r6, #1
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d11f      	bne.n	800481a <_svfiprintf_r+0xe6>
 80047da:	6822      	ldr	r2, [r4, #0]
 80047dc:	06d3      	lsls	r3, r2, #27
 80047de:	d504      	bpl.n	80047ea <_svfiprintf_r+0xb6>
 80047e0:	2353      	movs	r3, #83	; 0x53
 80047e2:	a904      	add	r1, sp, #16
 80047e4:	185b      	adds	r3, r3, r1
 80047e6:	2120      	movs	r1, #32
 80047e8:	7019      	strb	r1, [r3, #0]
 80047ea:	0713      	lsls	r3, r2, #28
 80047ec:	d504      	bpl.n	80047f8 <_svfiprintf_r+0xc4>
 80047ee:	2353      	movs	r3, #83	; 0x53
 80047f0:	a904      	add	r1, sp, #16
 80047f2:	185b      	adds	r3, r3, r1
 80047f4:	212b      	movs	r1, #43	; 0x2b
 80047f6:	7019      	strb	r1, [r3, #0]
 80047f8:	7833      	ldrb	r3, [r6, #0]
 80047fa:	2b2a      	cmp	r3, #42	; 0x2a
 80047fc:	d016      	beq.n	800482c <_svfiprintf_r+0xf8>
 80047fe:	0035      	movs	r5, r6
 8004800:	2100      	movs	r1, #0
 8004802:	200a      	movs	r0, #10
 8004804:	68e3      	ldr	r3, [r4, #12]
 8004806:	782a      	ldrb	r2, [r5, #0]
 8004808:	1c6e      	adds	r6, r5, #1
 800480a:	3a30      	subs	r2, #48	; 0x30
 800480c:	2a09      	cmp	r2, #9
 800480e:	d94e      	bls.n	80048ae <_svfiprintf_r+0x17a>
 8004810:	2900      	cmp	r1, #0
 8004812:	d111      	bne.n	8004838 <_svfiprintf_r+0x104>
 8004814:	e017      	b.n	8004846 <_svfiprintf_r+0x112>
 8004816:	3501      	adds	r5, #1
 8004818:	e7b0      	b.n	800477c <_svfiprintf_r+0x48>
 800481a:	4b41      	ldr	r3, [pc, #260]	; (8004920 <_svfiprintf_r+0x1ec>)
 800481c:	6822      	ldr	r2, [r4, #0]
 800481e:	1ac0      	subs	r0, r0, r3
 8004820:	2301      	movs	r3, #1
 8004822:	4083      	lsls	r3, r0
 8004824:	4313      	orrs	r3, r2
 8004826:	002e      	movs	r6, r5
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	e7ce      	b.n	80047ca <_svfiprintf_r+0x96>
 800482c:	9b07      	ldr	r3, [sp, #28]
 800482e:	1d19      	adds	r1, r3, #4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	9107      	str	r1, [sp, #28]
 8004834:	2b00      	cmp	r3, #0
 8004836:	db01      	blt.n	800483c <_svfiprintf_r+0x108>
 8004838:	930b      	str	r3, [sp, #44]	; 0x2c
 800483a:	e004      	b.n	8004846 <_svfiprintf_r+0x112>
 800483c:	425b      	negs	r3, r3
 800483e:	60e3      	str	r3, [r4, #12]
 8004840:	2302      	movs	r3, #2
 8004842:	4313      	orrs	r3, r2
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	782b      	ldrb	r3, [r5, #0]
 8004848:	2b2e      	cmp	r3, #46	; 0x2e
 800484a:	d10a      	bne.n	8004862 <_svfiprintf_r+0x12e>
 800484c:	786b      	ldrb	r3, [r5, #1]
 800484e:	2b2a      	cmp	r3, #42	; 0x2a
 8004850:	d135      	bne.n	80048be <_svfiprintf_r+0x18a>
 8004852:	9b07      	ldr	r3, [sp, #28]
 8004854:	3502      	adds	r5, #2
 8004856:	1d1a      	adds	r2, r3, #4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	9207      	str	r2, [sp, #28]
 800485c:	2b00      	cmp	r3, #0
 800485e:	db2b      	blt.n	80048b8 <_svfiprintf_r+0x184>
 8004860:	9309      	str	r3, [sp, #36]	; 0x24
 8004862:	4e30      	ldr	r6, [pc, #192]	; (8004924 <_svfiprintf_r+0x1f0>)
 8004864:	2203      	movs	r2, #3
 8004866:	0030      	movs	r0, r6
 8004868:	7829      	ldrb	r1, [r5, #0]
 800486a:	f000 f9e5 	bl	8004c38 <memchr>
 800486e:	2800      	cmp	r0, #0
 8004870:	d006      	beq.n	8004880 <_svfiprintf_r+0x14c>
 8004872:	2340      	movs	r3, #64	; 0x40
 8004874:	1b80      	subs	r0, r0, r6
 8004876:	4083      	lsls	r3, r0
 8004878:	6822      	ldr	r2, [r4, #0]
 800487a:	3501      	adds	r5, #1
 800487c:	4313      	orrs	r3, r2
 800487e:	6023      	str	r3, [r4, #0]
 8004880:	7829      	ldrb	r1, [r5, #0]
 8004882:	2206      	movs	r2, #6
 8004884:	4828      	ldr	r0, [pc, #160]	; (8004928 <_svfiprintf_r+0x1f4>)
 8004886:	1c6e      	adds	r6, r5, #1
 8004888:	7621      	strb	r1, [r4, #24]
 800488a:	f000 f9d5 	bl	8004c38 <memchr>
 800488e:	2800      	cmp	r0, #0
 8004890:	d03c      	beq.n	800490c <_svfiprintf_r+0x1d8>
 8004892:	4b26      	ldr	r3, [pc, #152]	; (800492c <_svfiprintf_r+0x1f8>)
 8004894:	2b00      	cmp	r3, #0
 8004896:	d125      	bne.n	80048e4 <_svfiprintf_r+0x1b0>
 8004898:	2207      	movs	r2, #7
 800489a:	9b07      	ldr	r3, [sp, #28]
 800489c:	3307      	adds	r3, #7
 800489e:	4393      	bics	r3, r2
 80048a0:	3308      	adds	r3, #8
 80048a2:	9307      	str	r3, [sp, #28]
 80048a4:	6963      	ldr	r3, [r4, #20]
 80048a6:	9a04      	ldr	r2, [sp, #16]
 80048a8:	189b      	adds	r3, r3, r2
 80048aa:	6163      	str	r3, [r4, #20]
 80048ac:	e765      	b.n	800477a <_svfiprintf_r+0x46>
 80048ae:	4343      	muls	r3, r0
 80048b0:	0035      	movs	r5, r6
 80048b2:	2101      	movs	r1, #1
 80048b4:	189b      	adds	r3, r3, r2
 80048b6:	e7a6      	b.n	8004806 <_svfiprintf_r+0xd2>
 80048b8:	2301      	movs	r3, #1
 80048ba:	425b      	negs	r3, r3
 80048bc:	e7d0      	b.n	8004860 <_svfiprintf_r+0x12c>
 80048be:	2300      	movs	r3, #0
 80048c0:	200a      	movs	r0, #10
 80048c2:	001a      	movs	r2, r3
 80048c4:	3501      	adds	r5, #1
 80048c6:	6063      	str	r3, [r4, #4]
 80048c8:	7829      	ldrb	r1, [r5, #0]
 80048ca:	1c6e      	adds	r6, r5, #1
 80048cc:	3930      	subs	r1, #48	; 0x30
 80048ce:	2909      	cmp	r1, #9
 80048d0:	d903      	bls.n	80048da <_svfiprintf_r+0x1a6>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0c5      	beq.n	8004862 <_svfiprintf_r+0x12e>
 80048d6:	9209      	str	r2, [sp, #36]	; 0x24
 80048d8:	e7c3      	b.n	8004862 <_svfiprintf_r+0x12e>
 80048da:	4342      	muls	r2, r0
 80048dc:	0035      	movs	r5, r6
 80048de:	2301      	movs	r3, #1
 80048e0:	1852      	adds	r2, r2, r1
 80048e2:	e7f1      	b.n	80048c8 <_svfiprintf_r+0x194>
 80048e4:	ab07      	add	r3, sp, #28
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	003a      	movs	r2, r7
 80048ea:	0021      	movs	r1, r4
 80048ec:	4b10      	ldr	r3, [pc, #64]	; (8004930 <_svfiprintf_r+0x1fc>)
 80048ee:	9803      	ldr	r0, [sp, #12]
 80048f0:	e000      	b.n	80048f4 <_svfiprintf_r+0x1c0>
 80048f2:	bf00      	nop
 80048f4:	9004      	str	r0, [sp, #16]
 80048f6:	9b04      	ldr	r3, [sp, #16]
 80048f8:	3301      	adds	r3, #1
 80048fa:	d1d3      	bne.n	80048a4 <_svfiprintf_r+0x170>
 80048fc:	89bb      	ldrh	r3, [r7, #12]
 80048fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004900:	065b      	lsls	r3, r3, #25
 8004902:	d400      	bmi.n	8004906 <_svfiprintf_r+0x1d2>
 8004904:	e72d      	b.n	8004762 <_svfiprintf_r+0x2e>
 8004906:	2001      	movs	r0, #1
 8004908:	4240      	negs	r0, r0
 800490a:	e72a      	b.n	8004762 <_svfiprintf_r+0x2e>
 800490c:	ab07      	add	r3, sp, #28
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	003a      	movs	r2, r7
 8004912:	0021      	movs	r1, r4
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <_svfiprintf_r+0x1fc>)
 8004916:	9803      	ldr	r0, [sp, #12]
 8004918:	f000 f87c 	bl	8004a14 <_printf_i>
 800491c:	e7ea      	b.n	80048f4 <_svfiprintf_r+0x1c0>
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	08005058 	.word	0x08005058
 8004924:	0800505e 	.word	0x0800505e
 8004928:	08005062 	.word	0x08005062
 800492c:	00000000 	.word	0x00000000
 8004930:	08004671 	.word	0x08004671

08004934 <_printf_common>:
 8004934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004936:	0015      	movs	r5, r2
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	688a      	ldr	r2, [r1, #8]
 800493c:	690b      	ldr	r3, [r1, #16]
 800493e:	000c      	movs	r4, r1
 8004940:	9000      	str	r0, [sp, #0]
 8004942:	4293      	cmp	r3, r2
 8004944:	da00      	bge.n	8004948 <_printf_common+0x14>
 8004946:	0013      	movs	r3, r2
 8004948:	0022      	movs	r2, r4
 800494a:	602b      	str	r3, [r5, #0]
 800494c:	3243      	adds	r2, #67	; 0x43
 800494e:	7812      	ldrb	r2, [r2, #0]
 8004950:	2a00      	cmp	r2, #0
 8004952:	d001      	beq.n	8004958 <_printf_common+0x24>
 8004954:	3301      	adds	r3, #1
 8004956:	602b      	str	r3, [r5, #0]
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	069b      	lsls	r3, r3, #26
 800495c:	d502      	bpl.n	8004964 <_printf_common+0x30>
 800495e:	682b      	ldr	r3, [r5, #0]
 8004960:	3302      	adds	r3, #2
 8004962:	602b      	str	r3, [r5, #0]
 8004964:	6822      	ldr	r2, [r4, #0]
 8004966:	2306      	movs	r3, #6
 8004968:	0017      	movs	r7, r2
 800496a:	401f      	ands	r7, r3
 800496c:	421a      	tst	r2, r3
 800496e:	d027      	beq.n	80049c0 <_printf_common+0x8c>
 8004970:	0023      	movs	r3, r4
 8004972:	3343      	adds	r3, #67	; 0x43
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	1e5a      	subs	r2, r3, #1
 8004978:	4193      	sbcs	r3, r2
 800497a:	6822      	ldr	r2, [r4, #0]
 800497c:	0692      	lsls	r2, r2, #26
 800497e:	d430      	bmi.n	80049e2 <_printf_common+0xae>
 8004980:	0022      	movs	r2, r4
 8004982:	9901      	ldr	r1, [sp, #4]
 8004984:	9800      	ldr	r0, [sp, #0]
 8004986:	9e08      	ldr	r6, [sp, #32]
 8004988:	3243      	adds	r2, #67	; 0x43
 800498a:	47b0      	blx	r6
 800498c:	1c43      	adds	r3, r0, #1
 800498e:	d025      	beq.n	80049dc <_printf_common+0xa8>
 8004990:	2306      	movs	r3, #6
 8004992:	6820      	ldr	r0, [r4, #0]
 8004994:	682a      	ldr	r2, [r5, #0]
 8004996:	68e1      	ldr	r1, [r4, #12]
 8004998:	2500      	movs	r5, #0
 800499a:	4003      	ands	r3, r0
 800499c:	2b04      	cmp	r3, #4
 800499e:	d103      	bne.n	80049a8 <_printf_common+0x74>
 80049a0:	1a8d      	subs	r5, r1, r2
 80049a2:	43eb      	mvns	r3, r5
 80049a4:	17db      	asrs	r3, r3, #31
 80049a6:	401d      	ands	r5, r3
 80049a8:	68a3      	ldr	r3, [r4, #8]
 80049aa:	6922      	ldr	r2, [r4, #16]
 80049ac:	4293      	cmp	r3, r2
 80049ae:	dd01      	ble.n	80049b4 <_printf_common+0x80>
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	18ed      	adds	r5, r5, r3
 80049b4:	2700      	movs	r7, #0
 80049b6:	42bd      	cmp	r5, r7
 80049b8:	d120      	bne.n	80049fc <_printf_common+0xc8>
 80049ba:	2000      	movs	r0, #0
 80049bc:	e010      	b.n	80049e0 <_printf_common+0xac>
 80049be:	3701      	adds	r7, #1
 80049c0:	68e3      	ldr	r3, [r4, #12]
 80049c2:	682a      	ldr	r2, [r5, #0]
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	42bb      	cmp	r3, r7
 80049c8:	ddd2      	ble.n	8004970 <_printf_common+0x3c>
 80049ca:	0022      	movs	r2, r4
 80049cc:	2301      	movs	r3, #1
 80049ce:	9901      	ldr	r1, [sp, #4]
 80049d0:	9800      	ldr	r0, [sp, #0]
 80049d2:	9e08      	ldr	r6, [sp, #32]
 80049d4:	3219      	adds	r2, #25
 80049d6:	47b0      	blx	r6
 80049d8:	1c43      	adds	r3, r0, #1
 80049da:	d1f0      	bne.n	80049be <_printf_common+0x8a>
 80049dc:	2001      	movs	r0, #1
 80049de:	4240      	negs	r0, r0
 80049e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049e2:	2030      	movs	r0, #48	; 0x30
 80049e4:	18e1      	adds	r1, r4, r3
 80049e6:	3143      	adds	r1, #67	; 0x43
 80049e8:	7008      	strb	r0, [r1, #0]
 80049ea:	0021      	movs	r1, r4
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	3145      	adds	r1, #69	; 0x45
 80049f0:	7809      	ldrb	r1, [r1, #0]
 80049f2:	18a2      	adds	r2, r4, r2
 80049f4:	3243      	adds	r2, #67	; 0x43
 80049f6:	3302      	adds	r3, #2
 80049f8:	7011      	strb	r1, [r2, #0]
 80049fa:	e7c1      	b.n	8004980 <_printf_common+0x4c>
 80049fc:	0022      	movs	r2, r4
 80049fe:	2301      	movs	r3, #1
 8004a00:	9901      	ldr	r1, [sp, #4]
 8004a02:	9800      	ldr	r0, [sp, #0]
 8004a04:	9e08      	ldr	r6, [sp, #32]
 8004a06:	321a      	adds	r2, #26
 8004a08:	47b0      	blx	r6
 8004a0a:	1c43      	adds	r3, r0, #1
 8004a0c:	d0e6      	beq.n	80049dc <_printf_common+0xa8>
 8004a0e:	3701      	adds	r7, #1
 8004a10:	e7d1      	b.n	80049b6 <_printf_common+0x82>
	...

08004a14 <_printf_i>:
 8004a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a16:	b08b      	sub	sp, #44	; 0x2c
 8004a18:	9206      	str	r2, [sp, #24]
 8004a1a:	000a      	movs	r2, r1
 8004a1c:	3243      	adds	r2, #67	; 0x43
 8004a1e:	9307      	str	r3, [sp, #28]
 8004a20:	9005      	str	r0, [sp, #20]
 8004a22:	9204      	str	r2, [sp, #16]
 8004a24:	7e0a      	ldrb	r2, [r1, #24]
 8004a26:	000c      	movs	r4, r1
 8004a28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a2a:	2a78      	cmp	r2, #120	; 0x78
 8004a2c:	d807      	bhi.n	8004a3e <_printf_i+0x2a>
 8004a2e:	2a62      	cmp	r2, #98	; 0x62
 8004a30:	d809      	bhi.n	8004a46 <_printf_i+0x32>
 8004a32:	2a00      	cmp	r2, #0
 8004a34:	d100      	bne.n	8004a38 <_printf_i+0x24>
 8004a36:	e0c1      	b.n	8004bbc <_printf_i+0x1a8>
 8004a38:	2a58      	cmp	r2, #88	; 0x58
 8004a3a:	d100      	bne.n	8004a3e <_printf_i+0x2a>
 8004a3c:	e08c      	b.n	8004b58 <_printf_i+0x144>
 8004a3e:	0026      	movs	r6, r4
 8004a40:	3642      	adds	r6, #66	; 0x42
 8004a42:	7032      	strb	r2, [r6, #0]
 8004a44:	e022      	b.n	8004a8c <_printf_i+0x78>
 8004a46:	0010      	movs	r0, r2
 8004a48:	3863      	subs	r0, #99	; 0x63
 8004a4a:	2815      	cmp	r0, #21
 8004a4c:	d8f7      	bhi.n	8004a3e <_printf_i+0x2a>
 8004a4e:	f7fb fb57 	bl	8000100 <__gnu_thumb1_case_shi>
 8004a52:	0016      	.short	0x0016
 8004a54:	fff6001f 	.word	0xfff6001f
 8004a58:	fff6fff6 	.word	0xfff6fff6
 8004a5c:	001ffff6 	.word	0x001ffff6
 8004a60:	fff6fff6 	.word	0xfff6fff6
 8004a64:	fff6fff6 	.word	0xfff6fff6
 8004a68:	003600a8 	.word	0x003600a8
 8004a6c:	fff6009a 	.word	0xfff6009a
 8004a70:	00b9fff6 	.word	0x00b9fff6
 8004a74:	0036fff6 	.word	0x0036fff6
 8004a78:	fff6fff6 	.word	0xfff6fff6
 8004a7c:	009e      	.short	0x009e
 8004a7e:	0026      	movs	r6, r4
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	3642      	adds	r6, #66	; 0x42
 8004a84:	1d11      	adds	r1, r2, #4
 8004a86:	6019      	str	r1, [r3, #0]
 8004a88:	6813      	ldr	r3, [r2, #0]
 8004a8a:	7033      	strb	r3, [r6, #0]
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0a7      	b.n	8004be0 <_printf_i+0x1cc>
 8004a90:	6808      	ldr	r0, [r1, #0]
 8004a92:	6819      	ldr	r1, [r3, #0]
 8004a94:	1d0a      	adds	r2, r1, #4
 8004a96:	0605      	lsls	r5, r0, #24
 8004a98:	d50b      	bpl.n	8004ab2 <_printf_i+0x9e>
 8004a9a:	680d      	ldr	r5, [r1, #0]
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	2d00      	cmp	r5, #0
 8004aa0:	da03      	bge.n	8004aaa <_printf_i+0x96>
 8004aa2:	232d      	movs	r3, #45	; 0x2d
 8004aa4:	9a04      	ldr	r2, [sp, #16]
 8004aa6:	426d      	negs	r5, r5
 8004aa8:	7013      	strb	r3, [r2, #0]
 8004aaa:	4b61      	ldr	r3, [pc, #388]	; (8004c30 <_printf_i+0x21c>)
 8004aac:	270a      	movs	r7, #10
 8004aae:	9303      	str	r3, [sp, #12]
 8004ab0:	e01b      	b.n	8004aea <_printf_i+0xd6>
 8004ab2:	680d      	ldr	r5, [r1, #0]
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	0641      	lsls	r1, r0, #25
 8004ab8:	d5f1      	bpl.n	8004a9e <_printf_i+0x8a>
 8004aba:	b22d      	sxth	r5, r5
 8004abc:	e7ef      	b.n	8004a9e <_printf_i+0x8a>
 8004abe:	680d      	ldr	r5, [r1, #0]
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	1d08      	adds	r0, r1, #4
 8004ac4:	6018      	str	r0, [r3, #0]
 8004ac6:	062e      	lsls	r6, r5, #24
 8004ac8:	d501      	bpl.n	8004ace <_printf_i+0xba>
 8004aca:	680d      	ldr	r5, [r1, #0]
 8004acc:	e003      	b.n	8004ad6 <_printf_i+0xc2>
 8004ace:	066d      	lsls	r5, r5, #25
 8004ad0:	d5fb      	bpl.n	8004aca <_printf_i+0xb6>
 8004ad2:	680d      	ldr	r5, [r1, #0]
 8004ad4:	b2ad      	uxth	r5, r5
 8004ad6:	4b56      	ldr	r3, [pc, #344]	; (8004c30 <_printf_i+0x21c>)
 8004ad8:	2708      	movs	r7, #8
 8004ada:	9303      	str	r3, [sp, #12]
 8004adc:	2a6f      	cmp	r2, #111	; 0x6f
 8004ade:	d000      	beq.n	8004ae2 <_printf_i+0xce>
 8004ae0:	3702      	adds	r7, #2
 8004ae2:	0023      	movs	r3, r4
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	3343      	adds	r3, #67	; 0x43
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	6863      	ldr	r3, [r4, #4]
 8004aec:	60a3      	str	r3, [r4, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	db03      	blt.n	8004afa <_printf_i+0xe6>
 8004af2:	2204      	movs	r2, #4
 8004af4:	6821      	ldr	r1, [r4, #0]
 8004af6:	4391      	bics	r1, r2
 8004af8:	6021      	str	r1, [r4, #0]
 8004afa:	2d00      	cmp	r5, #0
 8004afc:	d102      	bne.n	8004b04 <_printf_i+0xf0>
 8004afe:	9e04      	ldr	r6, [sp, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00c      	beq.n	8004b1e <_printf_i+0x10a>
 8004b04:	9e04      	ldr	r6, [sp, #16]
 8004b06:	0028      	movs	r0, r5
 8004b08:	0039      	movs	r1, r7
 8004b0a:	f7fb fb89 	bl	8000220 <__aeabi_uidivmod>
 8004b0e:	9b03      	ldr	r3, [sp, #12]
 8004b10:	3e01      	subs	r6, #1
 8004b12:	5c5b      	ldrb	r3, [r3, r1]
 8004b14:	7033      	strb	r3, [r6, #0]
 8004b16:	002b      	movs	r3, r5
 8004b18:	0005      	movs	r5, r0
 8004b1a:	429f      	cmp	r7, r3
 8004b1c:	d9f3      	bls.n	8004b06 <_printf_i+0xf2>
 8004b1e:	2f08      	cmp	r7, #8
 8004b20:	d109      	bne.n	8004b36 <_printf_i+0x122>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	07db      	lsls	r3, r3, #31
 8004b26:	d506      	bpl.n	8004b36 <_printf_i+0x122>
 8004b28:	6863      	ldr	r3, [r4, #4]
 8004b2a:	6922      	ldr	r2, [r4, #16]
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	dc02      	bgt.n	8004b36 <_printf_i+0x122>
 8004b30:	2330      	movs	r3, #48	; 0x30
 8004b32:	3e01      	subs	r6, #1
 8004b34:	7033      	strb	r3, [r6, #0]
 8004b36:	9b04      	ldr	r3, [sp, #16]
 8004b38:	1b9b      	subs	r3, r3, r6
 8004b3a:	6123      	str	r3, [r4, #16]
 8004b3c:	9b07      	ldr	r3, [sp, #28]
 8004b3e:	0021      	movs	r1, r4
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	9805      	ldr	r0, [sp, #20]
 8004b44:	9b06      	ldr	r3, [sp, #24]
 8004b46:	aa09      	add	r2, sp, #36	; 0x24
 8004b48:	f7ff fef4 	bl	8004934 <_printf_common>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d14c      	bne.n	8004bea <_printf_i+0x1d6>
 8004b50:	2001      	movs	r0, #1
 8004b52:	4240      	negs	r0, r0
 8004b54:	b00b      	add	sp, #44	; 0x2c
 8004b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b58:	3145      	adds	r1, #69	; 0x45
 8004b5a:	700a      	strb	r2, [r1, #0]
 8004b5c:	4a34      	ldr	r2, [pc, #208]	; (8004c30 <_printf_i+0x21c>)
 8004b5e:	9203      	str	r2, [sp, #12]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	6821      	ldr	r1, [r4, #0]
 8004b64:	ca20      	ldmia	r2!, {r5}
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	0608      	lsls	r0, r1, #24
 8004b6a:	d516      	bpl.n	8004b9a <_printf_i+0x186>
 8004b6c:	07cb      	lsls	r3, r1, #31
 8004b6e:	d502      	bpl.n	8004b76 <_printf_i+0x162>
 8004b70:	2320      	movs	r3, #32
 8004b72:	4319      	orrs	r1, r3
 8004b74:	6021      	str	r1, [r4, #0]
 8004b76:	2710      	movs	r7, #16
 8004b78:	2d00      	cmp	r5, #0
 8004b7a:	d1b2      	bne.n	8004ae2 <_printf_i+0xce>
 8004b7c:	2320      	movs	r3, #32
 8004b7e:	6822      	ldr	r2, [r4, #0]
 8004b80:	439a      	bics	r2, r3
 8004b82:	6022      	str	r2, [r4, #0]
 8004b84:	e7ad      	b.n	8004ae2 <_printf_i+0xce>
 8004b86:	2220      	movs	r2, #32
 8004b88:	6809      	ldr	r1, [r1, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	6022      	str	r2, [r4, #0]
 8004b8e:	0022      	movs	r2, r4
 8004b90:	2178      	movs	r1, #120	; 0x78
 8004b92:	3245      	adds	r2, #69	; 0x45
 8004b94:	7011      	strb	r1, [r2, #0]
 8004b96:	4a27      	ldr	r2, [pc, #156]	; (8004c34 <_printf_i+0x220>)
 8004b98:	e7e1      	b.n	8004b5e <_printf_i+0x14a>
 8004b9a:	0648      	lsls	r0, r1, #25
 8004b9c:	d5e6      	bpl.n	8004b6c <_printf_i+0x158>
 8004b9e:	b2ad      	uxth	r5, r5
 8004ba0:	e7e4      	b.n	8004b6c <_printf_i+0x158>
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	680d      	ldr	r5, [r1, #0]
 8004ba6:	1d10      	adds	r0, r2, #4
 8004ba8:	6949      	ldr	r1, [r1, #20]
 8004baa:	6018      	str	r0, [r3, #0]
 8004bac:	6813      	ldr	r3, [r2, #0]
 8004bae:	062e      	lsls	r6, r5, #24
 8004bb0:	d501      	bpl.n	8004bb6 <_printf_i+0x1a2>
 8004bb2:	6019      	str	r1, [r3, #0]
 8004bb4:	e002      	b.n	8004bbc <_printf_i+0x1a8>
 8004bb6:	066d      	lsls	r5, r5, #25
 8004bb8:	d5fb      	bpl.n	8004bb2 <_printf_i+0x19e>
 8004bba:	8019      	strh	r1, [r3, #0]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	9e04      	ldr	r6, [sp, #16]
 8004bc0:	6123      	str	r3, [r4, #16]
 8004bc2:	e7bb      	b.n	8004b3c <_printf_i+0x128>
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	1d11      	adds	r1, r2, #4
 8004bc8:	6019      	str	r1, [r3, #0]
 8004bca:	6816      	ldr	r6, [r2, #0]
 8004bcc:	2100      	movs	r1, #0
 8004bce:	0030      	movs	r0, r6
 8004bd0:	6862      	ldr	r2, [r4, #4]
 8004bd2:	f000 f831 	bl	8004c38 <memchr>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d001      	beq.n	8004bde <_printf_i+0x1ca>
 8004bda:	1b80      	subs	r0, r0, r6
 8004bdc:	6060      	str	r0, [r4, #4]
 8004bde:	6863      	ldr	r3, [r4, #4]
 8004be0:	6123      	str	r3, [r4, #16]
 8004be2:	2300      	movs	r3, #0
 8004be4:	9a04      	ldr	r2, [sp, #16]
 8004be6:	7013      	strb	r3, [r2, #0]
 8004be8:	e7a8      	b.n	8004b3c <_printf_i+0x128>
 8004bea:	6923      	ldr	r3, [r4, #16]
 8004bec:	0032      	movs	r2, r6
 8004bee:	9906      	ldr	r1, [sp, #24]
 8004bf0:	9805      	ldr	r0, [sp, #20]
 8004bf2:	9d07      	ldr	r5, [sp, #28]
 8004bf4:	47a8      	blx	r5
 8004bf6:	1c43      	adds	r3, r0, #1
 8004bf8:	d0aa      	beq.n	8004b50 <_printf_i+0x13c>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	079b      	lsls	r3, r3, #30
 8004bfe:	d415      	bmi.n	8004c2c <_printf_i+0x218>
 8004c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c02:	68e0      	ldr	r0, [r4, #12]
 8004c04:	4298      	cmp	r0, r3
 8004c06:	daa5      	bge.n	8004b54 <_printf_i+0x140>
 8004c08:	0018      	movs	r0, r3
 8004c0a:	e7a3      	b.n	8004b54 <_printf_i+0x140>
 8004c0c:	0022      	movs	r2, r4
 8004c0e:	2301      	movs	r3, #1
 8004c10:	9906      	ldr	r1, [sp, #24]
 8004c12:	9805      	ldr	r0, [sp, #20]
 8004c14:	9e07      	ldr	r6, [sp, #28]
 8004c16:	3219      	adds	r2, #25
 8004c18:	47b0      	blx	r6
 8004c1a:	1c43      	adds	r3, r0, #1
 8004c1c:	d098      	beq.n	8004b50 <_printf_i+0x13c>
 8004c1e:	3501      	adds	r5, #1
 8004c20:	68e3      	ldr	r3, [r4, #12]
 8004c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	42ab      	cmp	r3, r5
 8004c28:	dcf0      	bgt.n	8004c0c <_printf_i+0x1f8>
 8004c2a:	e7e9      	b.n	8004c00 <_printf_i+0x1ec>
 8004c2c:	2500      	movs	r5, #0
 8004c2e:	e7f7      	b.n	8004c20 <_printf_i+0x20c>
 8004c30:	08005069 	.word	0x08005069
 8004c34:	0800507a 	.word	0x0800507a

08004c38 <memchr>:
 8004c38:	b2c9      	uxtb	r1, r1
 8004c3a:	1882      	adds	r2, r0, r2
 8004c3c:	4290      	cmp	r0, r2
 8004c3e:	d101      	bne.n	8004c44 <memchr+0xc>
 8004c40:	2000      	movs	r0, #0
 8004c42:	4770      	bx	lr
 8004c44:	7803      	ldrb	r3, [r0, #0]
 8004c46:	428b      	cmp	r3, r1
 8004c48:	d0fb      	beq.n	8004c42 <memchr+0xa>
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	e7f6      	b.n	8004c3c <memchr+0x4>

08004c4e <memcpy>:
 8004c4e:	2300      	movs	r3, #0
 8004c50:	b510      	push	{r4, lr}
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d100      	bne.n	8004c58 <memcpy+0xa>
 8004c56:	bd10      	pop	{r4, pc}
 8004c58:	5ccc      	ldrb	r4, [r1, r3]
 8004c5a:	54c4      	strb	r4, [r0, r3]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	e7f8      	b.n	8004c52 <memcpy+0x4>

08004c60 <memmove>:
 8004c60:	b510      	push	{r4, lr}
 8004c62:	4288      	cmp	r0, r1
 8004c64:	d902      	bls.n	8004c6c <memmove+0xc>
 8004c66:	188b      	adds	r3, r1, r2
 8004c68:	4298      	cmp	r0, r3
 8004c6a:	d303      	bcc.n	8004c74 <memmove+0x14>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e007      	b.n	8004c80 <memmove+0x20>
 8004c70:	5c8b      	ldrb	r3, [r1, r2]
 8004c72:	5483      	strb	r3, [r0, r2]
 8004c74:	3a01      	subs	r2, #1
 8004c76:	d2fb      	bcs.n	8004c70 <memmove+0x10>
 8004c78:	bd10      	pop	{r4, pc}
 8004c7a:	5ccc      	ldrb	r4, [r1, r3]
 8004c7c:	54c4      	strb	r4, [r0, r3]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d1fa      	bne.n	8004c7a <memmove+0x1a>
 8004c84:	e7f8      	b.n	8004c78 <memmove+0x18>
	...

08004c88 <_free_r>:
 8004c88:	b570      	push	{r4, r5, r6, lr}
 8004c8a:	0005      	movs	r5, r0
 8004c8c:	2900      	cmp	r1, #0
 8004c8e:	d010      	beq.n	8004cb2 <_free_r+0x2a>
 8004c90:	1f0c      	subs	r4, r1, #4
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	da00      	bge.n	8004c9a <_free_r+0x12>
 8004c98:	18e4      	adds	r4, r4, r3
 8004c9a:	0028      	movs	r0, r5
 8004c9c:	f000 f918 	bl	8004ed0 <__malloc_lock>
 8004ca0:	4a1d      	ldr	r2, [pc, #116]	; (8004d18 <_free_r+0x90>)
 8004ca2:	6813      	ldr	r3, [r2, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <_free_r+0x2c>
 8004ca8:	6063      	str	r3, [r4, #4]
 8004caa:	6014      	str	r4, [r2, #0]
 8004cac:	0028      	movs	r0, r5
 8004cae:	f000 f917 	bl	8004ee0 <__malloc_unlock>
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	d908      	bls.n	8004cca <_free_r+0x42>
 8004cb8:	6821      	ldr	r1, [r4, #0]
 8004cba:	1860      	adds	r0, r4, r1
 8004cbc:	4283      	cmp	r3, r0
 8004cbe:	d1f3      	bne.n	8004ca8 <_free_r+0x20>
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	1841      	adds	r1, r0, r1
 8004cc6:	6021      	str	r1, [r4, #0]
 8004cc8:	e7ee      	b.n	8004ca8 <_free_r+0x20>
 8004cca:	001a      	movs	r2, r3
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <_free_r+0x4e>
 8004cd2:	42a3      	cmp	r3, r4
 8004cd4:	d9f9      	bls.n	8004cca <_free_r+0x42>
 8004cd6:	6811      	ldr	r1, [r2, #0]
 8004cd8:	1850      	adds	r0, r2, r1
 8004cda:	42a0      	cmp	r0, r4
 8004cdc:	d10b      	bne.n	8004cf6 <_free_r+0x6e>
 8004cde:	6820      	ldr	r0, [r4, #0]
 8004ce0:	1809      	adds	r1, r1, r0
 8004ce2:	1850      	adds	r0, r2, r1
 8004ce4:	6011      	str	r1, [r2, #0]
 8004ce6:	4283      	cmp	r3, r0
 8004ce8:	d1e0      	bne.n	8004cac <_free_r+0x24>
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	1841      	adds	r1, r0, r1
 8004cf0:	6011      	str	r1, [r2, #0]
 8004cf2:	6053      	str	r3, [r2, #4]
 8004cf4:	e7da      	b.n	8004cac <_free_r+0x24>
 8004cf6:	42a0      	cmp	r0, r4
 8004cf8:	d902      	bls.n	8004d00 <_free_r+0x78>
 8004cfa:	230c      	movs	r3, #12
 8004cfc:	602b      	str	r3, [r5, #0]
 8004cfe:	e7d5      	b.n	8004cac <_free_r+0x24>
 8004d00:	6821      	ldr	r1, [r4, #0]
 8004d02:	1860      	adds	r0, r4, r1
 8004d04:	4283      	cmp	r3, r0
 8004d06:	d103      	bne.n	8004d10 <_free_r+0x88>
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	1841      	adds	r1, r0, r1
 8004d0e:	6021      	str	r1, [r4, #0]
 8004d10:	6063      	str	r3, [r4, #4]
 8004d12:	6054      	str	r4, [r2, #4]
 8004d14:	e7ca      	b.n	8004cac <_free_r+0x24>
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	200004c8 	.word	0x200004c8

08004d1c <sbrk_aligned>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	4e0f      	ldr	r6, [pc, #60]	; (8004d5c <sbrk_aligned+0x40>)
 8004d20:	000d      	movs	r5, r1
 8004d22:	6831      	ldr	r1, [r6, #0]
 8004d24:	0004      	movs	r4, r0
 8004d26:	2900      	cmp	r1, #0
 8004d28:	d102      	bne.n	8004d30 <sbrk_aligned+0x14>
 8004d2a:	f000 f8bf 	bl	8004eac <_sbrk_r>
 8004d2e:	6030      	str	r0, [r6, #0]
 8004d30:	0029      	movs	r1, r5
 8004d32:	0020      	movs	r0, r4
 8004d34:	f000 f8ba 	bl	8004eac <_sbrk_r>
 8004d38:	1c43      	adds	r3, r0, #1
 8004d3a:	d00a      	beq.n	8004d52 <sbrk_aligned+0x36>
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	1cc5      	adds	r5, r0, #3
 8004d40:	439d      	bics	r5, r3
 8004d42:	42a8      	cmp	r0, r5
 8004d44:	d007      	beq.n	8004d56 <sbrk_aligned+0x3a>
 8004d46:	1a29      	subs	r1, r5, r0
 8004d48:	0020      	movs	r0, r4
 8004d4a:	f000 f8af 	bl	8004eac <_sbrk_r>
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	d101      	bne.n	8004d56 <sbrk_aligned+0x3a>
 8004d52:	2501      	movs	r5, #1
 8004d54:	426d      	negs	r5, r5
 8004d56:	0028      	movs	r0, r5
 8004d58:	bd70      	pop	{r4, r5, r6, pc}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	200004cc 	.word	0x200004cc

08004d60 <_malloc_r>:
 8004d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d62:	2203      	movs	r2, #3
 8004d64:	1ccb      	adds	r3, r1, #3
 8004d66:	4393      	bics	r3, r2
 8004d68:	3308      	adds	r3, #8
 8004d6a:	0006      	movs	r6, r0
 8004d6c:	001f      	movs	r7, r3
 8004d6e:	2b0c      	cmp	r3, #12
 8004d70:	d232      	bcs.n	8004dd8 <_malloc_r+0x78>
 8004d72:	270c      	movs	r7, #12
 8004d74:	42b9      	cmp	r1, r7
 8004d76:	d831      	bhi.n	8004ddc <_malloc_r+0x7c>
 8004d78:	0030      	movs	r0, r6
 8004d7a:	f000 f8a9 	bl	8004ed0 <__malloc_lock>
 8004d7e:	4d32      	ldr	r5, [pc, #200]	; (8004e48 <_malloc_r+0xe8>)
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	001c      	movs	r4, r3
 8004d84:	2c00      	cmp	r4, #0
 8004d86:	d12e      	bne.n	8004de6 <_malloc_r+0x86>
 8004d88:	0039      	movs	r1, r7
 8004d8a:	0030      	movs	r0, r6
 8004d8c:	f7ff ffc6 	bl	8004d1c <sbrk_aligned>
 8004d90:	0004      	movs	r4, r0
 8004d92:	1c43      	adds	r3, r0, #1
 8004d94:	d11e      	bne.n	8004dd4 <_malloc_r+0x74>
 8004d96:	682c      	ldr	r4, [r5, #0]
 8004d98:	0025      	movs	r5, r4
 8004d9a:	2d00      	cmp	r5, #0
 8004d9c:	d14a      	bne.n	8004e34 <_malloc_r+0xd4>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	0029      	movs	r1, r5
 8004da2:	18e3      	adds	r3, r4, r3
 8004da4:	0030      	movs	r0, r6
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	f000 f880 	bl	8004eac <_sbrk_r>
 8004dac:	9b01      	ldr	r3, [sp, #4]
 8004dae:	4283      	cmp	r3, r0
 8004db0:	d143      	bne.n	8004e3a <_malloc_r+0xda>
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	3703      	adds	r7, #3
 8004db6:	1aff      	subs	r7, r7, r3
 8004db8:	2303      	movs	r3, #3
 8004dba:	439f      	bics	r7, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	2f0c      	cmp	r7, #12
 8004dc0:	d200      	bcs.n	8004dc4 <_malloc_r+0x64>
 8004dc2:	270c      	movs	r7, #12
 8004dc4:	0039      	movs	r1, r7
 8004dc6:	0030      	movs	r0, r6
 8004dc8:	f7ff ffa8 	bl	8004d1c <sbrk_aligned>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d034      	beq.n	8004e3a <_malloc_r+0xda>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	19df      	adds	r7, r3, r7
 8004dd4:	6027      	str	r7, [r4, #0]
 8004dd6:	e013      	b.n	8004e00 <_malloc_r+0xa0>
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	dacb      	bge.n	8004d74 <_malloc_r+0x14>
 8004ddc:	230c      	movs	r3, #12
 8004dde:	2500      	movs	r5, #0
 8004de0:	6033      	str	r3, [r6, #0]
 8004de2:	0028      	movs	r0, r5
 8004de4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004de6:	6822      	ldr	r2, [r4, #0]
 8004de8:	1bd1      	subs	r1, r2, r7
 8004dea:	d420      	bmi.n	8004e2e <_malloc_r+0xce>
 8004dec:	290b      	cmp	r1, #11
 8004dee:	d917      	bls.n	8004e20 <_malloc_r+0xc0>
 8004df0:	19e2      	adds	r2, r4, r7
 8004df2:	6027      	str	r7, [r4, #0]
 8004df4:	42a3      	cmp	r3, r4
 8004df6:	d111      	bne.n	8004e1c <_malloc_r+0xbc>
 8004df8:	602a      	str	r2, [r5, #0]
 8004dfa:	6863      	ldr	r3, [r4, #4]
 8004dfc:	6011      	str	r1, [r2, #0]
 8004dfe:	6053      	str	r3, [r2, #4]
 8004e00:	0030      	movs	r0, r6
 8004e02:	0025      	movs	r5, r4
 8004e04:	f000 f86c 	bl	8004ee0 <__malloc_unlock>
 8004e08:	2207      	movs	r2, #7
 8004e0a:	350b      	adds	r5, #11
 8004e0c:	1d23      	adds	r3, r4, #4
 8004e0e:	4395      	bics	r5, r2
 8004e10:	1aea      	subs	r2, r5, r3
 8004e12:	429d      	cmp	r5, r3
 8004e14:	d0e5      	beq.n	8004de2 <_malloc_r+0x82>
 8004e16:	1b5b      	subs	r3, r3, r5
 8004e18:	50a3      	str	r3, [r4, r2]
 8004e1a:	e7e2      	b.n	8004de2 <_malloc_r+0x82>
 8004e1c:	605a      	str	r2, [r3, #4]
 8004e1e:	e7ec      	b.n	8004dfa <_malloc_r+0x9a>
 8004e20:	6862      	ldr	r2, [r4, #4]
 8004e22:	42a3      	cmp	r3, r4
 8004e24:	d101      	bne.n	8004e2a <_malloc_r+0xca>
 8004e26:	602a      	str	r2, [r5, #0]
 8004e28:	e7ea      	b.n	8004e00 <_malloc_r+0xa0>
 8004e2a:	605a      	str	r2, [r3, #4]
 8004e2c:	e7e8      	b.n	8004e00 <_malloc_r+0xa0>
 8004e2e:	0023      	movs	r3, r4
 8004e30:	6864      	ldr	r4, [r4, #4]
 8004e32:	e7a7      	b.n	8004d84 <_malloc_r+0x24>
 8004e34:	002c      	movs	r4, r5
 8004e36:	686d      	ldr	r5, [r5, #4]
 8004e38:	e7af      	b.n	8004d9a <_malloc_r+0x3a>
 8004e3a:	230c      	movs	r3, #12
 8004e3c:	0030      	movs	r0, r6
 8004e3e:	6033      	str	r3, [r6, #0]
 8004e40:	f000 f84e 	bl	8004ee0 <__malloc_unlock>
 8004e44:	e7cd      	b.n	8004de2 <_malloc_r+0x82>
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	200004c8 	.word	0x200004c8

08004e4c <_realloc_r>:
 8004e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e4e:	0007      	movs	r7, r0
 8004e50:	000e      	movs	r6, r1
 8004e52:	0014      	movs	r4, r2
 8004e54:	2900      	cmp	r1, #0
 8004e56:	d105      	bne.n	8004e64 <_realloc_r+0x18>
 8004e58:	0011      	movs	r1, r2
 8004e5a:	f7ff ff81 	bl	8004d60 <_malloc_r>
 8004e5e:	0005      	movs	r5, r0
 8004e60:	0028      	movs	r0, r5
 8004e62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e64:	2a00      	cmp	r2, #0
 8004e66:	d103      	bne.n	8004e70 <_realloc_r+0x24>
 8004e68:	f7ff ff0e 	bl	8004c88 <_free_r>
 8004e6c:	0025      	movs	r5, r4
 8004e6e:	e7f7      	b.n	8004e60 <_realloc_r+0x14>
 8004e70:	f000 f83e 	bl	8004ef0 <_malloc_usable_size_r>
 8004e74:	9001      	str	r0, [sp, #4]
 8004e76:	4284      	cmp	r4, r0
 8004e78:	d803      	bhi.n	8004e82 <_realloc_r+0x36>
 8004e7a:	0035      	movs	r5, r6
 8004e7c:	0843      	lsrs	r3, r0, #1
 8004e7e:	42a3      	cmp	r3, r4
 8004e80:	d3ee      	bcc.n	8004e60 <_realloc_r+0x14>
 8004e82:	0021      	movs	r1, r4
 8004e84:	0038      	movs	r0, r7
 8004e86:	f7ff ff6b 	bl	8004d60 <_malloc_r>
 8004e8a:	1e05      	subs	r5, r0, #0
 8004e8c:	d0e8      	beq.n	8004e60 <_realloc_r+0x14>
 8004e8e:	9b01      	ldr	r3, [sp, #4]
 8004e90:	0022      	movs	r2, r4
 8004e92:	429c      	cmp	r4, r3
 8004e94:	d900      	bls.n	8004e98 <_realloc_r+0x4c>
 8004e96:	001a      	movs	r2, r3
 8004e98:	0031      	movs	r1, r6
 8004e9a:	0028      	movs	r0, r5
 8004e9c:	f7ff fed7 	bl	8004c4e <memcpy>
 8004ea0:	0031      	movs	r1, r6
 8004ea2:	0038      	movs	r0, r7
 8004ea4:	f7ff fef0 	bl	8004c88 <_free_r>
 8004ea8:	e7da      	b.n	8004e60 <_realloc_r+0x14>
	...

08004eac <_sbrk_r>:
 8004eac:	2300      	movs	r3, #0
 8004eae:	b570      	push	{r4, r5, r6, lr}
 8004eb0:	4d06      	ldr	r5, [pc, #24]	; (8004ecc <_sbrk_r+0x20>)
 8004eb2:	0004      	movs	r4, r0
 8004eb4:	0008      	movs	r0, r1
 8004eb6:	602b      	str	r3, [r5, #0]
 8004eb8:	f7fc fc0e 	bl	80016d8 <_sbrk>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	d103      	bne.n	8004ec8 <_sbrk_r+0x1c>
 8004ec0:	682b      	ldr	r3, [r5, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d000      	beq.n	8004ec8 <_sbrk_r+0x1c>
 8004ec6:	6023      	str	r3, [r4, #0]
 8004ec8:	bd70      	pop	{r4, r5, r6, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	200004d0 	.word	0x200004d0

08004ed0 <__malloc_lock>:
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	4802      	ldr	r0, [pc, #8]	; (8004edc <__malloc_lock+0xc>)
 8004ed4:	f000 f814 	bl	8004f00 <__retarget_lock_acquire_recursive>
 8004ed8:	bd10      	pop	{r4, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	200004d4 	.word	0x200004d4

08004ee0 <__malloc_unlock>:
 8004ee0:	b510      	push	{r4, lr}
 8004ee2:	4802      	ldr	r0, [pc, #8]	; (8004eec <__malloc_unlock+0xc>)
 8004ee4:	f000 f80d 	bl	8004f02 <__retarget_lock_release_recursive>
 8004ee8:	bd10      	pop	{r4, pc}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	200004d4 	.word	0x200004d4

08004ef0 <_malloc_usable_size_r>:
 8004ef0:	1f0b      	subs	r3, r1, #4
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	1f18      	subs	r0, r3, #4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	da01      	bge.n	8004efe <_malloc_usable_size_r+0xe>
 8004efa:	580b      	ldr	r3, [r1, r0]
 8004efc:	18c0      	adds	r0, r0, r3
 8004efe:	4770      	bx	lr

08004f00 <__retarget_lock_acquire_recursive>:
 8004f00:	4770      	bx	lr

08004f02 <__retarget_lock_release_recursive>:
 8004f02:	4770      	bx	lr

08004f04 <_init>:
 8004f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0a:	bc08      	pop	{r3}
 8004f0c:	469e      	mov	lr, r3
 8004f0e:	4770      	bx	lr

08004f10 <_fini>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f16:	bc08      	pop	{r3}
 8004f18:	469e      	mov	lr, r3
 8004f1a:	4770      	bx	lr
