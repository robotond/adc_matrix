
adc_matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  080061ac  080061ac  000161ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064cc  080064cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080064cc  080064cc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064cc  080064cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064cc  080064cc  000164cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064d0  080064d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080064d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000070  08006544  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08006544  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da3d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ac  00000000  00000000  0002dad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002fb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  00030658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c58  00000000  00000000  00031060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d898  00000000  00000000  00047cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f5b1  00000000  00000000  00055550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4b01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f8  00000000  00000000  000e4b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006194 	.word	0x08006194

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08006194 	.word	0x08006194

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cdrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0010      	movs	r0, r2
 80003f0:	4662      	mov	r2, ip
 80003f2:	468c      	mov	ip, r1
 80003f4:	0019      	movs	r1, r3
 80003f6:	4663      	mov	r3, ip
 80003f8:	e000      	b.n	80003fc <__aeabi_cdcmpeq>
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__aeabi_cdcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 ff0d 	bl	800121c <__ledf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cdcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_dcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fe5d 	bl	80010cc <__eqdf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_dcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 feff 	bl	800121c <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_dcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_dcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fef5 	bl	800121c <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_dcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fe85 	bl	8001150 <__gedf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_dcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fe7b 	bl	8001150 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_dcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dadd>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	464f      	mov	r7, r9
 800046c:	4646      	mov	r6, r8
 800046e:	46d6      	mov	lr, sl
 8000470:	000d      	movs	r5, r1
 8000472:	0004      	movs	r4, r0
 8000474:	b5c0      	push	{r6, r7, lr}
 8000476:	001f      	movs	r7, r3
 8000478:	0011      	movs	r1, r2
 800047a:	0328      	lsls	r0, r5, #12
 800047c:	0f62      	lsrs	r2, r4, #29
 800047e:	0a40      	lsrs	r0, r0, #9
 8000480:	4310      	orrs	r0, r2
 8000482:	007a      	lsls	r2, r7, #1
 8000484:	0d52      	lsrs	r2, r2, #21
 8000486:	00e3      	lsls	r3, r4, #3
 8000488:	033c      	lsls	r4, r7, #12
 800048a:	4691      	mov	r9, r2
 800048c:	0a64      	lsrs	r4, r4, #9
 800048e:	0ffa      	lsrs	r2, r7, #31
 8000490:	0f4f      	lsrs	r7, r1, #29
 8000492:	006e      	lsls	r6, r5, #1
 8000494:	4327      	orrs	r7, r4
 8000496:	4692      	mov	sl, r2
 8000498:	46b8      	mov	r8, r7
 800049a:	0d76      	lsrs	r6, r6, #21
 800049c:	0fed      	lsrs	r5, r5, #31
 800049e:	00c9      	lsls	r1, r1, #3
 80004a0:	4295      	cmp	r5, r2
 80004a2:	d100      	bne.n	80004a6 <__aeabi_dadd+0x3e>
 80004a4:	e099      	b.n	80005da <__aeabi_dadd+0x172>
 80004a6:	464c      	mov	r4, r9
 80004a8:	1b34      	subs	r4, r6, r4
 80004aa:	46a4      	mov	ip, r4
 80004ac:	2c00      	cmp	r4, #0
 80004ae:	dc00      	bgt.n	80004b2 <__aeabi_dadd+0x4a>
 80004b0:	e07c      	b.n	80005ac <__aeabi_dadd+0x144>
 80004b2:	464a      	mov	r2, r9
 80004b4:	2a00      	cmp	r2, #0
 80004b6:	d100      	bne.n	80004ba <__aeabi_dadd+0x52>
 80004b8:	e0b8      	b.n	800062c <__aeabi_dadd+0x1c4>
 80004ba:	4ac5      	ldr	r2, [pc, #788]	; (80007d0 <__aeabi_dadd+0x368>)
 80004bc:	4296      	cmp	r6, r2
 80004be:	d100      	bne.n	80004c2 <__aeabi_dadd+0x5a>
 80004c0:	e11c      	b.n	80006fc <__aeabi_dadd+0x294>
 80004c2:	2280      	movs	r2, #128	; 0x80
 80004c4:	003c      	movs	r4, r7
 80004c6:	0412      	lsls	r2, r2, #16
 80004c8:	4314      	orrs	r4, r2
 80004ca:	46a0      	mov	r8, r4
 80004cc:	4662      	mov	r2, ip
 80004ce:	2a38      	cmp	r2, #56	; 0x38
 80004d0:	dd00      	ble.n	80004d4 <__aeabi_dadd+0x6c>
 80004d2:	e161      	b.n	8000798 <__aeabi_dadd+0x330>
 80004d4:	2a1f      	cmp	r2, #31
 80004d6:	dd00      	ble.n	80004da <__aeabi_dadd+0x72>
 80004d8:	e1cc      	b.n	8000874 <__aeabi_dadd+0x40c>
 80004da:	4664      	mov	r4, ip
 80004dc:	2220      	movs	r2, #32
 80004de:	1b12      	subs	r2, r2, r4
 80004e0:	4644      	mov	r4, r8
 80004e2:	4094      	lsls	r4, r2
 80004e4:	000f      	movs	r7, r1
 80004e6:	46a1      	mov	r9, r4
 80004e8:	4664      	mov	r4, ip
 80004ea:	4091      	lsls	r1, r2
 80004ec:	40e7      	lsrs	r7, r4
 80004ee:	464c      	mov	r4, r9
 80004f0:	1e4a      	subs	r2, r1, #1
 80004f2:	4191      	sbcs	r1, r2
 80004f4:	433c      	orrs	r4, r7
 80004f6:	4642      	mov	r2, r8
 80004f8:	4321      	orrs	r1, r4
 80004fa:	4664      	mov	r4, ip
 80004fc:	40e2      	lsrs	r2, r4
 80004fe:	1a80      	subs	r0, r0, r2
 8000500:	1a5c      	subs	r4, r3, r1
 8000502:	42a3      	cmp	r3, r4
 8000504:	419b      	sbcs	r3, r3
 8000506:	425f      	negs	r7, r3
 8000508:	1bc7      	subs	r7, r0, r7
 800050a:	023b      	lsls	r3, r7, #8
 800050c:	d400      	bmi.n	8000510 <__aeabi_dadd+0xa8>
 800050e:	e0d0      	b.n	80006b2 <__aeabi_dadd+0x24a>
 8000510:	027f      	lsls	r7, r7, #9
 8000512:	0a7f      	lsrs	r7, r7, #9
 8000514:	2f00      	cmp	r7, #0
 8000516:	d100      	bne.n	800051a <__aeabi_dadd+0xb2>
 8000518:	e0ff      	b.n	800071a <__aeabi_dadd+0x2b2>
 800051a:	0038      	movs	r0, r7
 800051c:	f001 fd64 	bl	8001fe8 <__clzsi2>
 8000520:	0001      	movs	r1, r0
 8000522:	3908      	subs	r1, #8
 8000524:	2320      	movs	r3, #32
 8000526:	0022      	movs	r2, r4
 8000528:	1a5b      	subs	r3, r3, r1
 800052a:	408f      	lsls	r7, r1
 800052c:	40da      	lsrs	r2, r3
 800052e:	408c      	lsls	r4, r1
 8000530:	4317      	orrs	r7, r2
 8000532:	42b1      	cmp	r1, r6
 8000534:	da00      	bge.n	8000538 <__aeabi_dadd+0xd0>
 8000536:	e0ff      	b.n	8000738 <__aeabi_dadd+0x2d0>
 8000538:	1b89      	subs	r1, r1, r6
 800053a:	1c4b      	adds	r3, r1, #1
 800053c:	2b1f      	cmp	r3, #31
 800053e:	dd00      	ble.n	8000542 <__aeabi_dadd+0xda>
 8000540:	e0a8      	b.n	8000694 <__aeabi_dadd+0x22c>
 8000542:	2220      	movs	r2, #32
 8000544:	0039      	movs	r1, r7
 8000546:	1ad2      	subs	r2, r2, r3
 8000548:	0020      	movs	r0, r4
 800054a:	4094      	lsls	r4, r2
 800054c:	4091      	lsls	r1, r2
 800054e:	40d8      	lsrs	r0, r3
 8000550:	1e62      	subs	r2, r4, #1
 8000552:	4194      	sbcs	r4, r2
 8000554:	40df      	lsrs	r7, r3
 8000556:	2600      	movs	r6, #0
 8000558:	4301      	orrs	r1, r0
 800055a:	430c      	orrs	r4, r1
 800055c:	0763      	lsls	r3, r4, #29
 800055e:	d009      	beq.n	8000574 <__aeabi_dadd+0x10c>
 8000560:	230f      	movs	r3, #15
 8000562:	4023      	ands	r3, r4
 8000564:	2b04      	cmp	r3, #4
 8000566:	d005      	beq.n	8000574 <__aeabi_dadd+0x10c>
 8000568:	1d23      	adds	r3, r4, #4
 800056a:	42a3      	cmp	r3, r4
 800056c:	41a4      	sbcs	r4, r4
 800056e:	4264      	negs	r4, r4
 8000570:	193f      	adds	r7, r7, r4
 8000572:	001c      	movs	r4, r3
 8000574:	023b      	lsls	r3, r7, #8
 8000576:	d400      	bmi.n	800057a <__aeabi_dadd+0x112>
 8000578:	e09e      	b.n	80006b8 <__aeabi_dadd+0x250>
 800057a:	4b95      	ldr	r3, [pc, #596]	; (80007d0 <__aeabi_dadd+0x368>)
 800057c:	3601      	adds	r6, #1
 800057e:	429e      	cmp	r6, r3
 8000580:	d100      	bne.n	8000584 <__aeabi_dadd+0x11c>
 8000582:	e0b7      	b.n	80006f4 <__aeabi_dadd+0x28c>
 8000584:	4a93      	ldr	r2, [pc, #588]	; (80007d4 <__aeabi_dadd+0x36c>)
 8000586:	08e4      	lsrs	r4, r4, #3
 8000588:	4017      	ands	r7, r2
 800058a:	077b      	lsls	r3, r7, #29
 800058c:	0571      	lsls	r1, r6, #21
 800058e:	027f      	lsls	r7, r7, #9
 8000590:	4323      	orrs	r3, r4
 8000592:	0b3f      	lsrs	r7, r7, #12
 8000594:	0d4a      	lsrs	r2, r1, #21
 8000596:	0512      	lsls	r2, r2, #20
 8000598:	433a      	orrs	r2, r7
 800059a:	07ed      	lsls	r5, r5, #31
 800059c:	432a      	orrs	r2, r5
 800059e:	0018      	movs	r0, r3
 80005a0:	0011      	movs	r1, r2
 80005a2:	bce0      	pop	{r5, r6, r7}
 80005a4:	46ba      	mov	sl, r7
 80005a6:	46b1      	mov	r9, r6
 80005a8:	46a8      	mov	r8, r5
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ac:	2c00      	cmp	r4, #0
 80005ae:	d04b      	beq.n	8000648 <__aeabi_dadd+0x1e0>
 80005b0:	464c      	mov	r4, r9
 80005b2:	1ba4      	subs	r4, r4, r6
 80005b4:	46a4      	mov	ip, r4
 80005b6:	2e00      	cmp	r6, #0
 80005b8:	d000      	beq.n	80005bc <__aeabi_dadd+0x154>
 80005ba:	e123      	b.n	8000804 <__aeabi_dadd+0x39c>
 80005bc:	0004      	movs	r4, r0
 80005be:	431c      	orrs	r4, r3
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x15c>
 80005c2:	e1af      	b.n	8000924 <__aeabi_dadd+0x4bc>
 80005c4:	4662      	mov	r2, ip
 80005c6:	1e54      	subs	r4, r2, #1
 80005c8:	2a01      	cmp	r2, #1
 80005ca:	d100      	bne.n	80005ce <__aeabi_dadd+0x166>
 80005cc:	e215      	b.n	80009fa <__aeabi_dadd+0x592>
 80005ce:	4d80      	ldr	r5, [pc, #512]	; (80007d0 <__aeabi_dadd+0x368>)
 80005d0:	45ac      	cmp	ip, r5
 80005d2:	d100      	bne.n	80005d6 <__aeabi_dadd+0x16e>
 80005d4:	e1c8      	b.n	8000968 <__aeabi_dadd+0x500>
 80005d6:	46a4      	mov	ip, r4
 80005d8:	e11b      	b.n	8000812 <__aeabi_dadd+0x3aa>
 80005da:	464a      	mov	r2, r9
 80005dc:	1ab2      	subs	r2, r6, r2
 80005de:	4694      	mov	ip, r2
 80005e0:	2a00      	cmp	r2, #0
 80005e2:	dc00      	bgt.n	80005e6 <__aeabi_dadd+0x17e>
 80005e4:	e0ac      	b.n	8000740 <__aeabi_dadd+0x2d8>
 80005e6:	464a      	mov	r2, r9
 80005e8:	2a00      	cmp	r2, #0
 80005ea:	d043      	beq.n	8000674 <__aeabi_dadd+0x20c>
 80005ec:	4a78      	ldr	r2, [pc, #480]	; (80007d0 <__aeabi_dadd+0x368>)
 80005ee:	4296      	cmp	r6, r2
 80005f0:	d100      	bne.n	80005f4 <__aeabi_dadd+0x18c>
 80005f2:	e1af      	b.n	8000954 <__aeabi_dadd+0x4ec>
 80005f4:	2280      	movs	r2, #128	; 0x80
 80005f6:	003c      	movs	r4, r7
 80005f8:	0412      	lsls	r2, r2, #16
 80005fa:	4314      	orrs	r4, r2
 80005fc:	46a0      	mov	r8, r4
 80005fe:	4662      	mov	r2, ip
 8000600:	2a38      	cmp	r2, #56	; 0x38
 8000602:	dc67      	bgt.n	80006d4 <__aeabi_dadd+0x26c>
 8000604:	2a1f      	cmp	r2, #31
 8000606:	dc00      	bgt.n	800060a <__aeabi_dadd+0x1a2>
 8000608:	e15f      	b.n	80008ca <__aeabi_dadd+0x462>
 800060a:	4647      	mov	r7, r8
 800060c:	3a20      	subs	r2, #32
 800060e:	40d7      	lsrs	r7, r2
 8000610:	4662      	mov	r2, ip
 8000612:	2a20      	cmp	r2, #32
 8000614:	d005      	beq.n	8000622 <__aeabi_dadd+0x1ba>
 8000616:	4664      	mov	r4, ip
 8000618:	2240      	movs	r2, #64	; 0x40
 800061a:	1b12      	subs	r2, r2, r4
 800061c:	4644      	mov	r4, r8
 800061e:	4094      	lsls	r4, r2
 8000620:	4321      	orrs	r1, r4
 8000622:	1e4a      	subs	r2, r1, #1
 8000624:	4191      	sbcs	r1, r2
 8000626:	000c      	movs	r4, r1
 8000628:	433c      	orrs	r4, r7
 800062a:	e057      	b.n	80006dc <__aeabi_dadd+0x274>
 800062c:	003a      	movs	r2, r7
 800062e:	430a      	orrs	r2, r1
 8000630:	d100      	bne.n	8000634 <__aeabi_dadd+0x1cc>
 8000632:	e105      	b.n	8000840 <__aeabi_dadd+0x3d8>
 8000634:	0022      	movs	r2, r4
 8000636:	3a01      	subs	r2, #1
 8000638:	2c01      	cmp	r4, #1
 800063a:	d100      	bne.n	800063e <__aeabi_dadd+0x1d6>
 800063c:	e182      	b.n	8000944 <__aeabi_dadd+0x4dc>
 800063e:	4c64      	ldr	r4, [pc, #400]	; (80007d0 <__aeabi_dadd+0x368>)
 8000640:	45a4      	cmp	ip, r4
 8000642:	d05b      	beq.n	80006fc <__aeabi_dadd+0x294>
 8000644:	4694      	mov	ip, r2
 8000646:	e741      	b.n	80004cc <__aeabi_dadd+0x64>
 8000648:	4c63      	ldr	r4, [pc, #396]	; (80007d8 <__aeabi_dadd+0x370>)
 800064a:	1c77      	adds	r7, r6, #1
 800064c:	4227      	tst	r7, r4
 800064e:	d000      	beq.n	8000652 <__aeabi_dadd+0x1ea>
 8000650:	e0c4      	b.n	80007dc <__aeabi_dadd+0x374>
 8000652:	0004      	movs	r4, r0
 8000654:	431c      	orrs	r4, r3
 8000656:	2e00      	cmp	r6, #0
 8000658:	d000      	beq.n	800065c <__aeabi_dadd+0x1f4>
 800065a:	e169      	b.n	8000930 <__aeabi_dadd+0x4c8>
 800065c:	2c00      	cmp	r4, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_dadd+0x1fa>
 8000660:	e1bf      	b.n	80009e2 <__aeabi_dadd+0x57a>
 8000662:	4644      	mov	r4, r8
 8000664:	430c      	orrs	r4, r1
 8000666:	d000      	beq.n	800066a <__aeabi_dadd+0x202>
 8000668:	e1d0      	b.n	8000a0c <__aeabi_dadd+0x5a4>
 800066a:	0742      	lsls	r2, r0, #29
 800066c:	08db      	lsrs	r3, r3, #3
 800066e:	4313      	orrs	r3, r2
 8000670:	08c0      	lsrs	r0, r0, #3
 8000672:	e029      	b.n	80006c8 <__aeabi_dadd+0x260>
 8000674:	003a      	movs	r2, r7
 8000676:	430a      	orrs	r2, r1
 8000678:	d100      	bne.n	800067c <__aeabi_dadd+0x214>
 800067a:	e170      	b.n	800095e <__aeabi_dadd+0x4f6>
 800067c:	4662      	mov	r2, ip
 800067e:	4664      	mov	r4, ip
 8000680:	3a01      	subs	r2, #1
 8000682:	2c01      	cmp	r4, #1
 8000684:	d100      	bne.n	8000688 <__aeabi_dadd+0x220>
 8000686:	e0e0      	b.n	800084a <__aeabi_dadd+0x3e2>
 8000688:	4c51      	ldr	r4, [pc, #324]	; (80007d0 <__aeabi_dadd+0x368>)
 800068a:	45a4      	cmp	ip, r4
 800068c:	d100      	bne.n	8000690 <__aeabi_dadd+0x228>
 800068e:	e161      	b.n	8000954 <__aeabi_dadd+0x4ec>
 8000690:	4694      	mov	ip, r2
 8000692:	e7b4      	b.n	80005fe <__aeabi_dadd+0x196>
 8000694:	003a      	movs	r2, r7
 8000696:	391f      	subs	r1, #31
 8000698:	40ca      	lsrs	r2, r1
 800069a:	0011      	movs	r1, r2
 800069c:	2b20      	cmp	r3, #32
 800069e:	d003      	beq.n	80006a8 <__aeabi_dadd+0x240>
 80006a0:	2240      	movs	r2, #64	; 0x40
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	409f      	lsls	r7, r3
 80006a6:	433c      	orrs	r4, r7
 80006a8:	1e63      	subs	r3, r4, #1
 80006aa:	419c      	sbcs	r4, r3
 80006ac:	2700      	movs	r7, #0
 80006ae:	2600      	movs	r6, #0
 80006b0:	430c      	orrs	r4, r1
 80006b2:	0763      	lsls	r3, r4, #29
 80006b4:	d000      	beq.n	80006b8 <__aeabi_dadd+0x250>
 80006b6:	e753      	b.n	8000560 <__aeabi_dadd+0xf8>
 80006b8:	46b4      	mov	ip, r6
 80006ba:	08e4      	lsrs	r4, r4, #3
 80006bc:	077b      	lsls	r3, r7, #29
 80006be:	4323      	orrs	r3, r4
 80006c0:	08f8      	lsrs	r0, r7, #3
 80006c2:	4a43      	ldr	r2, [pc, #268]	; (80007d0 <__aeabi_dadd+0x368>)
 80006c4:	4594      	cmp	ip, r2
 80006c6:	d01d      	beq.n	8000704 <__aeabi_dadd+0x29c>
 80006c8:	4662      	mov	r2, ip
 80006ca:	0307      	lsls	r7, r0, #12
 80006cc:	0552      	lsls	r2, r2, #21
 80006ce:	0b3f      	lsrs	r7, r7, #12
 80006d0:	0d52      	lsrs	r2, r2, #21
 80006d2:	e760      	b.n	8000596 <__aeabi_dadd+0x12e>
 80006d4:	4644      	mov	r4, r8
 80006d6:	430c      	orrs	r4, r1
 80006d8:	1e62      	subs	r2, r4, #1
 80006da:	4194      	sbcs	r4, r2
 80006dc:	18e4      	adds	r4, r4, r3
 80006de:	429c      	cmp	r4, r3
 80006e0:	419b      	sbcs	r3, r3
 80006e2:	425f      	negs	r7, r3
 80006e4:	183f      	adds	r7, r7, r0
 80006e6:	023b      	lsls	r3, r7, #8
 80006e8:	d5e3      	bpl.n	80006b2 <__aeabi_dadd+0x24a>
 80006ea:	4b39      	ldr	r3, [pc, #228]	; (80007d0 <__aeabi_dadd+0x368>)
 80006ec:	3601      	adds	r6, #1
 80006ee:	429e      	cmp	r6, r3
 80006f0:	d000      	beq.n	80006f4 <__aeabi_dadd+0x28c>
 80006f2:	e0b5      	b.n	8000860 <__aeabi_dadd+0x3f8>
 80006f4:	0032      	movs	r2, r6
 80006f6:	2700      	movs	r7, #0
 80006f8:	2300      	movs	r3, #0
 80006fa:	e74c      	b.n	8000596 <__aeabi_dadd+0x12e>
 80006fc:	0742      	lsls	r2, r0, #29
 80006fe:	08db      	lsrs	r3, r3, #3
 8000700:	4313      	orrs	r3, r2
 8000702:	08c0      	lsrs	r0, r0, #3
 8000704:	001a      	movs	r2, r3
 8000706:	4302      	orrs	r2, r0
 8000708:	d100      	bne.n	800070c <__aeabi_dadd+0x2a4>
 800070a:	e1e1      	b.n	8000ad0 <__aeabi_dadd+0x668>
 800070c:	2780      	movs	r7, #128	; 0x80
 800070e:	033f      	lsls	r7, r7, #12
 8000710:	4307      	orrs	r7, r0
 8000712:	033f      	lsls	r7, r7, #12
 8000714:	4a2e      	ldr	r2, [pc, #184]	; (80007d0 <__aeabi_dadd+0x368>)
 8000716:	0b3f      	lsrs	r7, r7, #12
 8000718:	e73d      	b.n	8000596 <__aeabi_dadd+0x12e>
 800071a:	0020      	movs	r0, r4
 800071c:	f001 fc64 	bl	8001fe8 <__clzsi2>
 8000720:	0001      	movs	r1, r0
 8000722:	3118      	adds	r1, #24
 8000724:	291f      	cmp	r1, #31
 8000726:	dc00      	bgt.n	800072a <__aeabi_dadd+0x2c2>
 8000728:	e6fc      	b.n	8000524 <__aeabi_dadd+0xbc>
 800072a:	3808      	subs	r0, #8
 800072c:	4084      	lsls	r4, r0
 800072e:	0027      	movs	r7, r4
 8000730:	2400      	movs	r4, #0
 8000732:	42b1      	cmp	r1, r6
 8000734:	db00      	blt.n	8000738 <__aeabi_dadd+0x2d0>
 8000736:	e6ff      	b.n	8000538 <__aeabi_dadd+0xd0>
 8000738:	4a26      	ldr	r2, [pc, #152]	; (80007d4 <__aeabi_dadd+0x36c>)
 800073a:	1a76      	subs	r6, r6, r1
 800073c:	4017      	ands	r7, r2
 800073e:	e70d      	b.n	800055c <__aeabi_dadd+0xf4>
 8000740:	2a00      	cmp	r2, #0
 8000742:	d02f      	beq.n	80007a4 <__aeabi_dadd+0x33c>
 8000744:	464a      	mov	r2, r9
 8000746:	1b92      	subs	r2, r2, r6
 8000748:	4694      	mov	ip, r2
 800074a:	2e00      	cmp	r6, #0
 800074c:	d100      	bne.n	8000750 <__aeabi_dadd+0x2e8>
 800074e:	e0ad      	b.n	80008ac <__aeabi_dadd+0x444>
 8000750:	4a1f      	ldr	r2, [pc, #124]	; (80007d0 <__aeabi_dadd+0x368>)
 8000752:	4591      	cmp	r9, r2
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x2f0>
 8000756:	e10f      	b.n	8000978 <__aeabi_dadd+0x510>
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0412      	lsls	r2, r2, #16
 800075c:	4310      	orrs	r0, r2
 800075e:	4662      	mov	r2, ip
 8000760:	2a38      	cmp	r2, #56	; 0x38
 8000762:	dd00      	ble.n	8000766 <__aeabi_dadd+0x2fe>
 8000764:	e10f      	b.n	8000986 <__aeabi_dadd+0x51e>
 8000766:	2a1f      	cmp	r2, #31
 8000768:	dd00      	ble.n	800076c <__aeabi_dadd+0x304>
 800076a:	e180      	b.n	8000a6e <__aeabi_dadd+0x606>
 800076c:	4664      	mov	r4, ip
 800076e:	2220      	movs	r2, #32
 8000770:	001e      	movs	r6, r3
 8000772:	1b12      	subs	r2, r2, r4
 8000774:	4667      	mov	r7, ip
 8000776:	0004      	movs	r4, r0
 8000778:	4093      	lsls	r3, r2
 800077a:	4094      	lsls	r4, r2
 800077c:	40fe      	lsrs	r6, r7
 800077e:	1e5a      	subs	r2, r3, #1
 8000780:	4193      	sbcs	r3, r2
 8000782:	40f8      	lsrs	r0, r7
 8000784:	4334      	orrs	r4, r6
 8000786:	431c      	orrs	r4, r3
 8000788:	4480      	add	r8, r0
 800078a:	1864      	adds	r4, r4, r1
 800078c:	428c      	cmp	r4, r1
 800078e:	41bf      	sbcs	r7, r7
 8000790:	427f      	negs	r7, r7
 8000792:	464e      	mov	r6, r9
 8000794:	4447      	add	r7, r8
 8000796:	e7a6      	b.n	80006e6 <__aeabi_dadd+0x27e>
 8000798:	4642      	mov	r2, r8
 800079a:	430a      	orrs	r2, r1
 800079c:	0011      	movs	r1, r2
 800079e:	1e4a      	subs	r2, r1, #1
 80007a0:	4191      	sbcs	r1, r2
 80007a2:	e6ad      	b.n	8000500 <__aeabi_dadd+0x98>
 80007a4:	4c0c      	ldr	r4, [pc, #48]	; (80007d8 <__aeabi_dadd+0x370>)
 80007a6:	1c72      	adds	r2, r6, #1
 80007a8:	4222      	tst	r2, r4
 80007aa:	d000      	beq.n	80007ae <__aeabi_dadd+0x346>
 80007ac:	e0a1      	b.n	80008f2 <__aeabi_dadd+0x48a>
 80007ae:	0002      	movs	r2, r0
 80007b0:	431a      	orrs	r2, r3
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d000      	beq.n	80007b8 <__aeabi_dadd+0x350>
 80007b6:	e0fa      	b.n	80009ae <__aeabi_dadd+0x546>
 80007b8:	2a00      	cmp	r2, #0
 80007ba:	d100      	bne.n	80007be <__aeabi_dadd+0x356>
 80007bc:	e145      	b.n	8000a4a <__aeabi_dadd+0x5e2>
 80007be:	003a      	movs	r2, r7
 80007c0:	430a      	orrs	r2, r1
 80007c2:	d000      	beq.n	80007c6 <__aeabi_dadd+0x35e>
 80007c4:	e146      	b.n	8000a54 <__aeabi_dadd+0x5ec>
 80007c6:	0742      	lsls	r2, r0, #29
 80007c8:	08db      	lsrs	r3, r3, #3
 80007ca:	4313      	orrs	r3, r2
 80007cc:	08c0      	lsrs	r0, r0, #3
 80007ce:	e77b      	b.n	80006c8 <__aeabi_dadd+0x260>
 80007d0:	000007ff 	.word	0x000007ff
 80007d4:	ff7fffff 	.word	0xff7fffff
 80007d8:	000007fe 	.word	0x000007fe
 80007dc:	4647      	mov	r7, r8
 80007de:	1a5c      	subs	r4, r3, r1
 80007e0:	1bc2      	subs	r2, r0, r7
 80007e2:	42a3      	cmp	r3, r4
 80007e4:	41bf      	sbcs	r7, r7
 80007e6:	427f      	negs	r7, r7
 80007e8:	46b9      	mov	r9, r7
 80007ea:	0017      	movs	r7, r2
 80007ec:	464a      	mov	r2, r9
 80007ee:	1abf      	subs	r7, r7, r2
 80007f0:	023a      	lsls	r2, r7, #8
 80007f2:	d500      	bpl.n	80007f6 <__aeabi_dadd+0x38e>
 80007f4:	e08d      	b.n	8000912 <__aeabi_dadd+0x4aa>
 80007f6:	0023      	movs	r3, r4
 80007f8:	433b      	orrs	r3, r7
 80007fa:	d000      	beq.n	80007fe <__aeabi_dadd+0x396>
 80007fc:	e68a      	b.n	8000514 <__aeabi_dadd+0xac>
 80007fe:	2000      	movs	r0, #0
 8000800:	2500      	movs	r5, #0
 8000802:	e761      	b.n	80006c8 <__aeabi_dadd+0x260>
 8000804:	4cb4      	ldr	r4, [pc, #720]	; (8000ad8 <__aeabi_dadd+0x670>)
 8000806:	45a1      	cmp	r9, r4
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0x3a4>
 800080a:	e0ad      	b.n	8000968 <__aeabi_dadd+0x500>
 800080c:	2480      	movs	r4, #128	; 0x80
 800080e:	0424      	lsls	r4, r4, #16
 8000810:	4320      	orrs	r0, r4
 8000812:	4664      	mov	r4, ip
 8000814:	2c38      	cmp	r4, #56	; 0x38
 8000816:	dc3d      	bgt.n	8000894 <__aeabi_dadd+0x42c>
 8000818:	4662      	mov	r2, ip
 800081a:	2c1f      	cmp	r4, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x3b8>
 800081e:	e0b7      	b.n	8000990 <__aeabi_dadd+0x528>
 8000820:	2520      	movs	r5, #32
 8000822:	001e      	movs	r6, r3
 8000824:	1b2d      	subs	r5, r5, r4
 8000826:	0004      	movs	r4, r0
 8000828:	40ab      	lsls	r3, r5
 800082a:	40ac      	lsls	r4, r5
 800082c:	40d6      	lsrs	r6, r2
 800082e:	40d0      	lsrs	r0, r2
 8000830:	4642      	mov	r2, r8
 8000832:	1e5d      	subs	r5, r3, #1
 8000834:	41ab      	sbcs	r3, r5
 8000836:	4334      	orrs	r4, r6
 8000838:	1a12      	subs	r2, r2, r0
 800083a:	4690      	mov	r8, r2
 800083c:	4323      	orrs	r3, r4
 800083e:	e02c      	b.n	800089a <__aeabi_dadd+0x432>
 8000840:	0742      	lsls	r2, r0, #29
 8000842:	08db      	lsrs	r3, r3, #3
 8000844:	4313      	orrs	r3, r2
 8000846:	08c0      	lsrs	r0, r0, #3
 8000848:	e73b      	b.n	80006c2 <__aeabi_dadd+0x25a>
 800084a:	185c      	adds	r4, r3, r1
 800084c:	429c      	cmp	r4, r3
 800084e:	419b      	sbcs	r3, r3
 8000850:	4440      	add	r0, r8
 8000852:	425b      	negs	r3, r3
 8000854:	18c7      	adds	r7, r0, r3
 8000856:	2601      	movs	r6, #1
 8000858:	023b      	lsls	r3, r7, #8
 800085a:	d400      	bmi.n	800085e <__aeabi_dadd+0x3f6>
 800085c:	e729      	b.n	80006b2 <__aeabi_dadd+0x24a>
 800085e:	2602      	movs	r6, #2
 8000860:	4a9e      	ldr	r2, [pc, #632]	; (8000adc <__aeabi_dadd+0x674>)
 8000862:	0863      	lsrs	r3, r4, #1
 8000864:	4017      	ands	r7, r2
 8000866:	2201      	movs	r2, #1
 8000868:	4014      	ands	r4, r2
 800086a:	431c      	orrs	r4, r3
 800086c:	07fb      	lsls	r3, r7, #31
 800086e:	431c      	orrs	r4, r3
 8000870:	087f      	lsrs	r7, r7, #1
 8000872:	e673      	b.n	800055c <__aeabi_dadd+0xf4>
 8000874:	4644      	mov	r4, r8
 8000876:	3a20      	subs	r2, #32
 8000878:	40d4      	lsrs	r4, r2
 800087a:	4662      	mov	r2, ip
 800087c:	2a20      	cmp	r2, #32
 800087e:	d005      	beq.n	800088c <__aeabi_dadd+0x424>
 8000880:	4667      	mov	r7, ip
 8000882:	2240      	movs	r2, #64	; 0x40
 8000884:	1bd2      	subs	r2, r2, r7
 8000886:	4647      	mov	r7, r8
 8000888:	4097      	lsls	r7, r2
 800088a:	4339      	orrs	r1, r7
 800088c:	1e4a      	subs	r2, r1, #1
 800088e:	4191      	sbcs	r1, r2
 8000890:	4321      	orrs	r1, r4
 8000892:	e635      	b.n	8000500 <__aeabi_dadd+0x98>
 8000894:	4303      	orrs	r3, r0
 8000896:	1e58      	subs	r0, r3, #1
 8000898:	4183      	sbcs	r3, r0
 800089a:	1acc      	subs	r4, r1, r3
 800089c:	42a1      	cmp	r1, r4
 800089e:	41bf      	sbcs	r7, r7
 80008a0:	4643      	mov	r3, r8
 80008a2:	427f      	negs	r7, r7
 80008a4:	4655      	mov	r5, sl
 80008a6:	464e      	mov	r6, r9
 80008a8:	1bdf      	subs	r7, r3, r7
 80008aa:	e62e      	b.n	800050a <__aeabi_dadd+0xa2>
 80008ac:	0002      	movs	r2, r0
 80008ae:	431a      	orrs	r2, r3
 80008b0:	d100      	bne.n	80008b4 <__aeabi_dadd+0x44c>
 80008b2:	e0bd      	b.n	8000a30 <__aeabi_dadd+0x5c8>
 80008b4:	4662      	mov	r2, ip
 80008b6:	4664      	mov	r4, ip
 80008b8:	3a01      	subs	r2, #1
 80008ba:	2c01      	cmp	r4, #1
 80008bc:	d100      	bne.n	80008c0 <__aeabi_dadd+0x458>
 80008be:	e0e5      	b.n	8000a8c <__aeabi_dadd+0x624>
 80008c0:	4c85      	ldr	r4, [pc, #532]	; (8000ad8 <__aeabi_dadd+0x670>)
 80008c2:	45a4      	cmp	ip, r4
 80008c4:	d058      	beq.n	8000978 <__aeabi_dadd+0x510>
 80008c6:	4694      	mov	ip, r2
 80008c8:	e749      	b.n	800075e <__aeabi_dadd+0x2f6>
 80008ca:	4664      	mov	r4, ip
 80008cc:	2220      	movs	r2, #32
 80008ce:	1b12      	subs	r2, r2, r4
 80008d0:	4644      	mov	r4, r8
 80008d2:	4094      	lsls	r4, r2
 80008d4:	000f      	movs	r7, r1
 80008d6:	46a1      	mov	r9, r4
 80008d8:	4664      	mov	r4, ip
 80008da:	4091      	lsls	r1, r2
 80008dc:	40e7      	lsrs	r7, r4
 80008de:	464c      	mov	r4, r9
 80008e0:	1e4a      	subs	r2, r1, #1
 80008e2:	4191      	sbcs	r1, r2
 80008e4:	433c      	orrs	r4, r7
 80008e6:	4642      	mov	r2, r8
 80008e8:	430c      	orrs	r4, r1
 80008ea:	4661      	mov	r1, ip
 80008ec:	40ca      	lsrs	r2, r1
 80008ee:	1880      	adds	r0, r0, r2
 80008f0:	e6f4      	b.n	80006dc <__aeabi_dadd+0x274>
 80008f2:	4c79      	ldr	r4, [pc, #484]	; (8000ad8 <__aeabi_dadd+0x670>)
 80008f4:	42a2      	cmp	r2, r4
 80008f6:	d100      	bne.n	80008fa <__aeabi_dadd+0x492>
 80008f8:	e6fd      	b.n	80006f6 <__aeabi_dadd+0x28e>
 80008fa:	1859      	adds	r1, r3, r1
 80008fc:	4299      	cmp	r1, r3
 80008fe:	419b      	sbcs	r3, r3
 8000900:	4440      	add	r0, r8
 8000902:	425f      	negs	r7, r3
 8000904:	19c7      	adds	r7, r0, r7
 8000906:	07fc      	lsls	r4, r7, #31
 8000908:	0849      	lsrs	r1, r1, #1
 800090a:	0016      	movs	r6, r2
 800090c:	430c      	orrs	r4, r1
 800090e:	087f      	lsrs	r7, r7, #1
 8000910:	e6cf      	b.n	80006b2 <__aeabi_dadd+0x24a>
 8000912:	1acc      	subs	r4, r1, r3
 8000914:	42a1      	cmp	r1, r4
 8000916:	41bf      	sbcs	r7, r7
 8000918:	4643      	mov	r3, r8
 800091a:	427f      	negs	r7, r7
 800091c:	1a18      	subs	r0, r3, r0
 800091e:	4655      	mov	r5, sl
 8000920:	1bc7      	subs	r7, r0, r7
 8000922:	e5f7      	b.n	8000514 <__aeabi_dadd+0xac>
 8000924:	08c9      	lsrs	r1, r1, #3
 8000926:	077b      	lsls	r3, r7, #29
 8000928:	4655      	mov	r5, sl
 800092a:	430b      	orrs	r3, r1
 800092c:	08f8      	lsrs	r0, r7, #3
 800092e:	e6c8      	b.n	80006c2 <__aeabi_dadd+0x25a>
 8000930:	2c00      	cmp	r4, #0
 8000932:	d000      	beq.n	8000936 <__aeabi_dadd+0x4ce>
 8000934:	e081      	b.n	8000a3a <__aeabi_dadd+0x5d2>
 8000936:	4643      	mov	r3, r8
 8000938:	430b      	orrs	r3, r1
 800093a:	d115      	bne.n	8000968 <__aeabi_dadd+0x500>
 800093c:	2080      	movs	r0, #128	; 0x80
 800093e:	2500      	movs	r5, #0
 8000940:	0300      	lsls	r0, r0, #12
 8000942:	e6e3      	b.n	800070c <__aeabi_dadd+0x2a4>
 8000944:	1a5c      	subs	r4, r3, r1
 8000946:	42a3      	cmp	r3, r4
 8000948:	419b      	sbcs	r3, r3
 800094a:	1bc7      	subs	r7, r0, r7
 800094c:	425b      	negs	r3, r3
 800094e:	2601      	movs	r6, #1
 8000950:	1aff      	subs	r7, r7, r3
 8000952:	e5da      	b.n	800050a <__aeabi_dadd+0xa2>
 8000954:	0742      	lsls	r2, r0, #29
 8000956:	08db      	lsrs	r3, r3, #3
 8000958:	4313      	orrs	r3, r2
 800095a:	08c0      	lsrs	r0, r0, #3
 800095c:	e6d2      	b.n	8000704 <__aeabi_dadd+0x29c>
 800095e:	0742      	lsls	r2, r0, #29
 8000960:	08db      	lsrs	r3, r3, #3
 8000962:	4313      	orrs	r3, r2
 8000964:	08c0      	lsrs	r0, r0, #3
 8000966:	e6ac      	b.n	80006c2 <__aeabi_dadd+0x25a>
 8000968:	4643      	mov	r3, r8
 800096a:	4642      	mov	r2, r8
 800096c:	08c9      	lsrs	r1, r1, #3
 800096e:	075b      	lsls	r3, r3, #29
 8000970:	4655      	mov	r5, sl
 8000972:	430b      	orrs	r3, r1
 8000974:	08d0      	lsrs	r0, r2, #3
 8000976:	e6c5      	b.n	8000704 <__aeabi_dadd+0x29c>
 8000978:	4643      	mov	r3, r8
 800097a:	4642      	mov	r2, r8
 800097c:	075b      	lsls	r3, r3, #29
 800097e:	08c9      	lsrs	r1, r1, #3
 8000980:	430b      	orrs	r3, r1
 8000982:	08d0      	lsrs	r0, r2, #3
 8000984:	e6be      	b.n	8000704 <__aeabi_dadd+0x29c>
 8000986:	4303      	orrs	r3, r0
 8000988:	001c      	movs	r4, r3
 800098a:	1e63      	subs	r3, r4, #1
 800098c:	419c      	sbcs	r4, r3
 800098e:	e6fc      	b.n	800078a <__aeabi_dadd+0x322>
 8000990:	0002      	movs	r2, r0
 8000992:	3c20      	subs	r4, #32
 8000994:	40e2      	lsrs	r2, r4
 8000996:	0014      	movs	r4, r2
 8000998:	4662      	mov	r2, ip
 800099a:	2a20      	cmp	r2, #32
 800099c:	d003      	beq.n	80009a6 <__aeabi_dadd+0x53e>
 800099e:	2540      	movs	r5, #64	; 0x40
 80009a0:	1aad      	subs	r5, r5, r2
 80009a2:	40a8      	lsls	r0, r5
 80009a4:	4303      	orrs	r3, r0
 80009a6:	1e58      	subs	r0, r3, #1
 80009a8:	4183      	sbcs	r3, r0
 80009aa:	4323      	orrs	r3, r4
 80009ac:	e775      	b.n	800089a <__aeabi_dadd+0x432>
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	d0e2      	beq.n	8000978 <__aeabi_dadd+0x510>
 80009b2:	003a      	movs	r2, r7
 80009b4:	430a      	orrs	r2, r1
 80009b6:	d0cd      	beq.n	8000954 <__aeabi_dadd+0x4ec>
 80009b8:	0742      	lsls	r2, r0, #29
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	4313      	orrs	r3, r2
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	08c0      	lsrs	r0, r0, #3
 80009c2:	0312      	lsls	r2, r2, #12
 80009c4:	4210      	tst	r0, r2
 80009c6:	d006      	beq.n	80009d6 <__aeabi_dadd+0x56e>
 80009c8:	08fc      	lsrs	r4, r7, #3
 80009ca:	4214      	tst	r4, r2
 80009cc:	d103      	bne.n	80009d6 <__aeabi_dadd+0x56e>
 80009ce:	0020      	movs	r0, r4
 80009d0:	08cb      	lsrs	r3, r1, #3
 80009d2:	077a      	lsls	r2, r7, #29
 80009d4:	4313      	orrs	r3, r2
 80009d6:	0f5a      	lsrs	r2, r3, #29
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	0752      	lsls	r2, r2, #29
 80009dc:	08db      	lsrs	r3, r3, #3
 80009de:	4313      	orrs	r3, r2
 80009e0:	e690      	b.n	8000704 <__aeabi_dadd+0x29c>
 80009e2:	4643      	mov	r3, r8
 80009e4:	430b      	orrs	r3, r1
 80009e6:	d100      	bne.n	80009ea <__aeabi_dadd+0x582>
 80009e8:	e709      	b.n	80007fe <__aeabi_dadd+0x396>
 80009ea:	4643      	mov	r3, r8
 80009ec:	4642      	mov	r2, r8
 80009ee:	08c9      	lsrs	r1, r1, #3
 80009f0:	075b      	lsls	r3, r3, #29
 80009f2:	4655      	mov	r5, sl
 80009f4:	430b      	orrs	r3, r1
 80009f6:	08d0      	lsrs	r0, r2, #3
 80009f8:	e666      	b.n	80006c8 <__aeabi_dadd+0x260>
 80009fa:	1acc      	subs	r4, r1, r3
 80009fc:	42a1      	cmp	r1, r4
 80009fe:	4189      	sbcs	r1, r1
 8000a00:	1a3f      	subs	r7, r7, r0
 8000a02:	4249      	negs	r1, r1
 8000a04:	4655      	mov	r5, sl
 8000a06:	2601      	movs	r6, #1
 8000a08:	1a7f      	subs	r7, r7, r1
 8000a0a:	e57e      	b.n	800050a <__aeabi_dadd+0xa2>
 8000a0c:	4642      	mov	r2, r8
 8000a0e:	1a5c      	subs	r4, r3, r1
 8000a10:	1a87      	subs	r7, r0, r2
 8000a12:	42a3      	cmp	r3, r4
 8000a14:	4192      	sbcs	r2, r2
 8000a16:	4252      	negs	r2, r2
 8000a18:	1abf      	subs	r7, r7, r2
 8000a1a:	023a      	lsls	r2, r7, #8
 8000a1c:	d53d      	bpl.n	8000a9a <__aeabi_dadd+0x632>
 8000a1e:	1acc      	subs	r4, r1, r3
 8000a20:	42a1      	cmp	r1, r4
 8000a22:	4189      	sbcs	r1, r1
 8000a24:	4643      	mov	r3, r8
 8000a26:	4249      	negs	r1, r1
 8000a28:	1a1f      	subs	r7, r3, r0
 8000a2a:	4655      	mov	r5, sl
 8000a2c:	1a7f      	subs	r7, r7, r1
 8000a2e:	e595      	b.n	800055c <__aeabi_dadd+0xf4>
 8000a30:	077b      	lsls	r3, r7, #29
 8000a32:	08c9      	lsrs	r1, r1, #3
 8000a34:	430b      	orrs	r3, r1
 8000a36:	08f8      	lsrs	r0, r7, #3
 8000a38:	e643      	b.n	80006c2 <__aeabi_dadd+0x25a>
 8000a3a:	4644      	mov	r4, r8
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	430c      	orrs	r4, r1
 8000a40:	d130      	bne.n	8000aa4 <__aeabi_dadd+0x63c>
 8000a42:	0742      	lsls	r2, r0, #29
 8000a44:	4313      	orrs	r3, r2
 8000a46:	08c0      	lsrs	r0, r0, #3
 8000a48:	e65c      	b.n	8000704 <__aeabi_dadd+0x29c>
 8000a4a:	077b      	lsls	r3, r7, #29
 8000a4c:	08c9      	lsrs	r1, r1, #3
 8000a4e:	430b      	orrs	r3, r1
 8000a50:	08f8      	lsrs	r0, r7, #3
 8000a52:	e639      	b.n	80006c8 <__aeabi_dadd+0x260>
 8000a54:	185c      	adds	r4, r3, r1
 8000a56:	429c      	cmp	r4, r3
 8000a58:	419b      	sbcs	r3, r3
 8000a5a:	4440      	add	r0, r8
 8000a5c:	425b      	negs	r3, r3
 8000a5e:	18c7      	adds	r7, r0, r3
 8000a60:	023b      	lsls	r3, r7, #8
 8000a62:	d400      	bmi.n	8000a66 <__aeabi_dadd+0x5fe>
 8000a64:	e625      	b.n	80006b2 <__aeabi_dadd+0x24a>
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <__aeabi_dadd+0x674>)
 8000a68:	2601      	movs	r6, #1
 8000a6a:	401f      	ands	r7, r3
 8000a6c:	e621      	b.n	80006b2 <__aeabi_dadd+0x24a>
 8000a6e:	0004      	movs	r4, r0
 8000a70:	3a20      	subs	r2, #32
 8000a72:	40d4      	lsrs	r4, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	2a20      	cmp	r2, #32
 8000a78:	d004      	beq.n	8000a84 <__aeabi_dadd+0x61c>
 8000a7a:	2240      	movs	r2, #64	; 0x40
 8000a7c:	4666      	mov	r6, ip
 8000a7e:	1b92      	subs	r2, r2, r6
 8000a80:	4090      	lsls	r0, r2
 8000a82:	4303      	orrs	r3, r0
 8000a84:	1e5a      	subs	r2, r3, #1
 8000a86:	4193      	sbcs	r3, r2
 8000a88:	431c      	orrs	r4, r3
 8000a8a:	e67e      	b.n	800078a <__aeabi_dadd+0x322>
 8000a8c:	185c      	adds	r4, r3, r1
 8000a8e:	428c      	cmp	r4, r1
 8000a90:	4189      	sbcs	r1, r1
 8000a92:	4440      	add	r0, r8
 8000a94:	4249      	negs	r1, r1
 8000a96:	1847      	adds	r7, r0, r1
 8000a98:	e6dd      	b.n	8000856 <__aeabi_dadd+0x3ee>
 8000a9a:	0023      	movs	r3, r4
 8000a9c:	433b      	orrs	r3, r7
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_dadd+0x63a>
 8000aa0:	e6ad      	b.n	80007fe <__aeabi_dadd+0x396>
 8000aa2:	e606      	b.n	80006b2 <__aeabi_dadd+0x24a>
 8000aa4:	0744      	lsls	r4, r0, #29
 8000aa6:	4323      	orrs	r3, r4
 8000aa8:	2480      	movs	r4, #128	; 0x80
 8000aaa:	08c0      	lsrs	r0, r0, #3
 8000aac:	0324      	lsls	r4, r4, #12
 8000aae:	4220      	tst	r0, r4
 8000ab0:	d008      	beq.n	8000ac4 <__aeabi_dadd+0x65c>
 8000ab2:	4642      	mov	r2, r8
 8000ab4:	08d6      	lsrs	r6, r2, #3
 8000ab6:	4226      	tst	r6, r4
 8000ab8:	d104      	bne.n	8000ac4 <__aeabi_dadd+0x65c>
 8000aba:	4655      	mov	r5, sl
 8000abc:	0030      	movs	r0, r6
 8000abe:	08cb      	lsrs	r3, r1, #3
 8000ac0:	0751      	lsls	r1, r2, #29
 8000ac2:	430b      	orrs	r3, r1
 8000ac4:	0f5a      	lsrs	r2, r3, #29
 8000ac6:	00db      	lsls	r3, r3, #3
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	0752      	lsls	r2, r2, #29
 8000acc:	4313      	orrs	r3, r2
 8000ace:	e619      	b.n	8000704 <__aeabi_dadd+0x29c>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	4a01      	ldr	r2, [pc, #4]	; (8000ad8 <__aeabi_dadd+0x670>)
 8000ad4:	001f      	movs	r7, r3
 8000ad6:	e55e      	b.n	8000596 <__aeabi_dadd+0x12e>
 8000ad8:	000007ff 	.word	0x000007ff
 8000adc:	ff7fffff 	.word	0xff7fffff

08000ae0 <__aeabi_ddiv>:
 8000ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae2:	4657      	mov	r7, sl
 8000ae4:	464e      	mov	r6, r9
 8000ae6:	4645      	mov	r5, r8
 8000ae8:	46de      	mov	lr, fp
 8000aea:	b5e0      	push	{r5, r6, r7, lr}
 8000aec:	4681      	mov	r9, r0
 8000aee:	0005      	movs	r5, r0
 8000af0:	030c      	lsls	r4, r1, #12
 8000af2:	0048      	lsls	r0, r1, #1
 8000af4:	4692      	mov	sl, r2
 8000af6:	001f      	movs	r7, r3
 8000af8:	b085      	sub	sp, #20
 8000afa:	0b24      	lsrs	r4, r4, #12
 8000afc:	0d40      	lsrs	r0, r0, #21
 8000afe:	0fce      	lsrs	r6, r1, #31
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d100      	bne.n	8000b06 <__aeabi_ddiv+0x26>
 8000b04:	e156      	b.n	8000db4 <__aeabi_ddiv+0x2d4>
 8000b06:	4bd4      	ldr	r3, [pc, #848]	; (8000e58 <__aeabi_ddiv+0x378>)
 8000b08:	4298      	cmp	r0, r3
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_ddiv+0x2e>
 8000b0c:	e172      	b.n	8000df4 <__aeabi_ddiv+0x314>
 8000b0e:	0f6b      	lsrs	r3, r5, #29
 8000b10:	00e4      	lsls	r4, r4, #3
 8000b12:	431c      	orrs	r4, r3
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	041b      	lsls	r3, r3, #16
 8000b18:	4323      	orrs	r3, r4
 8000b1a:	4698      	mov	r8, r3
 8000b1c:	4bcf      	ldr	r3, [pc, #828]	; (8000e5c <__aeabi_ddiv+0x37c>)
 8000b1e:	00ed      	lsls	r5, r5, #3
 8000b20:	469b      	mov	fp, r3
 8000b22:	2300      	movs	r3, #0
 8000b24:	4699      	mov	r9, r3
 8000b26:	4483      	add	fp, r0
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	033c      	lsls	r4, r7, #12
 8000b2c:	007b      	lsls	r3, r7, #1
 8000b2e:	4650      	mov	r0, sl
 8000b30:	0b24      	lsrs	r4, r4, #12
 8000b32:	0d5b      	lsrs	r3, r3, #21
 8000b34:	0fff      	lsrs	r7, r7, #31
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d100      	bne.n	8000b3c <__aeabi_ddiv+0x5c>
 8000b3a:	e11f      	b.n	8000d7c <__aeabi_ddiv+0x29c>
 8000b3c:	4ac6      	ldr	r2, [pc, #792]	; (8000e58 <__aeabi_ddiv+0x378>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d100      	bne.n	8000b44 <__aeabi_ddiv+0x64>
 8000b42:	e162      	b.n	8000e0a <__aeabi_ddiv+0x32a>
 8000b44:	49c5      	ldr	r1, [pc, #788]	; (8000e5c <__aeabi_ddiv+0x37c>)
 8000b46:	0f42      	lsrs	r2, r0, #29
 8000b48:	468c      	mov	ip, r1
 8000b4a:	00e4      	lsls	r4, r4, #3
 8000b4c:	4659      	mov	r1, fp
 8000b4e:	4314      	orrs	r4, r2
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	4463      	add	r3, ip
 8000b54:	0412      	lsls	r2, r2, #16
 8000b56:	1acb      	subs	r3, r1, r3
 8000b58:	4314      	orrs	r4, r2
 8000b5a:	469b      	mov	fp, r3
 8000b5c:	00c2      	lsls	r2, r0, #3
 8000b5e:	2000      	movs	r0, #0
 8000b60:	0033      	movs	r3, r6
 8000b62:	407b      	eors	r3, r7
 8000b64:	469a      	mov	sl, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d827      	bhi.n	8000bbc <__aeabi_ddiv+0xdc>
 8000b6c:	49bc      	ldr	r1, [pc, #752]	; (8000e60 <__aeabi_ddiv+0x380>)
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	58cb      	ldr	r3, [r1, r3]
 8000b72:	469f      	mov	pc, r3
 8000b74:	46b2      	mov	sl, r6
 8000b76:	9b00      	ldr	r3, [sp, #0]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d016      	beq.n	8000baa <__aeabi_ddiv+0xca>
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_ddiv+0xa2>
 8000b80:	e28e      	b.n	80010a0 <__aeabi_ddiv+0x5c0>
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d000      	beq.n	8000b88 <__aeabi_ddiv+0xa8>
 8000b86:	e0d9      	b.n	8000d3c <__aeabi_ddiv+0x25c>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	2400      	movs	r4, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	4652      	mov	r2, sl
 8000b90:	051b      	lsls	r3, r3, #20
 8000b92:	4323      	orrs	r3, r4
 8000b94:	07d2      	lsls	r2, r2, #31
 8000b96:	4313      	orrs	r3, r2
 8000b98:	0028      	movs	r0, r5
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	b005      	add	sp, #20
 8000b9e:	bcf0      	pop	{r4, r5, r6, r7}
 8000ba0:	46bb      	mov	fp, r7
 8000ba2:	46b2      	mov	sl, r6
 8000ba4:	46a9      	mov	r9, r5
 8000ba6:	46a0      	mov	r8, r4
 8000ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000baa:	2400      	movs	r4, #0
 8000bac:	2500      	movs	r5, #0
 8000bae:	4baa      	ldr	r3, [pc, #680]	; (8000e58 <__aeabi_ddiv+0x378>)
 8000bb0:	e7ed      	b.n	8000b8e <__aeabi_ddiv+0xae>
 8000bb2:	46ba      	mov	sl, r7
 8000bb4:	46a0      	mov	r8, r4
 8000bb6:	0015      	movs	r5, r2
 8000bb8:	9000      	str	r0, [sp, #0]
 8000bba:	e7dc      	b.n	8000b76 <__aeabi_ddiv+0x96>
 8000bbc:	4544      	cmp	r4, r8
 8000bbe:	d200      	bcs.n	8000bc2 <__aeabi_ddiv+0xe2>
 8000bc0:	e1c7      	b.n	8000f52 <__aeabi_ddiv+0x472>
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_ddiv+0xe6>
 8000bc4:	e1c2      	b.n	8000f4c <__aeabi_ddiv+0x46c>
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	425b      	negs	r3, r3
 8000bca:	469c      	mov	ip, r3
 8000bcc:	002e      	movs	r6, r5
 8000bce:	4640      	mov	r0, r8
 8000bd0:	2500      	movs	r5, #0
 8000bd2:	44e3      	add	fp, ip
 8000bd4:	0223      	lsls	r3, r4, #8
 8000bd6:	0e14      	lsrs	r4, r2, #24
 8000bd8:	431c      	orrs	r4, r3
 8000bda:	0c1b      	lsrs	r3, r3, #16
 8000bdc:	4699      	mov	r9, r3
 8000bde:	0423      	lsls	r3, r4, #16
 8000be0:	0c1f      	lsrs	r7, r3, #16
 8000be2:	0212      	lsls	r2, r2, #8
 8000be4:	4649      	mov	r1, r9
 8000be6:	9200      	str	r2, [sp, #0]
 8000be8:	9701      	str	r7, [sp, #4]
 8000bea:	f7ff fb0f 	bl	800020c <__aeabi_uidivmod>
 8000bee:	0002      	movs	r2, r0
 8000bf0:	437a      	muls	r2, r7
 8000bf2:	040b      	lsls	r3, r1, #16
 8000bf4:	0c31      	lsrs	r1, r6, #16
 8000bf6:	4680      	mov	r8, r0
 8000bf8:	4319      	orrs	r1, r3
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	d907      	bls.n	8000c0e <__aeabi_ddiv+0x12e>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	425b      	negs	r3, r3
 8000c02:	469c      	mov	ip, r3
 8000c04:	1909      	adds	r1, r1, r4
 8000c06:	44e0      	add	r8, ip
 8000c08:	428c      	cmp	r4, r1
 8000c0a:	d800      	bhi.n	8000c0e <__aeabi_ddiv+0x12e>
 8000c0c:	e207      	b.n	800101e <__aeabi_ddiv+0x53e>
 8000c0e:	1a88      	subs	r0, r1, r2
 8000c10:	4649      	mov	r1, r9
 8000c12:	f7ff fafb 	bl	800020c <__aeabi_uidivmod>
 8000c16:	0409      	lsls	r1, r1, #16
 8000c18:	468c      	mov	ip, r1
 8000c1a:	0431      	lsls	r1, r6, #16
 8000c1c:	4666      	mov	r6, ip
 8000c1e:	9a01      	ldr	r2, [sp, #4]
 8000c20:	0c09      	lsrs	r1, r1, #16
 8000c22:	4342      	muls	r2, r0
 8000c24:	0003      	movs	r3, r0
 8000c26:	4331      	orrs	r1, r6
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	d904      	bls.n	8000c36 <__aeabi_ddiv+0x156>
 8000c2c:	1909      	adds	r1, r1, r4
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	428c      	cmp	r4, r1
 8000c32:	d800      	bhi.n	8000c36 <__aeabi_ddiv+0x156>
 8000c34:	e1ed      	b.n	8001012 <__aeabi_ddiv+0x532>
 8000c36:	1a88      	subs	r0, r1, r2
 8000c38:	4642      	mov	r2, r8
 8000c3a:	0412      	lsls	r2, r2, #16
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	4690      	mov	r8, r2
 8000c40:	4641      	mov	r1, r8
 8000c42:	9b00      	ldr	r3, [sp, #0]
 8000c44:	040e      	lsls	r6, r1, #16
 8000c46:	0c1b      	lsrs	r3, r3, #16
 8000c48:	001f      	movs	r7, r3
 8000c4a:	9302      	str	r3, [sp, #8]
 8000c4c:	9b00      	ldr	r3, [sp, #0]
 8000c4e:	0c36      	lsrs	r6, r6, #16
 8000c50:	041b      	lsls	r3, r3, #16
 8000c52:	0c19      	lsrs	r1, r3, #16
 8000c54:	000b      	movs	r3, r1
 8000c56:	4373      	muls	r3, r6
 8000c58:	0c12      	lsrs	r2, r2, #16
 8000c5a:	437e      	muls	r6, r7
 8000c5c:	9103      	str	r1, [sp, #12]
 8000c5e:	4351      	muls	r1, r2
 8000c60:	437a      	muls	r2, r7
 8000c62:	0c1f      	lsrs	r7, r3, #16
 8000c64:	46bc      	mov	ip, r7
 8000c66:	1876      	adds	r6, r6, r1
 8000c68:	4466      	add	r6, ip
 8000c6a:	42b1      	cmp	r1, r6
 8000c6c:	d903      	bls.n	8000c76 <__aeabi_ddiv+0x196>
 8000c6e:	2180      	movs	r1, #128	; 0x80
 8000c70:	0249      	lsls	r1, r1, #9
 8000c72:	468c      	mov	ip, r1
 8000c74:	4462      	add	r2, ip
 8000c76:	0c31      	lsrs	r1, r6, #16
 8000c78:	188a      	adds	r2, r1, r2
 8000c7a:	0431      	lsls	r1, r6, #16
 8000c7c:	041e      	lsls	r6, r3, #16
 8000c7e:	0c36      	lsrs	r6, r6, #16
 8000c80:	198e      	adds	r6, r1, r6
 8000c82:	4290      	cmp	r0, r2
 8000c84:	d302      	bcc.n	8000c8c <__aeabi_ddiv+0x1ac>
 8000c86:	d112      	bne.n	8000cae <__aeabi_ddiv+0x1ce>
 8000c88:	42b5      	cmp	r5, r6
 8000c8a:	d210      	bcs.n	8000cae <__aeabi_ddiv+0x1ce>
 8000c8c:	4643      	mov	r3, r8
 8000c8e:	1e59      	subs	r1, r3, #1
 8000c90:	9b00      	ldr	r3, [sp, #0]
 8000c92:	469c      	mov	ip, r3
 8000c94:	4465      	add	r5, ip
 8000c96:	001f      	movs	r7, r3
 8000c98:	429d      	cmp	r5, r3
 8000c9a:	419b      	sbcs	r3, r3
 8000c9c:	425b      	negs	r3, r3
 8000c9e:	191b      	adds	r3, r3, r4
 8000ca0:	18c0      	adds	r0, r0, r3
 8000ca2:	4284      	cmp	r4, r0
 8000ca4:	d200      	bcs.n	8000ca8 <__aeabi_ddiv+0x1c8>
 8000ca6:	e1a0      	b.n	8000fea <__aeabi_ddiv+0x50a>
 8000ca8:	d100      	bne.n	8000cac <__aeabi_ddiv+0x1cc>
 8000caa:	e19b      	b.n	8000fe4 <__aeabi_ddiv+0x504>
 8000cac:	4688      	mov	r8, r1
 8000cae:	1bae      	subs	r6, r5, r6
 8000cb0:	42b5      	cmp	r5, r6
 8000cb2:	41ad      	sbcs	r5, r5
 8000cb4:	1a80      	subs	r0, r0, r2
 8000cb6:	426d      	negs	r5, r5
 8000cb8:	1b40      	subs	r0, r0, r5
 8000cba:	4284      	cmp	r4, r0
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_ddiv+0x1e0>
 8000cbe:	e1d5      	b.n	800106c <__aeabi_ddiv+0x58c>
 8000cc0:	4649      	mov	r1, r9
 8000cc2:	f7ff faa3 	bl	800020c <__aeabi_uidivmod>
 8000cc6:	9a01      	ldr	r2, [sp, #4]
 8000cc8:	040b      	lsls	r3, r1, #16
 8000cca:	4342      	muls	r2, r0
 8000ccc:	0c31      	lsrs	r1, r6, #16
 8000cce:	0005      	movs	r5, r0
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	428a      	cmp	r2, r1
 8000cd4:	d900      	bls.n	8000cd8 <__aeabi_ddiv+0x1f8>
 8000cd6:	e16c      	b.n	8000fb2 <__aeabi_ddiv+0x4d2>
 8000cd8:	1a88      	subs	r0, r1, r2
 8000cda:	4649      	mov	r1, r9
 8000cdc:	f7ff fa96 	bl	800020c <__aeabi_uidivmod>
 8000ce0:	9a01      	ldr	r2, [sp, #4]
 8000ce2:	0436      	lsls	r6, r6, #16
 8000ce4:	4342      	muls	r2, r0
 8000ce6:	0409      	lsls	r1, r1, #16
 8000ce8:	0c36      	lsrs	r6, r6, #16
 8000cea:	0003      	movs	r3, r0
 8000cec:	430e      	orrs	r6, r1
 8000cee:	42b2      	cmp	r2, r6
 8000cf0:	d900      	bls.n	8000cf4 <__aeabi_ddiv+0x214>
 8000cf2:	e153      	b.n	8000f9c <__aeabi_ddiv+0x4bc>
 8000cf4:	9803      	ldr	r0, [sp, #12]
 8000cf6:	1ab6      	subs	r6, r6, r2
 8000cf8:	0002      	movs	r2, r0
 8000cfa:	042d      	lsls	r5, r5, #16
 8000cfc:	431d      	orrs	r5, r3
 8000cfe:	9f02      	ldr	r7, [sp, #8]
 8000d00:	042b      	lsls	r3, r5, #16
 8000d02:	0c1b      	lsrs	r3, r3, #16
 8000d04:	435a      	muls	r2, r3
 8000d06:	437b      	muls	r3, r7
 8000d08:	469c      	mov	ip, r3
 8000d0a:	0c29      	lsrs	r1, r5, #16
 8000d0c:	4348      	muls	r0, r1
 8000d0e:	0c13      	lsrs	r3, r2, #16
 8000d10:	4484      	add	ip, r0
 8000d12:	4463      	add	r3, ip
 8000d14:	4379      	muls	r1, r7
 8000d16:	4298      	cmp	r0, r3
 8000d18:	d903      	bls.n	8000d22 <__aeabi_ddiv+0x242>
 8000d1a:	2080      	movs	r0, #128	; 0x80
 8000d1c:	0240      	lsls	r0, r0, #9
 8000d1e:	4684      	mov	ip, r0
 8000d20:	4461      	add	r1, ip
 8000d22:	0c18      	lsrs	r0, r3, #16
 8000d24:	0412      	lsls	r2, r2, #16
 8000d26:	041b      	lsls	r3, r3, #16
 8000d28:	0c12      	lsrs	r2, r2, #16
 8000d2a:	1841      	adds	r1, r0, r1
 8000d2c:	189b      	adds	r3, r3, r2
 8000d2e:	428e      	cmp	r6, r1
 8000d30:	d200      	bcs.n	8000d34 <__aeabi_ddiv+0x254>
 8000d32:	e0ff      	b.n	8000f34 <__aeabi_ddiv+0x454>
 8000d34:	d100      	bne.n	8000d38 <__aeabi_ddiv+0x258>
 8000d36:	e0fa      	b.n	8000f2e <__aeabi_ddiv+0x44e>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	431d      	orrs	r5, r3
 8000d3c:	4a49      	ldr	r2, [pc, #292]	; (8000e64 <__aeabi_ddiv+0x384>)
 8000d3e:	445a      	add	r2, fp
 8000d40:	2a00      	cmp	r2, #0
 8000d42:	dc00      	bgt.n	8000d46 <__aeabi_ddiv+0x266>
 8000d44:	e0aa      	b.n	8000e9c <__aeabi_ddiv+0x3bc>
 8000d46:	076b      	lsls	r3, r5, #29
 8000d48:	d000      	beq.n	8000d4c <__aeabi_ddiv+0x26c>
 8000d4a:	e13d      	b.n	8000fc8 <__aeabi_ddiv+0x4e8>
 8000d4c:	08ed      	lsrs	r5, r5, #3
 8000d4e:	4643      	mov	r3, r8
 8000d50:	01db      	lsls	r3, r3, #7
 8000d52:	d506      	bpl.n	8000d62 <__aeabi_ddiv+0x282>
 8000d54:	4642      	mov	r2, r8
 8000d56:	4b44      	ldr	r3, [pc, #272]	; (8000e68 <__aeabi_ddiv+0x388>)
 8000d58:	401a      	ands	r2, r3
 8000d5a:	4690      	mov	r8, r2
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	00d2      	lsls	r2, r2, #3
 8000d60:	445a      	add	r2, fp
 8000d62:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <__aeabi_ddiv+0x38c>)
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_ddiv+0x28a>
 8000d68:	e71f      	b.n	8000baa <__aeabi_ddiv+0xca>
 8000d6a:	4643      	mov	r3, r8
 8000d6c:	075b      	lsls	r3, r3, #29
 8000d6e:	431d      	orrs	r5, r3
 8000d70:	4643      	mov	r3, r8
 8000d72:	0552      	lsls	r2, r2, #21
 8000d74:	025c      	lsls	r4, r3, #9
 8000d76:	0b24      	lsrs	r4, r4, #12
 8000d78:	0d53      	lsrs	r3, r2, #21
 8000d7a:	e708      	b.n	8000b8e <__aeabi_ddiv+0xae>
 8000d7c:	4652      	mov	r2, sl
 8000d7e:	4322      	orrs	r2, r4
 8000d80:	d100      	bne.n	8000d84 <__aeabi_ddiv+0x2a4>
 8000d82:	e07b      	b.n	8000e7c <__aeabi_ddiv+0x39c>
 8000d84:	2c00      	cmp	r4, #0
 8000d86:	d100      	bne.n	8000d8a <__aeabi_ddiv+0x2aa>
 8000d88:	e0fa      	b.n	8000f80 <__aeabi_ddiv+0x4a0>
 8000d8a:	0020      	movs	r0, r4
 8000d8c:	f001 f92c 	bl	8001fe8 <__clzsi2>
 8000d90:	0002      	movs	r2, r0
 8000d92:	3a0b      	subs	r2, #11
 8000d94:	231d      	movs	r3, #29
 8000d96:	0001      	movs	r1, r0
 8000d98:	1a9b      	subs	r3, r3, r2
 8000d9a:	4652      	mov	r2, sl
 8000d9c:	3908      	subs	r1, #8
 8000d9e:	40da      	lsrs	r2, r3
 8000da0:	408c      	lsls	r4, r1
 8000da2:	4314      	orrs	r4, r2
 8000da4:	4652      	mov	r2, sl
 8000da6:	408a      	lsls	r2, r1
 8000da8:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <__aeabi_ddiv+0x390>)
 8000daa:	4458      	add	r0, fp
 8000dac:	469b      	mov	fp, r3
 8000dae:	4483      	add	fp, r0
 8000db0:	2000      	movs	r0, #0
 8000db2:	e6d5      	b.n	8000b60 <__aeabi_ddiv+0x80>
 8000db4:	464b      	mov	r3, r9
 8000db6:	4323      	orrs	r3, r4
 8000db8:	4698      	mov	r8, r3
 8000dba:	d044      	beq.n	8000e46 <__aeabi_ddiv+0x366>
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_ddiv+0x2e2>
 8000dc0:	e0ce      	b.n	8000f60 <__aeabi_ddiv+0x480>
 8000dc2:	0020      	movs	r0, r4
 8000dc4:	f001 f910 	bl	8001fe8 <__clzsi2>
 8000dc8:	0001      	movs	r1, r0
 8000dca:	0002      	movs	r2, r0
 8000dcc:	390b      	subs	r1, #11
 8000dce:	231d      	movs	r3, #29
 8000dd0:	1a5b      	subs	r3, r3, r1
 8000dd2:	4649      	mov	r1, r9
 8000dd4:	0010      	movs	r0, r2
 8000dd6:	40d9      	lsrs	r1, r3
 8000dd8:	3808      	subs	r0, #8
 8000dda:	4084      	lsls	r4, r0
 8000ddc:	000b      	movs	r3, r1
 8000dde:	464d      	mov	r5, r9
 8000de0:	4323      	orrs	r3, r4
 8000de2:	4698      	mov	r8, r3
 8000de4:	4085      	lsls	r5, r0
 8000de6:	4823      	ldr	r0, [pc, #140]	; (8000e74 <__aeabi_ddiv+0x394>)
 8000de8:	1a83      	subs	r3, r0, r2
 8000dea:	469b      	mov	fp, r3
 8000dec:	2300      	movs	r3, #0
 8000dee:	4699      	mov	r9, r3
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	e69a      	b.n	8000b2a <__aeabi_ddiv+0x4a>
 8000df4:	464b      	mov	r3, r9
 8000df6:	4323      	orrs	r3, r4
 8000df8:	4698      	mov	r8, r3
 8000dfa:	d11d      	bne.n	8000e38 <__aeabi_ddiv+0x358>
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	4699      	mov	r9, r3
 8000e00:	3b06      	subs	r3, #6
 8000e02:	2500      	movs	r5, #0
 8000e04:	4683      	mov	fp, r0
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	e68f      	b.n	8000b2a <__aeabi_ddiv+0x4a>
 8000e0a:	4652      	mov	r2, sl
 8000e0c:	4322      	orrs	r2, r4
 8000e0e:	d109      	bne.n	8000e24 <__aeabi_ddiv+0x344>
 8000e10:	2302      	movs	r3, #2
 8000e12:	4649      	mov	r1, r9
 8000e14:	4319      	orrs	r1, r3
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <__aeabi_ddiv+0x398>)
 8000e18:	4689      	mov	r9, r1
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	2400      	movs	r4, #0
 8000e1e:	2002      	movs	r0, #2
 8000e20:	44e3      	add	fp, ip
 8000e22:	e69d      	b.n	8000b60 <__aeabi_ddiv+0x80>
 8000e24:	2303      	movs	r3, #3
 8000e26:	464a      	mov	r2, r9
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <__aeabi_ddiv+0x398>)
 8000e2c:	4691      	mov	r9, r2
 8000e2e:	469c      	mov	ip, r3
 8000e30:	4652      	mov	r2, sl
 8000e32:	2003      	movs	r0, #3
 8000e34:	44e3      	add	fp, ip
 8000e36:	e693      	b.n	8000b60 <__aeabi_ddiv+0x80>
 8000e38:	230c      	movs	r3, #12
 8000e3a:	4699      	mov	r9, r3
 8000e3c:	3b09      	subs	r3, #9
 8000e3e:	46a0      	mov	r8, r4
 8000e40:	4683      	mov	fp, r0
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	e671      	b.n	8000b2a <__aeabi_ddiv+0x4a>
 8000e46:	2304      	movs	r3, #4
 8000e48:	4699      	mov	r9, r3
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	469b      	mov	fp, r3
 8000e4e:	3301      	adds	r3, #1
 8000e50:	2500      	movs	r5, #0
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	e669      	b.n	8000b2a <__aeabi_ddiv+0x4a>
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	000007ff 	.word	0x000007ff
 8000e5c:	fffffc01 	.word	0xfffffc01
 8000e60:	080061ac 	.word	0x080061ac
 8000e64:	000003ff 	.word	0x000003ff
 8000e68:	feffffff 	.word	0xfeffffff
 8000e6c:	000007fe 	.word	0x000007fe
 8000e70:	000003f3 	.word	0x000003f3
 8000e74:	fffffc0d 	.word	0xfffffc0d
 8000e78:	fffff801 	.word	0xfffff801
 8000e7c:	4649      	mov	r1, r9
 8000e7e:	2301      	movs	r3, #1
 8000e80:	4319      	orrs	r1, r3
 8000e82:	4689      	mov	r9, r1
 8000e84:	2400      	movs	r4, #0
 8000e86:	2001      	movs	r0, #1
 8000e88:	e66a      	b.n	8000b60 <__aeabi_ddiv+0x80>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	2480      	movs	r4, #128	; 0x80
 8000e8e:	469a      	mov	sl, r3
 8000e90:	2500      	movs	r5, #0
 8000e92:	4b8a      	ldr	r3, [pc, #552]	; (80010bc <__aeabi_ddiv+0x5dc>)
 8000e94:	0324      	lsls	r4, r4, #12
 8000e96:	e67a      	b.n	8000b8e <__aeabi_ddiv+0xae>
 8000e98:	2501      	movs	r5, #1
 8000e9a:	426d      	negs	r5, r5
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	1a9b      	subs	r3, r3, r2
 8000ea0:	2b38      	cmp	r3, #56	; 0x38
 8000ea2:	dd00      	ble.n	8000ea6 <__aeabi_ddiv+0x3c6>
 8000ea4:	e670      	b.n	8000b88 <__aeabi_ddiv+0xa8>
 8000ea6:	2b1f      	cmp	r3, #31
 8000ea8:	dc00      	bgt.n	8000eac <__aeabi_ddiv+0x3cc>
 8000eaa:	e0bf      	b.n	800102c <__aeabi_ddiv+0x54c>
 8000eac:	211f      	movs	r1, #31
 8000eae:	4249      	negs	r1, r1
 8000eb0:	1a8a      	subs	r2, r1, r2
 8000eb2:	4641      	mov	r1, r8
 8000eb4:	40d1      	lsrs	r1, r2
 8000eb6:	000a      	movs	r2, r1
 8000eb8:	2b20      	cmp	r3, #32
 8000eba:	d004      	beq.n	8000ec6 <__aeabi_ddiv+0x3e6>
 8000ebc:	4641      	mov	r1, r8
 8000ebe:	4b80      	ldr	r3, [pc, #512]	; (80010c0 <__aeabi_ddiv+0x5e0>)
 8000ec0:	445b      	add	r3, fp
 8000ec2:	4099      	lsls	r1, r3
 8000ec4:	430d      	orrs	r5, r1
 8000ec6:	1e6b      	subs	r3, r5, #1
 8000ec8:	419d      	sbcs	r5, r3
 8000eca:	2307      	movs	r3, #7
 8000ecc:	432a      	orrs	r2, r5
 8000ece:	001d      	movs	r5, r3
 8000ed0:	2400      	movs	r4, #0
 8000ed2:	4015      	ands	r5, r2
 8000ed4:	4213      	tst	r3, r2
 8000ed6:	d100      	bne.n	8000eda <__aeabi_ddiv+0x3fa>
 8000ed8:	e0d4      	b.n	8001084 <__aeabi_ddiv+0x5a4>
 8000eda:	210f      	movs	r1, #15
 8000edc:	2300      	movs	r3, #0
 8000ede:	4011      	ands	r1, r2
 8000ee0:	2904      	cmp	r1, #4
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_ddiv+0x406>
 8000ee4:	e0cb      	b.n	800107e <__aeabi_ddiv+0x59e>
 8000ee6:	1d11      	adds	r1, r2, #4
 8000ee8:	4291      	cmp	r1, r2
 8000eea:	4192      	sbcs	r2, r2
 8000eec:	4252      	negs	r2, r2
 8000eee:	189b      	adds	r3, r3, r2
 8000ef0:	000a      	movs	r2, r1
 8000ef2:	0219      	lsls	r1, r3, #8
 8000ef4:	d400      	bmi.n	8000ef8 <__aeabi_ddiv+0x418>
 8000ef6:	e0c2      	b.n	800107e <__aeabi_ddiv+0x59e>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	2400      	movs	r4, #0
 8000efc:	2500      	movs	r5, #0
 8000efe:	e646      	b.n	8000b8e <__aeabi_ddiv+0xae>
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	4641      	mov	r1, r8
 8000f04:	031b      	lsls	r3, r3, #12
 8000f06:	4219      	tst	r1, r3
 8000f08:	d008      	beq.n	8000f1c <__aeabi_ddiv+0x43c>
 8000f0a:	421c      	tst	r4, r3
 8000f0c:	d106      	bne.n	8000f1c <__aeabi_ddiv+0x43c>
 8000f0e:	431c      	orrs	r4, r3
 8000f10:	0324      	lsls	r4, r4, #12
 8000f12:	46ba      	mov	sl, r7
 8000f14:	0015      	movs	r5, r2
 8000f16:	4b69      	ldr	r3, [pc, #420]	; (80010bc <__aeabi_ddiv+0x5dc>)
 8000f18:	0b24      	lsrs	r4, r4, #12
 8000f1a:	e638      	b.n	8000b8e <__aeabi_ddiv+0xae>
 8000f1c:	2480      	movs	r4, #128	; 0x80
 8000f1e:	4643      	mov	r3, r8
 8000f20:	0324      	lsls	r4, r4, #12
 8000f22:	431c      	orrs	r4, r3
 8000f24:	0324      	lsls	r4, r4, #12
 8000f26:	46b2      	mov	sl, r6
 8000f28:	4b64      	ldr	r3, [pc, #400]	; (80010bc <__aeabi_ddiv+0x5dc>)
 8000f2a:	0b24      	lsrs	r4, r4, #12
 8000f2c:	e62f      	b.n	8000b8e <__aeabi_ddiv+0xae>
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_ddiv+0x454>
 8000f32:	e703      	b.n	8000d3c <__aeabi_ddiv+0x25c>
 8000f34:	19a6      	adds	r6, r4, r6
 8000f36:	1e68      	subs	r0, r5, #1
 8000f38:	42a6      	cmp	r6, r4
 8000f3a:	d200      	bcs.n	8000f3e <__aeabi_ddiv+0x45e>
 8000f3c:	e08d      	b.n	800105a <__aeabi_ddiv+0x57a>
 8000f3e:	428e      	cmp	r6, r1
 8000f40:	d200      	bcs.n	8000f44 <__aeabi_ddiv+0x464>
 8000f42:	e0a3      	b.n	800108c <__aeabi_ddiv+0x5ac>
 8000f44:	d100      	bne.n	8000f48 <__aeabi_ddiv+0x468>
 8000f46:	e0b3      	b.n	80010b0 <__aeabi_ddiv+0x5d0>
 8000f48:	0005      	movs	r5, r0
 8000f4a:	e6f5      	b.n	8000d38 <__aeabi_ddiv+0x258>
 8000f4c:	42aa      	cmp	r2, r5
 8000f4e:	d900      	bls.n	8000f52 <__aeabi_ddiv+0x472>
 8000f50:	e639      	b.n	8000bc6 <__aeabi_ddiv+0xe6>
 8000f52:	4643      	mov	r3, r8
 8000f54:	07de      	lsls	r6, r3, #31
 8000f56:	0858      	lsrs	r0, r3, #1
 8000f58:	086b      	lsrs	r3, r5, #1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	07ed      	lsls	r5, r5, #31
 8000f5e:	e639      	b.n	8000bd4 <__aeabi_ddiv+0xf4>
 8000f60:	4648      	mov	r0, r9
 8000f62:	f001 f841 	bl	8001fe8 <__clzsi2>
 8000f66:	0001      	movs	r1, r0
 8000f68:	0002      	movs	r2, r0
 8000f6a:	3115      	adds	r1, #21
 8000f6c:	3220      	adds	r2, #32
 8000f6e:	291c      	cmp	r1, #28
 8000f70:	dc00      	bgt.n	8000f74 <__aeabi_ddiv+0x494>
 8000f72:	e72c      	b.n	8000dce <__aeabi_ddiv+0x2ee>
 8000f74:	464b      	mov	r3, r9
 8000f76:	3808      	subs	r0, #8
 8000f78:	4083      	lsls	r3, r0
 8000f7a:	2500      	movs	r5, #0
 8000f7c:	4698      	mov	r8, r3
 8000f7e:	e732      	b.n	8000de6 <__aeabi_ddiv+0x306>
 8000f80:	f001 f832 	bl	8001fe8 <__clzsi2>
 8000f84:	0003      	movs	r3, r0
 8000f86:	001a      	movs	r2, r3
 8000f88:	3215      	adds	r2, #21
 8000f8a:	3020      	adds	r0, #32
 8000f8c:	2a1c      	cmp	r2, #28
 8000f8e:	dc00      	bgt.n	8000f92 <__aeabi_ddiv+0x4b2>
 8000f90:	e700      	b.n	8000d94 <__aeabi_ddiv+0x2b4>
 8000f92:	4654      	mov	r4, sl
 8000f94:	3b08      	subs	r3, #8
 8000f96:	2200      	movs	r2, #0
 8000f98:	409c      	lsls	r4, r3
 8000f9a:	e705      	b.n	8000da8 <__aeabi_ddiv+0x2c8>
 8000f9c:	1936      	adds	r6, r6, r4
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	42b4      	cmp	r4, r6
 8000fa2:	d900      	bls.n	8000fa6 <__aeabi_ddiv+0x4c6>
 8000fa4:	e6a6      	b.n	8000cf4 <__aeabi_ddiv+0x214>
 8000fa6:	42b2      	cmp	r2, r6
 8000fa8:	d800      	bhi.n	8000fac <__aeabi_ddiv+0x4cc>
 8000faa:	e6a3      	b.n	8000cf4 <__aeabi_ddiv+0x214>
 8000fac:	1e83      	subs	r3, r0, #2
 8000fae:	1936      	adds	r6, r6, r4
 8000fb0:	e6a0      	b.n	8000cf4 <__aeabi_ddiv+0x214>
 8000fb2:	1909      	adds	r1, r1, r4
 8000fb4:	3d01      	subs	r5, #1
 8000fb6:	428c      	cmp	r4, r1
 8000fb8:	d900      	bls.n	8000fbc <__aeabi_ddiv+0x4dc>
 8000fba:	e68d      	b.n	8000cd8 <__aeabi_ddiv+0x1f8>
 8000fbc:	428a      	cmp	r2, r1
 8000fbe:	d800      	bhi.n	8000fc2 <__aeabi_ddiv+0x4e2>
 8000fc0:	e68a      	b.n	8000cd8 <__aeabi_ddiv+0x1f8>
 8000fc2:	1e85      	subs	r5, r0, #2
 8000fc4:	1909      	adds	r1, r1, r4
 8000fc6:	e687      	b.n	8000cd8 <__aeabi_ddiv+0x1f8>
 8000fc8:	230f      	movs	r3, #15
 8000fca:	402b      	ands	r3, r5
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_ddiv+0x4f2>
 8000fd0:	e6bc      	b.n	8000d4c <__aeabi_ddiv+0x26c>
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	42ab      	cmp	r3, r5
 8000fd8:	419b      	sbcs	r3, r3
 8000fda:	3504      	adds	r5, #4
 8000fdc:	425b      	negs	r3, r3
 8000fde:	08ed      	lsrs	r5, r5, #3
 8000fe0:	4498      	add	r8, r3
 8000fe2:	e6b4      	b.n	8000d4e <__aeabi_ddiv+0x26e>
 8000fe4:	42af      	cmp	r7, r5
 8000fe6:	d900      	bls.n	8000fea <__aeabi_ddiv+0x50a>
 8000fe8:	e660      	b.n	8000cac <__aeabi_ddiv+0x1cc>
 8000fea:	4282      	cmp	r2, r0
 8000fec:	d804      	bhi.n	8000ff8 <__aeabi_ddiv+0x518>
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_ddiv+0x512>
 8000ff0:	e65c      	b.n	8000cac <__aeabi_ddiv+0x1cc>
 8000ff2:	42ae      	cmp	r6, r5
 8000ff4:	d800      	bhi.n	8000ff8 <__aeabi_ddiv+0x518>
 8000ff6:	e659      	b.n	8000cac <__aeabi_ddiv+0x1cc>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	469c      	mov	ip, r3
 8000ffe:	9b00      	ldr	r3, [sp, #0]
 8001000:	44e0      	add	r8, ip
 8001002:	469c      	mov	ip, r3
 8001004:	4465      	add	r5, ip
 8001006:	429d      	cmp	r5, r3
 8001008:	419b      	sbcs	r3, r3
 800100a:	425b      	negs	r3, r3
 800100c:	191b      	adds	r3, r3, r4
 800100e:	18c0      	adds	r0, r0, r3
 8001010:	e64d      	b.n	8000cae <__aeabi_ddiv+0x1ce>
 8001012:	428a      	cmp	r2, r1
 8001014:	d800      	bhi.n	8001018 <__aeabi_ddiv+0x538>
 8001016:	e60e      	b.n	8000c36 <__aeabi_ddiv+0x156>
 8001018:	1e83      	subs	r3, r0, #2
 800101a:	1909      	adds	r1, r1, r4
 800101c:	e60b      	b.n	8000c36 <__aeabi_ddiv+0x156>
 800101e:	428a      	cmp	r2, r1
 8001020:	d800      	bhi.n	8001024 <__aeabi_ddiv+0x544>
 8001022:	e5f4      	b.n	8000c0e <__aeabi_ddiv+0x12e>
 8001024:	1e83      	subs	r3, r0, #2
 8001026:	4698      	mov	r8, r3
 8001028:	1909      	adds	r1, r1, r4
 800102a:	e5f0      	b.n	8000c0e <__aeabi_ddiv+0x12e>
 800102c:	4925      	ldr	r1, [pc, #148]	; (80010c4 <__aeabi_ddiv+0x5e4>)
 800102e:	0028      	movs	r0, r5
 8001030:	4459      	add	r1, fp
 8001032:	408d      	lsls	r5, r1
 8001034:	4642      	mov	r2, r8
 8001036:	408a      	lsls	r2, r1
 8001038:	1e69      	subs	r1, r5, #1
 800103a:	418d      	sbcs	r5, r1
 800103c:	4641      	mov	r1, r8
 800103e:	40d8      	lsrs	r0, r3
 8001040:	40d9      	lsrs	r1, r3
 8001042:	4302      	orrs	r2, r0
 8001044:	432a      	orrs	r2, r5
 8001046:	000b      	movs	r3, r1
 8001048:	0751      	lsls	r1, r2, #29
 800104a:	d100      	bne.n	800104e <__aeabi_ddiv+0x56e>
 800104c:	e751      	b.n	8000ef2 <__aeabi_ddiv+0x412>
 800104e:	210f      	movs	r1, #15
 8001050:	4011      	ands	r1, r2
 8001052:	2904      	cmp	r1, #4
 8001054:	d000      	beq.n	8001058 <__aeabi_ddiv+0x578>
 8001056:	e746      	b.n	8000ee6 <__aeabi_ddiv+0x406>
 8001058:	e74b      	b.n	8000ef2 <__aeabi_ddiv+0x412>
 800105a:	0005      	movs	r5, r0
 800105c:	428e      	cmp	r6, r1
 800105e:	d000      	beq.n	8001062 <__aeabi_ddiv+0x582>
 8001060:	e66a      	b.n	8000d38 <__aeabi_ddiv+0x258>
 8001062:	9a00      	ldr	r2, [sp, #0]
 8001064:	4293      	cmp	r3, r2
 8001066:	d000      	beq.n	800106a <__aeabi_ddiv+0x58a>
 8001068:	e666      	b.n	8000d38 <__aeabi_ddiv+0x258>
 800106a:	e667      	b.n	8000d3c <__aeabi_ddiv+0x25c>
 800106c:	4a16      	ldr	r2, [pc, #88]	; (80010c8 <__aeabi_ddiv+0x5e8>)
 800106e:	445a      	add	r2, fp
 8001070:	2a00      	cmp	r2, #0
 8001072:	dc00      	bgt.n	8001076 <__aeabi_ddiv+0x596>
 8001074:	e710      	b.n	8000e98 <__aeabi_ddiv+0x3b8>
 8001076:	2301      	movs	r3, #1
 8001078:	2500      	movs	r5, #0
 800107a:	4498      	add	r8, r3
 800107c:	e667      	b.n	8000d4e <__aeabi_ddiv+0x26e>
 800107e:	075d      	lsls	r5, r3, #29
 8001080:	025b      	lsls	r3, r3, #9
 8001082:	0b1c      	lsrs	r4, r3, #12
 8001084:	08d2      	lsrs	r2, r2, #3
 8001086:	2300      	movs	r3, #0
 8001088:	4315      	orrs	r5, r2
 800108a:	e580      	b.n	8000b8e <__aeabi_ddiv+0xae>
 800108c:	9800      	ldr	r0, [sp, #0]
 800108e:	3d02      	subs	r5, #2
 8001090:	0042      	lsls	r2, r0, #1
 8001092:	4282      	cmp	r2, r0
 8001094:	41bf      	sbcs	r7, r7
 8001096:	427f      	negs	r7, r7
 8001098:	193c      	adds	r4, r7, r4
 800109a:	1936      	adds	r6, r6, r4
 800109c:	9200      	str	r2, [sp, #0]
 800109e:	e7dd      	b.n	800105c <__aeabi_ddiv+0x57c>
 80010a0:	2480      	movs	r4, #128	; 0x80
 80010a2:	4643      	mov	r3, r8
 80010a4:	0324      	lsls	r4, r4, #12
 80010a6:	431c      	orrs	r4, r3
 80010a8:	0324      	lsls	r4, r4, #12
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__aeabi_ddiv+0x5dc>)
 80010ac:	0b24      	lsrs	r4, r4, #12
 80010ae:	e56e      	b.n	8000b8e <__aeabi_ddiv+0xae>
 80010b0:	9a00      	ldr	r2, [sp, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d3ea      	bcc.n	800108c <__aeabi_ddiv+0x5ac>
 80010b6:	0005      	movs	r5, r0
 80010b8:	e7d3      	b.n	8001062 <__aeabi_ddiv+0x582>
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	000007ff 	.word	0x000007ff
 80010c0:	0000043e 	.word	0x0000043e
 80010c4:	0000041e 	.word	0x0000041e
 80010c8:	000003ff 	.word	0x000003ff

080010cc <__eqdf2>:
 80010cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ce:	464e      	mov	r6, r9
 80010d0:	4645      	mov	r5, r8
 80010d2:	46de      	mov	lr, fp
 80010d4:	4657      	mov	r7, sl
 80010d6:	4690      	mov	r8, r2
 80010d8:	b5e0      	push	{r5, r6, r7, lr}
 80010da:	0017      	movs	r7, r2
 80010dc:	031a      	lsls	r2, r3, #12
 80010de:	0b12      	lsrs	r2, r2, #12
 80010e0:	0005      	movs	r5, r0
 80010e2:	4684      	mov	ip, r0
 80010e4:	4819      	ldr	r0, [pc, #100]	; (800114c <__eqdf2+0x80>)
 80010e6:	030e      	lsls	r6, r1, #12
 80010e8:	004c      	lsls	r4, r1, #1
 80010ea:	4691      	mov	r9, r2
 80010ec:	005a      	lsls	r2, r3, #1
 80010ee:	0fdb      	lsrs	r3, r3, #31
 80010f0:	469b      	mov	fp, r3
 80010f2:	0b36      	lsrs	r6, r6, #12
 80010f4:	0d64      	lsrs	r4, r4, #21
 80010f6:	0fc9      	lsrs	r1, r1, #31
 80010f8:	0d52      	lsrs	r2, r2, #21
 80010fa:	4284      	cmp	r4, r0
 80010fc:	d019      	beq.n	8001132 <__eqdf2+0x66>
 80010fe:	4282      	cmp	r2, r0
 8001100:	d010      	beq.n	8001124 <__eqdf2+0x58>
 8001102:	2001      	movs	r0, #1
 8001104:	4294      	cmp	r4, r2
 8001106:	d10e      	bne.n	8001126 <__eqdf2+0x5a>
 8001108:	454e      	cmp	r6, r9
 800110a:	d10c      	bne.n	8001126 <__eqdf2+0x5a>
 800110c:	2001      	movs	r0, #1
 800110e:	45c4      	cmp	ip, r8
 8001110:	d109      	bne.n	8001126 <__eqdf2+0x5a>
 8001112:	4559      	cmp	r1, fp
 8001114:	d017      	beq.n	8001146 <__eqdf2+0x7a>
 8001116:	2c00      	cmp	r4, #0
 8001118:	d105      	bne.n	8001126 <__eqdf2+0x5a>
 800111a:	0030      	movs	r0, r6
 800111c:	4328      	orrs	r0, r5
 800111e:	1e43      	subs	r3, r0, #1
 8001120:	4198      	sbcs	r0, r3
 8001122:	e000      	b.n	8001126 <__eqdf2+0x5a>
 8001124:	2001      	movs	r0, #1
 8001126:	bcf0      	pop	{r4, r5, r6, r7}
 8001128:	46bb      	mov	fp, r7
 800112a:	46b2      	mov	sl, r6
 800112c:	46a9      	mov	r9, r5
 800112e:	46a0      	mov	r8, r4
 8001130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001132:	0033      	movs	r3, r6
 8001134:	2001      	movs	r0, #1
 8001136:	432b      	orrs	r3, r5
 8001138:	d1f5      	bne.n	8001126 <__eqdf2+0x5a>
 800113a:	42a2      	cmp	r2, r4
 800113c:	d1f3      	bne.n	8001126 <__eqdf2+0x5a>
 800113e:	464b      	mov	r3, r9
 8001140:	433b      	orrs	r3, r7
 8001142:	d1f0      	bne.n	8001126 <__eqdf2+0x5a>
 8001144:	e7e2      	b.n	800110c <__eqdf2+0x40>
 8001146:	2000      	movs	r0, #0
 8001148:	e7ed      	b.n	8001126 <__eqdf2+0x5a>
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	000007ff 	.word	0x000007ff

08001150 <__gedf2>:
 8001150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001152:	4647      	mov	r7, r8
 8001154:	46ce      	mov	lr, r9
 8001156:	0004      	movs	r4, r0
 8001158:	0018      	movs	r0, r3
 800115a:	0016      	movs	r6, r2
 800115c:	031b      	lsls	r3, r3, #12
 800115e:	0b1b      	lsrs	r3, r3, #12
 8001160:	4d2d      	ldr	r5, [pc, #180]	; (8001218 <__gedf2+0xc8>)
 8001162:	004a      	lsls	r2, r1, #1
 8001164:	4699      	mov	r9, r3
 8001166:	b580      	push	{r7, lr}
 8001168:	0043      	lsls	r3, r0, #1
 800116a:	030f      	lsls	r7, r1, #12
 800116c:	46a4      	mov	ip, r4
 800116e:	46b0      	mov	r8, r6
 8001170:	0b3f      	lsrs	r7, r7, #12
 8001172:	0d52      	lsrs	r2, r2, #21
 8001174:	0fc9      	lsrs	r1, r1, #31
 8001176:	0d5b      	lsrs	r3, r3, #21
 8001178:	0fc0      	lsrs	r0, r0, #31
 800117a:	42aa      	cmp	r2, r5
 800117c:	d021      	beq.n	80011c2 <__gedf2+0x72>
 800117e:	42ab      	cmp	r3, r5
 8001180:	d013      	beq.n	80011aa <__gedf2+0x5a>
 8001182:	2a00      	cmp	r2, #0
 8001184:	d122      	bne.n	80011cc <__gedf2+0x7c>
 8001186:	433c      	orrs	r4, r7
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <__gedf2+0x42>
 800118c:	464d      	mov	r5, r9
 800118e:	432e      	orrs	r6, r5
 8001190:	d022      	beq.n	80011d8 <__gedf2+0x88>
 8001192:	2c00      	cmp	r4, #0
 8001194:	d010      	beq.n	80011b8 <__gedf2+0x68>
 8001196:	4281      	cmp	r1, r0
 8001198:	d022      	beq.n	80011e0 <__gedf2+0x90>
 800119a:	2002      	movs	r0, #2
 800119c:	3901      	subs	r1, #1
 800119e:	4008      	ands	r0, r1
 80011a0:	3801      	subs	r0, #1
 80011a2:	bcc0      	pop	{r6, r7}
 80011a4:	46b9      	mov	r9, r7
 80011a6:	46b0      	mov	r8, r6
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011aa:	464d      	mov	r5, r9
 80011ac:	432e      	orrs	r6, r5
 80011ae:	d129      	bne.n	8001204 <__gedf2+0xb4>
 80011b0:	2a00      	cmp	r2, #0
 80011b2:	d1f0      	bne.n	8001196 <__gedf2+0x46>
 80011b4:	433c      	orrs	r4, r7
 80011b6:	d1ee      	bne.n	8001196 <__gedf2+0x46>
 80011b8:	2800      	cmp	r0, #0
 80011ba:	d1f2      	bne.n	80011a2 <__gedf2+0x52>
 80011bc:	2001      	movs	r0, #1
 80011be:	4240      	negs	r0, r0
 80011c0:	e7ef      	b.n	80011a2 <__gedf2+0x52>
 80011c2:	003d      	movs	r5, r7
 80011c4:	4325      	orrs	r5, r4
 80011c6:	d11d      	bne.n	8001204 <__gedf2+0xb4>
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d0ee      	beq.n	80011aa <__gedf2+0x5a>
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1e2      	bne.n	8001196 <__gedf2+0x46>
 80011d0:	464c      	mov	r4, r9
 80011d2:	4326      	orrs	r6, r4
 80011d4:	d1df      	bne.n	8001196 <__gedf2+0x46>
 80011d6:	e7e0      	b.n	800119a <__gedf2+0x4a>
 80011d8:	2000      	movs	r0, #0
 80011da:	2c00      	cmp	r4, #0
 80011dc:	d0e1      	beq.n	80011a2 <__gedf2+0x52>
 80011de:	e7dc      	b.n	800119a <__gedf2+0x4a>
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dc0a      	bgt.n	80011fa <__gedf2+0xaa>
 80011e4:	dbe8      	blt.n	80011b8 <__gedf2+0x68>
 80011e6:	454f      	cmp	r7, r9
 80011e8:	d8d7      	bhi.n	800119a <__gedf2+0x4a>
 80011ea:	d00e      	beq.n	800120a <__gedf2+0xba>
 80011ec:	2000      	movs	r0, #0
 80011ee:	454f      	cmp	r7, r9
 80011f0:	d2d7      	bcs.n	80011a2 <__gedf2+0x52>
 80011f2:	2900      	cmp	r1, #0
 80011f4:	d0e2      	beq.n	80011bc <__gedf2+0x6c>
 80011f6:	0008      	movs	r0, r1
 80011f8:	e7d3      	b.n	80011a2 <__gedf2+0x52>
 80011fa:	4243      	negs	r3, r0
 80011fc:	4158      	adcs	r0, r3
 80011fe:	0040      	lsls	r0, r0, #1
 8001200:	3801      	subs	r0, #1
 8001202:	e7ce      	b.n	80011a2 <__gedf2+0x52>
 8001204:	2002      	movs	r0, #2
 8001206:	4240      	negs	r0, r0
 8001208:	e7cb      	b.n	80011a2 <__gedf2+0x52>
 800120a:	45c4      	cmp	ip, r8
 800120c:	d8c5      	bhi.n	800119a <__gedf2+0x4a>
 800120e:	2000      	movs	r0, #0
 8001210:	45c4      	cmp	ip, r8
 8001212:	d2c6      	bcs.n	80011a2 <__gedf2+0x52>
 8001214:	e7ed      	b.n	80011f2 <__gedf2+0xa2>
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	000007ff 	.word	0x000007ff

0800121c <__ledf2>:
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	0004      	movs	r4, r0
 8001224:	0018      	movs	r0, r3
 8001226:	0016      	movs	r6, r2
 8001228:	031b      	lsls	r3, r3, #12
 800122a:	0b1b      	lsrs	r3, r3, #12
 800122c:	4d2c      	ldr	r5, [pc, #176]	; (80012e0 <__ledf2+0xc4>)
 800122e:	004a      	lsls	r2, r1, #1
 8001230:	4699      	mov	r9, r3
 8001232:	b580      	push	{r7, lr}
 8001234:	0043      	lsls	r3, r0, #1
 8001236:	030f      	lsls	r7, r1, #12
 8001238:	46a4      	mov	ip, r4
 800123a:	46b0      	mov	r8, r6
 800123c:	0b3f      	lsrs	r7, r7, #12
 800123e:	0d52      	lsrs	r2, r2, #21
 8001240:	0fc9      	lsrs	r1, r1, #31
 8001242:	0d5b      	lsrs	r3, r3, #21
 8001244:	0fc0      	lsrs	r0, r0, #31
 8001246:	42aa      	cmp	r2, r5
 8001248:	d00d      	beq.n	8001266 <__ledf2+0x4a>
 800124a:	42ab      	cmp	r3, r5
 800124c:	d010      	beq.n	8001270 <__ledf2+0x54>
 800124e:	2a00      	cmp	r2, #0
 8001250:	d127      	bne.n	80012a2 <__ledf2+0x86>
 8001252:	433c      	orrs	r4, r7
 8001254:	2b00      	cmp	r3, #0
 8001256:	d111      	bne.n	800127c <__ledf2+0x60>
 8001258:	464d      	mov	r5, r9
 800125a:	432e      	orrs	r6, r5
 800125c:	d10e      	bne.n	800127c <__ledf2+0x60>
 800125e:	2000      	movs	r0, #0
 8001260:	2c00      	cmp	r4, #0
 8001262:	d015      	beq.n	8001290 <__ledf2+0x74>
 8001264:	e00e      	b.n	8001284 <__ledf2+0x68>
 8001266:	003d      	movs	r5, r7
 8001268:	4325      	orrs	r5, r4
 800126a:	d110      	bne.n	800128e <__ledf2+0x72>
 800126c:	4293      	cmp	r3, r2
 800126e:	d118      	bne.n	80012a2 <__ledf2+0x86>
 8001270:	464d      	mov	r5, r9
 8001272:	432e      	orrs	r6, r5
 8001274:	d10b      	bne.n	800128e <__ledf2+0x72>
 8001276:	2a00      	cmp	r2, #0
 8001278:	d102      	bne.n	8001280 <__ledf2+0x64>
 800127a:	433c      	orrs	r4, r7
 800127c:	2c00      	cmp	r4, #0
 800127e:	d00b      	beq.n	8001298 <__ledf2+0x7c>
 8001280:	4281      	cmp	r1, r0
 8001282:	d014      	beq.n	80012ae <__ledf2+0x92>
 8001284:	2002      	movs	r0, #2
 8001286:	3901      	subs	r1, #1
 8001288:	4008      	ands	r0, r1
 800128a:	3801      	subs	r0, #1
 800128c:	e000      	b.n	8001290 <__ledf2+0x74>
 800128e:	2002      	movs	r0, #2
 8001290:	bcc0      	pop	{r6, r7}
 8001292:	46b9      	mov	r9, r7
 8001294:	46b0      	mov	r8, r6
 8001296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001298:	2800      	cmp	r0, #0
 800129a:	d1f9      	bne.n	8001290 <__ledf2+0x74>
 800129c:	2001      	movs	r0, #1
 800129e:	4240      	negs	r0, r0
 80012a0:	e7f6      	b.n	8001290 <__ledf2+0x74>
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1ec      	bne.n	8001280 <__ledf2+0x64>
 80012a6:	464c      	mov	r4, r9
 80012a8:	4326      	orrs	r6, r4
 80012aa:	d1e9      	bne.n	8001280 <__ledf2+0x64>
 80012ac:	e7ea      	b.n	8001284 <__ledf2+0x68>
 80012ae:	429a      	cmp	r2, r3
 80012b0:	dd04      	ble.n	80012bc <__ledf2+0xa0>
 80012b2:	4243      	negs	r3, r0
 80012b4:	4158      	adcs	r0, r3
 80012b6:	0040      	lsls	r0, r0, #1
 80012b8:	3801      	subs	r0, #1
 80012ba:	e7e9      	b.n	8001290 <__ledf2+0x74>
 80012bc:	429a      	cmp	r2, r3
 80012be:	dbeb      	blt.n	8001298 <__ledf2+0x7c>
 80012c0:	454f      	cmp	r7, r9
 80012c2:	d8df      	bhi.n	8001284 <__ledf2+0x68>
 80012c4:	d006      	beq.n	80012d4 <__ledf2+0xb8>
 80012c6:	2000      	movs	r0, #0
 80012c8:	454f      	cmp	r7, r9
 80012ca:	d2e1      	bcs.n	8001290 <__ledf2+0x74>
 80012cc:	2900      	cmp	r1, #0
 80012ce:	d0e5      	beq.n	800129c <__ledf2+0x80>
 80012d0:	0008      	movs	r0, r1
 80012d2:	e7dd      	b.n	8001290 <__ledf2+0x74>
 80012d4:	45c4      	cmp	ip, r8
 80012d6:	d8d5      	bhi.n	8001284 <__ledf2+0x68>
 80012d8:	2000      	movs	r0, #0
 80012da:	45c4      	cmp	ip, r8
 80012dc:	d2d8      	bcs.n	8001290 <__ledf2+0x74>
 80012de:	e7f5      	b.n	80012cc <__ledf2+0xb0>
 80012e0:	000007ff 	.word	0x000007ff

080012e4 <__aeabi_dmul>:
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	4657      	mov	r7, sl
 80012e8:	464e      	mov	r6, r9
 80012ea:	4645      	mov	r5, r8
 80012ec:	46de      	mov	lr, fp
 80012ee:	b5e0      	push	{r5, r6, r7, lr}
 80012f0:	4698      	mov	r8, r3
 80012f2:	030c      	lsls	r4, r1, #12
 80012f4:	004b      	lsls	r3, r1, #1
 80012f6:	0006      	movs	r6, r0
 80012f8:	4692      	mov	sl, r2
 80012fa:	b087      	sub	sp, #28
 80012fc:	0b24      	lsrs	r4, r4, #12
 80012fe:	0d5b      	lsrs	r3, r3, #21
 8001300:	0fcf      	lsrs	r7, r1, #31
 8001302:	2b00      	cmp	r3, #0
 8001304:	d100      	bne.n	8001308 <__aeabi_dmul+0x24>
 8001306:	e15c      	b.n	80015c2 <__aeabi_dmul+0x2de>
 8001308:	4ad9      	ldr	r2, [pc, #868]	; (8001670 <__aeabi_dmul+0x38c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d100      	bne.n	8001310 <__aeabi_dmul+0x2c>
 800130e:	e175      	b.n	80015fc <__aeabi_dmul+0x318>
 8001310:	0f42      	lsrs	r2, r0, #29
 8001312:	00e4      	lsls	r4, r4, #3
 8001314:	4314      	orrs	r4, r2
 8001316:	2280      	movs	r2, #128	; 0x80
 8001318:	0412      	lsls	r2, r2, #16
 800131a:	4314      	orrs	r4, r2
 800131c:	4ad5      	ldr	r2, [pc, #852]	; (8001674 <__aeabi_dmul+0x390>)
 800131e:	00c5      	lsls	r5, r0, #3
 8001320:	4694      	mov	ip, r2
 8001322:	4463      	add	r3, ip
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2300      	movs	r3, #0
 8001328:	4699      	mov	r9, r3
 800132a:	469b      	mov	fp, r3
 800132c:	4643      	mov	r3, r8
 800132e:	4642      	mov	r2, r8
 8001330:	031e      	lsls	r6, r3, #12
 8001332:	0fd2      	lsrs	r2, r2, #31
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4650      	mov	r0, sl
 8001338:	4690      	mov	r8, r2
 800133a:	0b36      	lsrs	r6, r6, #12
 800133c:	0d5b      	lsrs	r3, r3, #21
 800133e:	d100      	bne.n	8001342 <__aeabi_dmul+0x5e>
 8001340:	e120      	b.n	8001584 <__aeabi_dmul+0x2a0>
 8001342:	4acb      	ldr	r2, [pc, #812]	; (8001670 <__aeabi_dmul+0x38c>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d100      	bne.n	800134a <__aeabi_dmul+0x66>
 8001348:	e162      	b.n	8001610 <__aeabi_dmul+0x32c>
 800134a:	49ca      	ldr	r1, [pc, #808]	; (8001674 <__aeabi_dmul+0x390>)
 800134c:	0f42      	lsrs	r2, r0, #29
 800134e:	468c      	mov	ip, r1
 8001350:	9900      	ldr	r1, [sp, #0]
 8001352:	4463      	add	r3, ip
 8001354:	00f6      	lsls	r6, r6, #3
 8001356:	468c      	mov	ip, r1
 8001358:	4316      	orrs	r6, r2
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	449c      	add	ip, r3
 800135e:	0412      	lsls	r2, r2, #16
 8001360:	4663      	mov	r3, ip
 8001362:	4316      	orrs	r6, r2
 8001364:	00c2      	lsls	r2, r0, #3
 8001366:	2000      	movs	r0, #0
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	9900      	ldr	r1, [sp, #0]
 800136c:	4643      	mov	r3, r8
 800136e:	3101      	adds	r1, #1
 8001370:	468c      	mov	ip, r1
 8001372:	4649      	mov	r1, r9
 8001374:	407b      	eors	r3, r7
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	290f      	cmp	r1, #15
 800137a:	d826      	bhi.n	80013ca <__aeabi_dmul+0xe6>
 800137c:	4bbe      	ldr	r3, [pc, #760]	; (8001678 <__aeabi_dmul+0x394>)
 800137e:	0089      	lsls	r1, r1, #2
 8001380:	5859      	ldr	r1, [r3, r1]
 8001382:	468f      	mov	pc, r1
 8001384:	4643      	mov	r3, r8
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	0034      	movs	r4, r6
 800138a:	0015      	movs	r5, r2
 800138c:	4683      	mov	fp, r0
 800138e:	465b      	mov	r3, fp
 8001390:	2b02      	cmp	r3, #2
 8001392:	d016      	beq.n	80013c2 <__aeabi_dmul+0xde>
 8001394:	2b03      	cmp	r3, #3
 8001396:	d100      	bne.n	800139a <__aeabi_dmul+0xb6>
 8001398:	e203      	b.n	80017a2 <__aeabi_dmul+0x4be>
 800139a:	2b01      	cmp	r3, #1
 800139c:	d000      	beq.n	80013a0 <__aeabi_dmul+0xbc>
 800139e:	e0cd      	b.n	800153c <__aeabi_dmul+0x258>
 80013a0:	2200      	movs	r2, #0
 80013a2:	2400      	movs	r4, #0
 80013a4:	2500      	movs	r5, #0
 80013a6:	9b01      	ldr	r3, [sp, #4]
 80013a8:	0512      	lsls	r2, r2, #20
 80013aa:	4322      	orrs	r2, r4
 80013ac:	07db      	lsls	r3, r3, #31
 80013ae:	431a      	orrs	r2, r3
 80013b0:	0028      	movs	r0, r5
 80013b2:	0011      	movs	r1, r2
 80013b4:	b007      	add	sp, #28
 80013b6:	bcf0      	pop	{r4, r5, r6, r7}
 80013b8:	46bb      	mov	fp, r7
 80013ba:	46b2      	mov	sl, r6
 80013bc:	46a9      	mov	r9, r5
 80013be:	46a0      	mov	r8, r4
 80013c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c2:	2400      	movs	r4, #0
 80013c4:	2500      	movs	r5, #0
 80013c6:	4aaa      	ldr	r2, [pc, #680]	; (8001670 <__aeabi_dmul+0x38c>)
 80013c8:	e7ed      	b.n	80013a6 <__aeabi_dmul+0xc2>
 80013ca:	0c28      	lsrs	r0, r5, #16
 80013cc:	042d      	lsls	r5, r5, #16
 80013ce:	0c2d      	lsrs	r5, r5, #16
 80013d0:	002b      	movs	r3, r5
 80013d2:	0c11      	lsrs	r1, r2, #16
 80013d4:	0412      	lsls	r2, r2, #16
 80013d6:	0c12      	lsrs	r2, r2, #16
 80013d8:	4353      	muls	r3, r2
 80013da:	4698      	mov	r8, r3
 80013dc:	0013      	movs	r3, r2
 80013de:	002f      	movs	r7, r5
 80013e0:	4343      	muls	r3, r0
 80013e2:	4699      	mov	r9, r3
 80013e4:	434f      	muls	r7, r1
 80013e6:	444f      	add	r7, r9
 80013e8:	46bb      	mov	fp, r7
 80013ea:	4647      	mov	r7, r8
 80013ec:	000b      	movs	r3, r1
 80013ee:	0c3f      	lsrs	r7, r7, #16
 80013f0:	46ba      	mov	sl, r7
 80013f2:	4343      	muls	r3, r0
 80013f4:	44da      	add	sl, fp
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	45d1      	cmp	r9, sl
 80013fa:	d904      	bls.n	8001406 <__aeabi_dmul+0x122>
 80013fc:	2780      	movs	r7, #128	; 0x80
 80013fe:	027f      	lsls	r7, r7, #9
 8001400:	46b9      	mov	r9, r7
 8001402:	444b      	add	r3, r9
 8001404:	9302      	str	r3, [sp, #8]
 8001406:	4653      	mov	r3, sl
 8001408:	0c1b      	lsrs	r3, r3, #16
 800140a:	469b      	mov	fp, r3
 800140c:	4653      	mov	r3, sl
 800140e:	041f      	lsls	r7, r3, #16
 8001410:	4643      	mov	r3, r8
 8001412:	041b      	lsls	r3, r3, #16
 8001414:	0c1b      	lsrs	r3, r3, #16
 8001416:	4698      	mov	r8, r3
 8001418:	003b      	movs	r3, r7
 800141a:	4443      	add	r3, r8
 800141c:	9304      	str	r3, [sp, #16]
 800141e:	0c33      	lsrs	r3, r6, #16
 8001420:	0436      	lsls	r6, r6, #16
 8001422:	0c36      	lsrs	r6, r6, #16
 8001424:	4698      	mov	r8, r3
 8001426:	0033      	movs	r3, r6
 8001428:	4343      	muls	r3, r0
 800142a:	4699      	mov	r9, r3
 800142c:	4643      	mov	r3, r8
 800142e:	4343      	muls	r3, r0
 8001430:	002f      	movs	r7, r5
 8001432:	469a      	mov	sl, r3
 8001434:	4643      	mov	r3, r8
 8001436:	4377      	muls	r7, r6
 8001438:	435d      	muls	r5, r3
 800143a:	0c38      	lsrs	r0, r7, #16
 800143c:	444d      	add	r5, r9
 800143e:	1945      	adds	r5, r0, r5
 8001440:	45a9      	cmp	r9, r5
 8001442:	d903      	bls.n	800144c <__aeabi_dmul+0x168>
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	025b      	lsls	r3, r3, #9
 8001448:	4699      	mov	r9, r3
 800144a:	44ca      	add	sl, r9
 800144c:	043f      	lsls	r7, r7, #16
 800144e:	0c28      	lsrs	r0, r5, #16
 8001450:	0c3f      	lsrs	r7, r7, #16
 8001452:	042d      	lsls	r5, r5, #16
 8001454:	19ed      	adds	r5, r5, r7
 8001456:	0c27      	lsrs	r7, r4, #16
 8001458:	0424      	lsls	r4, r4, #16
 800145a:	0c24      	lsrs	r4, r4, #16
 800145c:	0003      	movs	r3, r0
 800145e:	0020      	movs	r0, r4
 8001460:	4350      	muls	r0, r2
 8001462:	437a      	muls	r2, r7
 8001464:	4691      	mov	r9, r2
 8001466:	003a      	movs	r2, r7
 8001468:	4453      	add	r3, sl
 800146a:	9305      	str	r3, [sp, #20]
 800146c:	0c03      	lsrs	r3, r0, #16
 800146e:	469a      	mov	sl, r3
 8001470:	434a      	muls	r2, r1
 8001472:	4361      	muls	r1, r4
 8001474:	4449      	add	r1, r9
 8001476:	4451      	add	r1, sl
 8001478:	44ab      	add	fp, r5
 800147a:	4589      	cmp	r9, r1
 800147c:	d903      	bls.n	8001486 <__aeabi_dmul+0x1a2>
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	025b      	lsls	r3, r3, #9
 8001482:	4699      	mov	r9, r3
 8001484:	444a      	add	r2, r9
 8001486:	0400      	lsls	r0, r0, #16
 8001488:	0c0b      	lsrs	r3, r1, #16
 800148a:	0c00      	lsrs	r0, r0, #16
 800148c:	0409      	lsls	r1, r1, #16
 800148e:	1809      	adds	r1, r1, r0
 8001490:	0020      	movs	r0, r4
 8001492:	4699      	mov	r9, r3
 8001494:	4643      	mov	r3, r8
 8001496:	4370      	muls	r0, r6
 8001498:	435c      	muls	r4, r3
 800149a:	437e      	muls	r6, r7
 800149c:	435f      	muls	r7, r3
 800149e:	0c03      	lsrs	r3, r0, #16
 80014a0:	4698      	mov	r8, r3
 80014a2:	19a4      	adds	r4, r4, r6
 80014a4:	4444      	add	r4, r8
 80014a6:	444a      	add	r2, r9
 80014a8:	9703      	str	r7, [sp, #12]
 80014aa:	42a6      	cmp	r6, r4
 80014ac:	d904      	bls.n	80014b8 <__aeabi_dmul+0x1d4>
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	025b      	lsls	r3, r3, #9
 80014b2:	4698      	mov	r8, r3
 80014b4:	4447      	add	r7, r8
 80014b6:	9703      	str	r7, [sp, #12]
 80014b8:	0423      	lsls	r3, r4, #16
 80014ba:	9e02      	ldr	r6, [sp, #8]
 80014bc:	469a      	mov	sl, r3
 80014be:	9b05      	ldr	r3, [sp, #20]
 80014c0:	445e      	add	r6, fp
 80014c2:	4698      	mov	r8, r3
 80014c4:	42ae      	cmp	r6, r5
 80014c6:	41ad      	sbcs	r5, r5
 80014c8:	1876      	adds	r6, r6, r1
 80014ca:	428e      	cmp	r6, r1
 80014cc:	4189      	sbcs	r1, r1
 80014ce:	0400      	lsls	r0, r0, #16
 80014d0:	0c00      	lsrs	r0, r0, #16
 80014d2:	4450      	add	r0, sl
 80014d4:	4440      	add	r0, r8
 80014d6:	426d      	negs	r5, r5
 80014d8:	1947      	adds	r7, r0, r5
 80014da:	46b8      	mov	r8, r7
 80014dc:	4693      	mov	fp, r2
 80014de:	4249      	negs	r1, r1
 80014e0:	4689      	mov	r9, r1
 80014e2:	44c3      	add	fp, r8
 80014e4:	44d9      	add	r9, fp
 80014e6:	4298      	cmp	r0, r3
 80014e8:	4180      	sbcs	r0, r0
 80014ea:	45a8      	cmp	r8, r5
 80014ec:	41ad      	sbcs	r5, r5
 80014ee:	4593      	cmp	fp, r2
 80014f0:	4192      	sbcs	r2, r2
 80014f2:	4589      	cmp	r9, r1
 80014f4:	4189      	sbcs	r1, r1
 80014f6:	426d      	negs	r5, r5
 80014f8:	4240      	negs	r0, r0
 80014fa:	4328      	orrs	r0, r5
 80014fc:	0c24      	lsrs	r4, r4, #16
 80014fe:	4252      	negs	r2, r2
 8001500:	4249      	negs	r1, r1
 8001502:	430a      	orrs	r2, r1
 8001504:	9b03      	ldr	r3, [sp, #12]
 8001506:	1900      	adds	r0, r0, r4
 8001508:	1880      	adds	r0, r0, r2
 800150a:	18c7      	adds	r7, r0, r3
 800150c:	464b      	mov	r3, r9
 800150e:	0ddc      	lsrs	r4, r3, #23
 8001510:	9b04      	ldr	r3, [sp, #16]
 8001512:	0275      	lsls	r5, r6, #9
 8001514:	431d      	orrs	r5, r3
 8001516:	1e6a      	subs	r2, r5, #1
 8001518:	4195      	sbcs	r5, r2
 800151a:	464b      	mov	r3, r9
 800151c:	0df6      	lsrs	r6, r6, #23
 800151e:	027f      	lsls	r7, r7, #9
 8001520:	4335      	orrs	r5, r6
 8001522:	025a      	lsls	r2, r3, #9
 8001524:	433c      	orrs	r4, r7
 8001526:	4315      	orrs	r5, r2
 8001528:	01fb      	lsls	r3, r7, #7
 800152a:	d400      	bmi.n	800152e <__aeabi_dmul+0x24a>
 800152c:	e11c      	b.n	8001768 <__aeabi_dmul+0x484>
 800152e:	2101      	movs	r1, #1
 8001530:	086a      	lsrs	r2, r5, #1
 8001532:	400d      	ands	r5, r1
 8001534:	4315      	orrs	r5, r2
 8001536:	07e2      	lsls	r2, r4, #31
 8001538:	4315      	orrs	r5, r2
 800153a:	0864      	lsrs	r4, r4, #1
 800153c:	494f      	ldr	r1, [pc, #316]	; (800167c <__aeabi_dmul+0x398>)
 800153e:	4461      	add	r1, ip
 8001540:	2900      	cmp	r1, #0
 8001542:	dc00      	bgt.n	8001546 <__aeabi_dmul+0x262>
 8001544:	e0b0      	b.n	80016a8 <__aeabi_dmul+0x3c4>
 8001546:	076b      	lsls	r3, r5, #29
 8001548:	d009      	beq.n	800155e <__aeabi_dmul+0x27a>
 800154a:	220f      	movs	r2, #15
 800154c:	402a      	ands	r2, r5
 800154e:	2a04      	cmp	r2, #4
 8001550:	d005      	beq.n	800155e <__aeabi_dmul+0x27a>
 8001552:	1d2a      	adds	r2, r5, #4
 8001554:	42aa      	cmp	r2, r5
 8001556:	41ad      	sbcs	r5, r5
 8001558:	426d      	negs	r5, r5
 800155a:	1964      	adds	r4, r4, r5
 800155c:	0015      	movs	r5, r2
 800155e:	01e3      	lsls	r3, r4, #7
 8001560:	d504      	bpl.n	800156c <__aeabi_dmul+0x288>
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	4a46      	ldr	r2, [pc, #280]	; (8001680 <__aeabi_dmul+0x39c>)
 8001566:	00c9      	lsls	r1, r1, #3
 8001568:	4014      	ands	r4, r2
 800156a:	4461      	add	r1, ip
 800156c:	4a45      	ldr	r2, [pc, #276]	; (8001684 <__aeabi_dmul+0x3a0>)
 800156e:	4291      	cmp	r1, r2
 8001570:	dd00      	ble.n	8001574 <__aeabi_dmul+0x290>
 8001572:	e726      	b.n	80013c2 <__aeabi_dmul+0xde>
 8001574:	0762      	lsls	r2, r4, #29
 8001576:	08ed      	lsrs	r5, r5, #3
 8001578:	0264      	lsls	r4, r4, #9
 800157a:	0549      	lsls	r1, r1, #21
 800157c:	4315      	orrs	r5, r2
 800157e:	0b24      	lsrs	r4, r4, #12
 8001580:	0d4a      	lsrs	r2, r1, #21
 8001582:	e710      	b.n	80013a6 <__aeabi_dmul+0xc2>
 8001584:	4652      	mov	r2, sl
 8001586:	4332      	orrs	r2, r6
 8001588:	d100      	bne.n	800158c <__aeabi_dmul+0x2a8>
 800158a:	e07f      	b.n	800168c <__aeabi_dmul+0x3a8>
 800158c:	2e00      	cmp	r6, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dmul+0x2ae>
 8001590:	e0dc      	b.n	800174c <__aeabi_dmul+0x468>
 8001592:	0030      	movs	r0, r6
 8001594:	f000 fd28 	bl	8001fe8 <__clzsi2>
 8001598:	0002      	movs	r2, r0
 800159a:	3a0b      	subs	r2, #11
 800159c:	231d      	movs	r3, #29
 800159e:	0001      	movs	r1, r0
 80015a0:	1a9b      	subs	r3, r3, r2
 80015a2:	4652      	mov	r2, sl
 80015a4:	3908      	subs	r1, #8
 80015a6:	40da      	lsrs	r2, r3
 80015a8:	408e      	lsls	r6, r1
 80015aa:	4316      	orrs	r6, r2
 80015ac:	4652      	mov	r2, sl
 80015ae:	408a      	lsls	r2, r1
 80015b0:	9b00      	ldr	r3, [sp, #0]
 80015b2:	4935      	ldr	r1, [pc, #212]	; (8001688 <__aeabi_dmul+0x3a4>)
 80015b4:	1a18      	subs	r0, r3, r0
 80015b6:	0003      	movs	r3, r0
 80015b8:	468c      	mov	ip, r1
 80015ba:	4463      	add	r3, ip
 80015bc:	2000      	movs	r0, #0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	e6d3      	b.n	800136a <__aeabi_dmul+0x86>
 80015c2:	0025      	movs	r5, r4
 80015c4:	4305      	orrs	r5, r0
 80015c6:	d04a      	beq.n	800165e <__aeabi_dmul+0x37a>
 80015c8:	2c00      	cmp	r4, #0
 80015ca:	d100      	bne.n	80015ce <__aeabi_dmul+0x2ea>
 80015cc:	e0b0      	b.n	8001730 <__aeabi_dmul+0x44c>
 80015ce:	0020      	movs	r0, r4
 80015d0:	f000 fd0a 	bl	8001fe8 <__clzsi2>
 80015d4:	0001      	movs	r1, r0
 80015d6:	0002      	movs	r2, r0
 80015d8:	390b      	subs	r1, #11
 80015da:	231d      	movs	r3, #29
 80015dc:	0010      	movs	r0, r2
 80015de:	1a5b      	subs	r3, r3, r1
 80015e0:	0031      	movs	r1, r6
 80015e2:	0035      	movs	r5, r6
 80015e4:	3808      	subs	r0, #8
 80015e6:	4084      	lsls	r4, r0
 80015e8:	40d9      	lsrs	r1, r3
 80015ea:	4085      	lsls	r5, r0
 80015ec:	430c      	orrs	r4, r1
 80015ee:	4826      	ldr	r0, [pc, #152]	; (8001688 <__aeabi_dmul+0x3a4>)
 80015f0:	1a83      	subs	r3, r0, r2
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2300      	movs	r3, #0
 80015f6:	4699      	mov	r9, r3
 80015f8:	469b      	mov	fp, r3
 80015fa:	e697      	b.n	800132c <__aeabi_dmul+0x48>
 80015fc:	0005      	movs	r5, r0
 80015fe:	4325      	orrs	r5, r4
 8001600:	d126      	bne.n	8001650 <__aeabi_dmul+0x36c>
 8001602:	2208      	movs	r2, #8
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2302      	movs	r3, #2
 8001608:	2400      	movs	r4, #0
 800160a:	4691      	mov	r9, r2
 800160c:	469b      	mov	fp, r3
 800160e:	e68d      	b.n	800132c <__aeabi_dmul+0x48>
 8001610:	4652      	mov	r2, sl
 8001612:	9b00      	ldr	r3, [sp, #0]
 8001614:	4332      	orrs	r2, r6
 8001616:	d110      	bne.n	800163a <__aeabi_dmul+0x356>
 8001618:	4915      	ldr	r1, [pc, #84]	; (8001670 <__aeabi_dmul+0x38c>)
 800161a:	2600      	movs	r6, #0
 800161c:	468c      	mov	ip, r1
 800161e:	4463      	add	r3, ip
 8001620:	4649      	mov	r1, r9
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2302      	movs	r3, #2
 8001626:	4319      	orrs	r1, r3
 8001628:	4689      	mov	r9, r1
 800162a:	2002      	movs	r0, #2
 800162c:	e69d      	b.n	800136a <__aeabi_dmul+0x86>
 800162e:	465b      	mov	r3, fp
 8001630:	9701      	str	r7, [sp, #4]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d000      	beq.n	8001638 <__aeabi_dmul+0x354>
 8001636:	e6ad      	b.n	8001394 <__aeabi_dmul+0xb0>
 8001638:	e6c3      	b.n	80013c2 <__aeabi_dmul+0xde>
 800163a:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <__aeabi_dmul+0x38c>)
 800163c:	2003      	movs	r0, #3
 800163e:	4694      	mov	ip, r2
 8001640:	4463      	add	r3, ip
 8001642:	464a      	mov	r2, r9
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2303      	movs	r3, #3
 8001648:	431a      	orrs	r2, r3
 800164a:	4691      	mov	r9, r2
 800164c:	4652      	mov	r2, sl
 800164e:	e68c      	b.n	800136a <__aeabi_dmul+0x86>
 8001650:	220c      	movs	r2, #12
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2303      	movs	r3, #3
 8001656:	0005      	movs	r5, r0
 8001658:	4691      	mov	r9, r2
 800165a:	469b      	mov	fp, r3
 800165c:	e666      	b.n	800132c <__aeabi_dmul+0x48>
 800165e:	2304      	movs	r3, #4
 8001660:	4699      	mov	r9, r3
 8001662:	2300      	movs	r3, #0
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	2400      	movs	r4, #0
 800166a:	469b      	mov	fp, r3
 800166c:	e65e      	b.n	800132c <__aeabi_dmul+0x48>
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	000007ff 	.word	0x000007ff
 8001674:	fffffc01 	.word	0xfffffc01
 8001678:	080061ec 	.word	0x080061ec
 800167c:	000003ff 	.word	0x000003ff
 8001680:	feffffff 	.word	0xfeffffff
 8001684:	000007fe 	.word	0x000007fe
 8001688:	fffffc0d 	.word	0xfffffc0d
 800168c:	4649      	mov	r1, r9
 800168e:	2301      	movs	r3, #1
 8001690:	4319      	orrs	r1, r3
 8001692:	4689      	mov	r9, r1
 8001694:	2600      	movs	r6, #0
 8001696:	2001      	movs	r0, #1
 8001698:	e667      	b.n	800136a <__aeabi_dmul+0x86>
 800169a:	2300      	movs	r3, #0
 800169c:	2480      	movs	r4, #128	; 0x80
 800169e:	2500      	movs	r5, #0
 80016a0:	4a43      	ldr	r2, [pc, #268]	; (80017b0 <__aeabi_dmul+0x4cc>)
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	0324      	lsls	r4, r4, #12
 80016a6:	e67e      	b.n	80013a6 <__aeabi_dmul+0xc2>
 80016a8:	2001      	movs	r0, #1
 80016aa:	1a40      	subs	r0, r0, r1
 80016ac:	2838      	cmp	r0, #56	; 0x38
 80016ae:	dd00      	ble.n	80016b2 <__aeabi_dmul+0x3ce>
 80016b0:	e676      	b.n	80013a0 <__aeabi_dmul+0xbc>
 80016b2:	281f      	cmp	r0, #31
 80016b4:	dd5b      	ble.n	800176e <__aeabi_dmul+0x48a>
 80016b6:	221f      	movs	r2, #31
 80016b8:	0023      	movs	r3, r4
 80016ba:	4252      	negs	r2, r2
 80016bc:	1a51      	subs	r1, r2, r1
 80016be:	40cb      	lsrs	r3, r1
 80016c0:	0019      	movs	r1, r3
 80016c2:	2820      	cmp	r0, #32
 80016c4:	d003      	beq.n	80016ce <__aeabi_dmul+0x3ea>
 80016c6:	4a3b      	ldr	r2, [pc, #236]	; (80017b4 <__aeabi_dmul+0x4d0>)
 80016c8:	4462      	add	r2, ip
 80016ca:	4094      	lsls	r4, r2
 80016cc:	4325      	orrs	r5, r4
 80016ce:	1e6a      	subs	r2, r5, #1
 80016d0:	4195      	sbcs	r5, r2
 80016d2:	002a      	movs	r2, r5
 80016d4:	430a      	orrs	r2, r1
 80016d6:	2107      	movs	r1, #7
 80016d8:	000d      	movs	r5, r1
 80016da:	2400      	movs	r4, #0
 80016dc:	4015      	ands	r5, r2
 80016de:	4211      	tst	r1, r2
 80016e0:	d05b      	beq.n	800179a <__aeabi_dmul+0x4b6>
 80016e2:	210f      	movs	r1, #15
 80016e4:	2400      	movs	r4, #0
 80016e6:	4011      	ands	r1, r2
 80016e8:	2904      	cmp	r1, #4
 80016ea:	d053      	beq.n	8001794 <__aeabi_dmul+0x4b0>
 80016ec:	1d11      	adds	r1, r2, #4
 80016ee:	4291      	cmp	r1, r2
 80016f0:	4192      	sbcs	r2, r2
 80016f2:	4252      	negs	r2, r2
 80016f4:	18a4      	adds	r4, r4, r2
 80016f6:	000a      	movs	r2, r1
 80016f8:	0223      	lsls	r3, r4, #8
 80016fa:	d54b      	bpl.n	8001794 <__aeabi_dmul+0x4b0>
 80016fc:	2201      	movs	r2, #1
 80016fe:	2400      	movs	r4, #0
 8001700:	2500      	movs	r5, #0
 8001702:	e650      	b.n	80013a6 <__aeabi_dmul+0xc2>
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	031b      	lsls	r3, r3, #12
 8001708:	421c      	tst	r4, r3
 800170a:	d009      	beq.n	8001720 <__aeabi_dmul+0x43c>
 800170c:	421e      	tst	r6, r3
 800170e:	d107      	bne.n	8001720 <__aeabi_dmul+0x43c>
 8001710:	4333      	orrs	r3, r6
 8001712:	031c      	lsls	r4, r3, #12
 8001714:	4643      	mov	r3, r8
 8001716:	0015      	movs	r5, r2
 8001718:	0b24      	lsrs	r4, r4, #12
 800171a:	4a25      	ldr	r2, [pc, #148]	; (80017b0 <__aeabi_dmul+0x4cc>)
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	e642      	b.n	80013a6 <__aeabi_dmul+0xc2>
 8001720:	2280      	movs	r2, #128	; 0x80
 8001722:	0312      	lsls	r2, r2, #12
 8001724:	4314      	orrs	r4, r2
 8001726:	0324      	lsls	r4, r4, #12
 8001728:	4a21      	ldr	r2, [pc, #132]	; (80017b0 <__aeabi_dmul+0x4cc>)
 800172a:	0b24      	lsrs	r4, r4, #12
 800172c:	9701      	str	r7, [sp, #4]
 800172e:	e63a      	b.n	80013a6 <__aeabi_dmul+0xc2>
 8001730:	f000 fc5a 	bl	8001fe8 <__clzsi2>
 8001734:	0001      	movs	r1, r0
 8001736:	0002      	movs	r2, r0
 8001738:	3115      	adds	r1, #21
 800173a:	3220      	adds	r2, #32
 800173c:	291c      	cmp	r1, #28
 800173e:	dc00      	bgt.n	8001742 <__aeabi_dmul+0x45e>
 8001740:	e74b      	b.n	80015da <__aeabi_dmul+0x2f6>
 8001742:	0034      	movs	r4, r6
 8001744:	3808      	subs	r0, #8
 8001746:	2500      	movs	r5, #0
 8001748:	4084      	lsls	r4, r0
 800174a:	e750      	b.n	80015ee <__aeabi_dmul+0x30a>
 800174c:	f000 fc4c 	bl	8001fe8 <__clzsi2>
 8001750:	0003      	movs	r3, r0
 8001752:	001a      	movs	r2, r3
 8001754:	3215      	adds	r2, #21
 8001756:	3020      	adds	r0, #32
 8001758:	2a1c      	cmp	r2, #28
 800175a:	dc00      	bgt.n	800175e <__aeabi_dmul+0x47a>
 800175c:	e71e      	b.n	800159c <__aeabi_dmul+0x2b8>
 800175e:	4656      	mov	r6, sl
 8001760:	3b08      	subs	r3, #8
 8001762:	2200      	movs	r2, #0
 8001764:	409e      	lsls	r6, r3
 8001766:	e723      	b.n	80015b0 <__aeabi_dmul+0x2cc>
 8001768:	9b00      	ldr	r3, [sp, #0]
 800176a:	469c      	mov	ip, r3
 800176c:	e6e6      	b.n	800153c <__aeabi_dmul+0x258>
 800176e:	4912      	ldr	r1, [pc, #72]	; (80017b8 <__aeabi_dmul+0x4d4>)
 8001770:	0022      	movs	r2, r4
 8001772:	4461      	add	r1, ip
 8001774:	002e      	movs	r6, r5
 8001776:	408d      	lsls	r5, r1
 8001778:	408a      	lsls	r2, r1
 800177a:	40c6      	lsrs	r6, r0
 800177c:	1e69      	subs	r1, r5, #1
 800177e:	418d      	sbcs	r5, r1
 8001780:	4332      	orrs	r2, r6
 8001782:	432a      	orrs	r2, r5
 8001784:	40c4      	lsrs	r4, r0
 8001786:	0753      	lsls	r3, r2, #29
 8001788:	d0b6      	beq.n	80016f8 <__aeabi_dmul+0x414>
 800178a:	210f      	movs	r1, #15
 800178c:	4011      	ands	r1, r2
 800178e:	2904      	cmp	r1, #4
 8001790:	d1ac      	bne.n	80016ec <__aeabi_dmul+0x408>
 8001792:	e7b1      	b.n	80016f8 <__aeabi_dmul+0x414>
 8001794:	0765      	lsls	r5, r4, #29
 8001796:	0264      	lsls	r4, r4, #9
 8001798:	0b24      	lsrs	r4, r4, #12
 800179a:	08d2      	lsrs	r2, r2, #3
 800179c:	4315      	orrs	r5, r2
 800179e:	2200      	movs	r2, #0
 80017a0:	e601      	b.n	80013a6 <__aeabi_dmul+0xc2>
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	0312      	lsls	r2, r2, #12
 80017a6:	4314      	orrs	r4, r2
 80017a8:	0324      	lsls	r4, r4, #12
 80017aa:	4a01      	ldr	r2, [pc, #4]	; (80017b0 <__aeabi_dmul+0x4cc>)
 80017ac:	0b24      	lsrs	r4, r4, #12
 80017ae:	e5fa      	b.n	80013a6 <__aeabi_dmul+0xc2>
 80017b0:	000007ff 	.word	0x000007ff
 80017b4:	0000043e 	.word	0x0000043e
 80017b8:	0000041e 	.word	0x0000041e

080017bc <__aeabi_dsub>:
 80017bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017be:	4657      	mov	r7, sl
 80017c0:	464e      	mov	r6, r9
 80017c2:	4645      	mov	r5, r8
 80017c4:	46de      	mov	lr, fp
 80017c6:	b5e0      	push	{r5, r6, r7, lr}
 80017c8:	001e      	movs	r6, r3
 80017ca:	0017      	movs	r7, r2
 80017cc:	004a      	lsls	r2, r1, #1
 80017ce:	030b      	lsls	r3, r1, #12
 80017d0:	0d52      	lsrs	r2, r2, #21
 80017d2:	0a5b      	lsrs	r3, r3, #9
 80017d4:	4690      	mov	r8, r2
 80017d6:	0f42      	lsrs	r2, r0, #29
 80017d8:	431a      	orrs	r2, r3
 80017da:	0fcd      	lsrs	r5, r1, #31
 80017dc:	4ccd      	ldr	r4, [pc, #820]	; (8001b14 <__aeabi_dsub+0x358>)
 80017de:	0331      	lsls	r1, r6, #12
 80017e0:	00c3      	lsls	r3, r0, #3
 80017e2:	4694      	mov	ip, r2
 80017e4:	0070      	lsls	r0, r6, #1
 80017e6:	0f7a      	lsrs	r2, r7, #29
 80017e8:	0a49      	lsrs	r1, r1, #9
 80017ea:	00ff      	lsls	r7, r7, #3
 80017ec:	469a      	mov	sl, r3
 80017ee:	46b9      	mov	r9, r7
 80017f0:	0d40      	lsrs	r0, r0, #21
 80017f2:	0ff6      	lsrs	r6, r6, #31
 80017f4:	4311      	orrs	r1, r2
 80017f6:	42a0      	cmp	r0, r4
 80017f8:	d100      	bne.n	80017fc <__aeabi_dsub+0x40>
 80017fa:	e0b1      	b.n	8001960 <__aeabi_dsub+0x1a4>
 80017fc:	2201      	movs	r2, #1
 80017fe:	4056      	eors	r6, r2
 8001800:	46b3      	mov	fp, r6
 8001802:	42b5      	cmp	r5, r6
 8001804:	d100      	bne.n	8001808 <__aeabi_dsub+0x4c>
 8001806:	e088      	b.n	800191a <__aeabi_dsub+0x15e>
 8001808:	4642      	mov	r2, r8
 800180a:	1a12      	subs	r2, r2, r0
 800180c:	2a00      	cmp	r2, #0
 800180e:	dc00      	bgt.n	8001812 <__aeabi_dsub+0x56>
 8001810:	e0ae      	b.n	8001970 <__aeabi_dsub+0x1b4>
 8001812:	2800      	cmp	r0, #0
 8001814:	d100      	bne.n	8001818 <__aeabi_dsub+0x5c>
 8001816:	e0c1      	b.n	800199c <__aeabi_dsub+0x1e0>
 8001818:	48be      	ldr	r0, [pc, #760]	; (8001b14 <__aeabi_dsub+0x358>)
 800181a:	4580      	cmp	r8, r0
 800181c:	d100      	bne.n	8001820 <__aeabi_dsub+0x64>
 800181e:	e151      	b.n	8001ac4 <__aeabi_dsub+0x308>
 8001820:	2080      	movs	r0, #128	; 0x80
 8001822:	0400      	lsls	r0, r0, #16
 8001824:	4301      	orrs	r1, r0
 8001826:	2a38      	cmp	r2, #56	; 0x38
 8001828:	dd00      	ble.n	800182c <__aeabi_dsub+0x70>
 800182a:	e17b      	b.n	8001b24 <__aeabi_dsub+0x368>
 800182c:	2a1f      	cmp	r2, #31
 800182e:	dd00      	ble.n	8001832 <__aeabi_dsub+0x76>
 8001830:	e1ee      	b.n	8001c10 <__aeabi_dsub+0x454>
 8001832:	2020      	movs	r0, #32
 8001834:	003e      	movs	r6, r7
 8001836:	1a80      	subs	r0, r0, r2
 8001838:	000c      	movs	r4, r1
 800183a:	40d6      	lsrs	r6, r2
 800183c:	40d1      	lsrs	r1, r2
 800183e:	4087      	lsls	r7, r0
 8001840:	4662      	mov	r2, ip
 8001842:	4084      	lsls	r4, r0
 8001844:	1a52      	subs	r2, r2, r1
 8001846:	1e78      	subs	r0, r7, #1
 8001848:	4187      	sbcs	r7, r0
 800184a:	4694      	mov	ip, r2
 800184c:	4334      	orrs	r4, r6
 800184e:	4327      	orrs	r7, r4
 8001850:	1bdc      	subs	r4, r3, r7
 8001852:	42a3      	cmp	r3, r4
 8001854:	419b      	sbcs	r3, r3
 8001856:	4662      	mov	r2, ip
 8001858:	425b      	negs	r3, r3
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	4699      	mov	r9, r3
 800185e:	464b      	mov	r3, r9
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	d400      	bmi.n	8001866 <__aeabi_dsub+0xaa>
 8001864:	e118      	b.n	8001a98 <__aeabi_dsub+0x2dc>
 8001866:	464b      	mov	r3, r9
 8001868:	0258      	lsls	r0, r3, #9
 800186a:	0a43      	lsrs	r3, r0, #9
 800186c:	4699      	mov	r9, r3
 800186e:	464b      	mov	r3, r9
 8001870:	2b00      	cmp	r3, #0
 8001872:	d100      	bne.n	8001876 <__aeabi_dsub+0xba>
 8001874:	e137      	b.n	8001ae6 <__aeabi_dsub+0x32a>
 8001876:	4648      	mov	r0, r9
 8001878:	f000 fbb6 	bl	8001fe8 <__clzsi2>
 800187c:	0001      	movs	r1, r0
 800187e:	3908      	subs	r1, #8
 8001880:	2320      	movs	r3, #32
 8001882:	0022      	movs	r2, r4
 8001884:	4648      	mov	r0, r9
 8001886:	1a5b      	subs	r3, r3, r1
 8001888:	40da      	lsrs	r2, r3
 800188a:	4088      	lsls	r0, r1
 800188c:	408c      	lsls	r4, r1
 800188e:	4643      	mov	r3, r8
 8001890:	4310      	orrs	r0, r2
 8001892:	4588      	cmp	r8, r1
 8001894:	dd00      	ble.n	8001898 <__aeabi_dsub+0xdc>
 8001896:	e136      	b.n	8001b06 <__aeabi_dsub+0x34a>
 8001898:	1ac9      	subs	r1, r1, r3
 800189a:	1c4b      	adds	r3, r1, #1
 800189c:	2b1f      	cmp	r3, #31
 800189e:	dd00      	ble.n	80018a2 <__aeabi_dsub+0xe6>
 80018a0:	e0ea      	b.n	8001a78 <__aeabi_dsub+0x2bc>
 80018a2:	2220      	movs	r2, #32
 80018a4:	0026      	movs	r6, r4
 80018a6:	1ad2      	subs	r2, r2, r3
 80018a8:	0001      	movs	r1, r0
 80018aa:	4094      	lsls	r4, r2
 80018ac:	40de      	lsrs	r6, r3
 80018ae:	40d8      	lsrs	r0, r3
 80018b0:	2300      	movs	r3, #0
 80018b2:	4091      	lsls	r1, r2
 80018b4:	1e62      	subs	r2, r4, #1
 80018b6:	4194      	sbcs	r4, r2
 80018b8:	4681      	mov	r9, r0
 80018ba:	4698      	mov	r8, r3
 80018bc:	4331      	orrs	r1, r6
 80018be:	430c      	orrs	r4, r1
 80018c0:	0763      	lsls	r3, r4, #29
 80018c2:	d009      	beq.n	80018d8 <__aeabi_dsub+0x11c>
 80018c4:	230f      	movs	r3, #15
 80018c6:	4023      	ands	r3, r4
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d005      	beq.n	80018d8 <__aeabi_dsub+0x11c>
 80018cc:	1d23      	adds	r3, r4, #4
 80018ce:	42a3      	cmp	r3, r4
 80018d0:	41a4      	sbcs	r4, r4
 80018d2:	4264      	negs	r4, r4
 80018d4:	44a1      	add	r9, r4
 80018d6:	001c      	movs	r4, r3
 80018d8:	464b      	mov	r3, r9
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	d400      	bmi.n	80018e0 <__aeabi_dsub+0x124>
 80018de:	e0de      	b.n	8001a9e <__aeabi_dsub+0x2e2>
 80018e0:	4641      	mov	r1, r8
 80018e2:	4b8c      	ldr	r3, [pc, #560]	; (8001b14 <__aeabi_dsub+0x358>)
 80018e4:	3101      	adds	r1, #1
 80018e6:	4299      	cmp	r1, r3
 80018e8:	d100      	bne.n	80018ec <__aeabi_dsub+0x130>
 80018ea:	e0e7      	b.n	8001abc <__aeabi_dsub+0x300>
 80018ec:	464b      	mov	r3, r9
 80018ee:	488a      	ldr	r0, [pc, #552]	; (8001b18 <__aeabi_dsub+0x35c>)
 80018f0:	08e4      	lsrs	r4, r4, #3
 80018f2:	4003      	ands	r3, r0
 80018f4:	0018      	movs	r0, r3
 80018f6:	0549      	lsls	r1, r1, #21
 80018f8:	075b      	lsls	r3, r3, #29
 80018fa:	0240      	lsls	r0, r0, #9
 80018fc:	4323      	orrs	r3, r4
 80018fe:	0d4a      	lsrs	r2, r1, #21
 8001900:	0b04      	lsrs	r4, r0, #12
 8001902:	0512      	lsls	r2, r2, #20
 8001904:	07ed      	lsls	r5, r5, #31
 8001906:	4322      	orrs	r2, r4
 8001908:	432a      	orrs	r2, r5
 800190a:	0018      	movs	r0, r3
 800190c:	0011      	movs	r1, r2
 800190e:	bcf0      	pop	{r4, r5, r6, r7}
 8001910:	46bb      	mov	fp, r7
 8001912:	46b2      	mov	sl, r6
 8001914:	46a9      	mov	r9, r5
 8001916:	46a0      	mov	r8, r4
 8001918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800191a:	4642      	mov	r2, r8
 800191c:	1a12      	subs	r2, r2, r0
 800191e:	2a00      	cmp	r2, #0
 8001920:	dd52      	ble.n	80019c8 <__aeabi_dsub+0x20c>
 8001922:	2800      	cmp	r0, #0
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x16c>
 8001926:	e09c      	b.n	8001a62 <__aeabi_dsub+0x2a6>
 8001928:	45a0      	cmp	r8, r4
 800192a:	d100      	bne.n	800192e <__aeabi_dsub+0x172>
 800192c:	e0ca      	b.n	8001ac4 <__aeabi_dsub+0x308>
 800192e:	2080      	movs	r0, #128	; 0x80
 8001930:	0400      	lsls	r0, r0, #16
 8001932:	4301      	orrs	r1, r0
 8001934:	2a38      	cmp	r2, #56	; 0x38
 8001936:	dd00      	ble.n	800193a <__aeabi_dsub+0x17e>
 8001938:	e149      	b.n	8001bce <__aeabi_dsub+0x412>
 800193a:	2a1f      	cmp	r2, #31
 800193c:	dc00      	bgt.n	8001940 <__aeabi_dsub+0x184>
 800193e:	e197      	b.n	8001c70 <__aeabi_dsub+0x4b4>
 8001940:	0010      	movs	r0, r2
 8001942:	000e      	movs	r6, r1
 8001944:	3820      	subs	r0, #32
 8001946:	40c6      	lsrs	r6, r0
 8001948:	2a20      	cmp	r2, #32
 800194a:	d004      	beq.n	8001956 <__aeabi_dsub+0x19a>
 800194c:	2040      	movs	r0, #64	; 0x40
 800194e:	1a82      	subs	r2, r0, r2
 8001950:	4091      	lsls	r1, r2
 8001952:	430f      	orrs	r7, r1
 8001954:	46b9      	mov	r9, r7
 8001956:	464c      	mov	r4, r9
 8001958:	1e62      	subs	r2, r4, #1
 800195a:	4194      	sbcs	r4, r2
 800195c:	4334      	orrs	r4, r6
 800195e:	e13a      	b.n	8001bd6 <__aeabi_dsub+0x41a>
 8001960:	000a      	movs	r2, r1
 8001962:	433a      	orrs	r2, r7
 8001964:	d028      	beq.n	80019b8 <__aeabi_dsub+0x1fc>
 8001966:	46b3      	mov	fp, r6
 8001968:	42b5      	cmp	r5, r6
 800196a:	d02b      	beq.n	80019c4 <__aeabi_dsub+0x208>
 800196c:	4a6b      	ldr	r2, [pc, #428]	; (8001b1c <__aeabi_dsub+0x360>)
 800196e:	4442      	add	r2, r8
 8001970:	2a00      	cmp	r2, #0
 8001972:	d05d      	beq.n	8001a30 <__aeabi_dsub+0x274>
 8001974:	4642      	mov	r2, r8
 8001976:	4644      	mov	r4, r8
 8001978:	1a82      	subs	r2, r0, r2
 800197a:	2c00      	cmp	r4, #0
 800197c:	d000      	beq.n	8001980 <__aeabi_dsub+0x1c4>
 800197e:	e0f5      	b.n	8001b6c <__aeabi_dsub+0x3b0>
 8001980:	4665      	mov	r5, ip
 8001982:	431d      	orrs	r5, r3
 8001984:	d100      	bne.n	8001988 <__aeabi_dsub+0x1cc>
 8001986:	e19c      	b.n	8001cc2 <__aeabi_dsub+0x506>
 8001988:	1e55      	subs	r5, r2, #1
 800198a:	2a01      	cmp	r2, #1
 800198c:	d100      	bne.n	8001990 <__aeabi_dsub+0x1d4>
 800198e:	e1fb      	b.n	8001d88 <__aeabi_dsub+0x5cc>
 8001990:	4c60      	ldr	r4, [pc, #384]	; (8001b14 <__aeabi_dsub+0x358>)
 8001992:	42a2      	cmp	r2, r4
 8001994:	d100      	bne.n	8001998 <__aeabi_dsub+0x1dc>
 8001996:	e1bd      	b.n	8001d14 <__aeabi_dsub+0x558>
 8001998:	002a      	movs	r2, r5
 800199a:	e0f0      	b.n	8001b7e <__aeabi_dsub+0x3c2>
 800199c:	0008      	movs	r0, r1
 800199e:	4338      	orrs	r0, r7
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dsub+0x1e8>
 80019a2:	e0c3      	b.n	8001b2c <__aeabi_dsub+0x370>
 80019a4:	1e50      	subs	r0, r2, #1
 80019a6:	2a01      	cmp	r2, #1
 80019a8:	d100      	bne.n	80019ac <__aeabi_dsub+0x1f0>
 80019aa:	e1a8      	b.n	8001cfe <__aeabi_dsub+0x542>
 80019ac:	4c59      	ldr	r4, [pc, #356]	; (8001b14 <__aeabi_dsub+0x358>)
 80019ae:	42a2      	cmp	r2, r4
 80019b0:	d100      	bne.n	80019b4 <__aeabi_dsub+0x1f8>
 80019b2:	e087      	b.n	8001ac4 <__aeabi_dsub+0x308>
 80019b4:	0002      	movs	r2, r0
 80019b6:	e736      	b.n	8001826 <__aeabi_dsub+0x6a>
 80019b8:	2201      	movs	r2, #1
 80019ba:	4056      	eors	r6, r2
 80019bc:	46b3      	mov	fp, r6
 80019be:	42b5      	cmp	r5, r6
 80019c0:	d000      	beq.n	80019c4 <__aeabi_dsub+0x208>
 80019c2:	e721      	b.n	8001808 <__aeabi_dsub+0x4c>
 80019c4:	4a55      	ldr	r2, [pc, #340]	; (8001b1c <__aeabi_dsub+0x360>)
 80019c6:	4442      	add	r2, r8
 80019c8:	2a00      	cmp	r2, #0
 80019ca:	d100      	bne.n	80019ce <__aeabi_dsub+0x212>
 80019cc:	e0b5      	b.n	8001b3a <__aeabi_dsub+0x37e>
 80019ce:	4642      	mov	r2, r8
 80019d0:	4644      	mov	r4, r8
 80019d2:	1a82      	subs	r2, r0, r2
 80019d4:	2c00      	cmp	r4, #0
 80019d6:	d100      	bne.n	80019da <__aeabi_dsub+0x21e>
 80019d8:	e138      	b.n	8001c4c <__aeabi_dsub+0x490>
 80019da:	4e4e      	ldr	r6, [pc, #312]	; (8001b14 <__aeabi_dsub+0x358>)
 80019dc:	42b0      	cmp	r0, r6
 80019de:	d100      	bne.n	80019e2 <__aeabi_dsub+0x226>
 80019e0:	e1de      	b.n	8001da0 <__aeabi_dsub+0x5e4>
 80019e2:	2680      	movs	r6, #128	; 0x80
 80019e4:	4664      	mov	r4, ip
 80019e6:	0436      	lsls	r6, r6, #16
 80019e8:	4334      	orrs	r4, r6
 80019ea:	46a4      	mov	ip, r4
 80019ec:	2a38      	cmp	r2, #56	; 0x38
 80019ee:	dd00      	ble.n	80019f2 <__aeabi_dsub+0x236>
 80019f0:	e196      	b.n	8001d20 <__aeabi_dsub+0x564>
 80019f2:	2a1f      	cmp	r2, #31
 80019f4:	dd00      	ble.n	80019f8 <__aeabi_dsub+0x23c>
 80019f6:	e224      	b.n	8001e42 <__aeabi_dsub+0x686>
 80019f8:	2620      	movs	r6, #32
 80019fa:	1ab4      	subs	r4, r6, r2
 80019fc:	46a2      	mov	sl, r4
 80019fe:	4664      	mov	r4, ip
 8001a00:	4656      	mov	r6, sl
 8001a02:	40b4      	lsls	r4, r6
 8001a04:	46a1      	mov	r9, r4
 8001a06:	001c      	movs	r4, r3
 8001a08:	464e      	mov	r6, r9
 8001a0a:	40d4      	lsrs	r4, r2
 8001a0c:	4326      	orrs	r6, r4
 8001a0e:	0034      	movs	r4, r6
 8001a10:	4656      	mov	r6, sl
 8001a12:	40b3      	lsls	r3, r6
 8001a14:	1e5e      	subs	r6, r3, #1
 8001a16:	41b3      	sbcs	r3, r6
 8001a18:	431c      	orrs	r4, r3
 8001a1a:	4663      	mov	r3, ip
 8001a1c:	40d3      	lsrs	r3, r2
 8001a1e:	18c9      	adds	r1, r1, r3
 8001a20:	19e4      	adds	r4, r4, r7
 8001a22:	42bc      	cmp	r4, r7
 8001a24:	41bf      	sbcs	r7, r7
 8001a26:	427f      	negs	r7, r7
 8001a28:	46b9      	mov	r9, r7
 8001a2a:	4680      	mov	r8, r0
 8001a2c:	4489      	add	r9, r1
 8001a2e:	e0d8      	b.n	8001be2 <__aeabi_dsub+0x426>
 8001a30:	4640      	mov	r0, r8
 8001a32:	4c3b      	ldr	r4, [pc, #236]	; (8001b20 <__aeabi_dsub+0x364>)
 8001a34:	3001      	adds	r0, #1
 8001a36:	4220      	tst	r0, r4
 8001a38:	d000      	beq.n	8001a3c <__aeabi_dsub+0x280>
 8001a3a:	e0b4      	b.n	8001ba6 <__aeabi_dsub+0x3ea>
 8001a3c:	4640      	mov	r0, r8
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	d000      	beq.n	8001a44 <__aeabi_dsub+0x288>
 8001a42:	e144      	b.n	8001cce <__aeabi_dsub+0x512>
 8001a44:	4660      	mov	r0, ip
 8001a46:	4318      	orrs	r0, r3
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dsub+0x290>
 8001a4a:	e190      	b.n	8001d6e <__aeabi_dsub+0x5b2>
 8001a4c:	0008      	movs	r0, r1
 8001a4e:	4338      	orrs	r0, r7
 8001a50:	d000      	beq.n	8001a54 <__aeabi_dsub+0x298>
 8001a52:	e1aa      	b.n	8001daa <__aeabi_dsub+0x5ee>
 8001a54:	4661      	mov	r1, ip
 8001a56:	08db      	lsrs	r3, r3, #3
 8001a58:	0749      	lsls	r1, r1, #29
 8001a5a:	430b      	orrs	r3, r1
 8001a5c:	4661      	mov	r1, ip
 8001a5e:	08cc      	lsrs	r4, r1, #3
 8001a60:	e027      	b.n	8001ab2 <__aeabi_dsub+0x2f6>
 8001a62:	0008      	movs	r0, r1
 8001a64:	4338      	orrs	r0, r7
 8001a66:	d061      	beq.n	8001b2c <__aeabi_dsub+0x370>
 8001a68:	1e50      	subs	r0, r2, #1
 8001a6a:	2a01      	cmp	r2, #1
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x2b4>
 8001a6e:	e139      	b.n	8001ce4 <__aeabi_dsub+0x528>
 8001a70:	42a2      	cmp	r2, r4
 8001a72:	d027      	beq.n	8001ac4 <__aeabi_dsub+0x308>
 8001a74:	0002      	movs	r2, r0
 8001a76:	e75d      	b.n	8001934 <__aeabi_dsub+0x178>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	391f      	subs	r1, #31
 8001a7c:	40ca      	lsrs	r2, r1
 8001a7e:	0011      	movs	r1, r2
 8001a80:	2b20      	cmp	r3, #32
 8001a82:	d003      	beq.n	8001a8c <__aeabi_dsub+0x2d0>
 8001a84:	2240      	movs	r2, #64	; 0x40
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	4098      	lsls	r0, r3
 8001a8a:	4304      	orrs	r4, r0
 8001a8c:	1e63      	subs	r3, r4, #1
 8001a8e:	419c      	sbcs	r4, r3
 8001a90:	2300      	movs	r3, #0
 8001a92:	4699      	mov	r9, r3
 8001a94:	4698      	mov	r8, r3
 8001a96:	430c      	orrs	r4, r1
 8001a98:	0763      	lsls	r3, r4, #29
 8001a9a:	d000      	beq.n	8001a9e <__aeabi_dsub+0x2e2>
 8001a9c:	e712      	b.n	80018c4 <__aeabi_dsub+0x108>
 8001a9e:	464b      	mov	r3, r9
 8001aa0:	464a      	mov	r2, r9
 8001aa2:	08e4      	lsrs	r4, r4, #3
 8001aa4:	075b      	lsls	r3, r3, #29
 8001aa6:	4323      	orrs	r3, r4
 8001aa8:	08d4      	lsrs	r4, r2, #3
 8001aaa:	4642      	mov	r2, r8
 8001aac:	4919      	ldr	r1, [pc, #100]	; (8001b14 <__aeabi_dsub+0x358>)
 8001aae:	428a      	cmp	r2, r1
 8001ab0:	d00e      	beq.n	8001ad0 <__aeabi_dsub+0x314>
 8001ab2:	0324      	lsls	r4, r4, #12
 8001ab4:	0552      	lsls	r2, r2, #21
 8001ab6:	0b24      	lsrs	r4, r4, #12
 8001ab8:	0d52      	lsrs	r2, r2, #21
 8001aba:	e722      	b.n	8001902 <__aeabi_dsub+0x146>
 8001abc:	000a      	movs	r2, r1
 8001abe:	2400      	movs	r4, #0
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e71e      	b.n	8001902 <__aeabi_dsub+0x146>
 8001ac4:	08db      	lsrs	r3, r3, #3
 8001ac6:	4662      	mov	r2, ip
 8001ac8:	0752      	lsls	r2, r2, #29
 8001aca:	4313      	orrs	r3, r2
 8001acc:	4662      	mov	r2, ip
 8001ace:	08d4      	lsrs	r4, r2, #3
 8001ad0:	001a      	movs	r2, r3
 8001ad2:	4322      	orrs	r2, r4
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dsub+0x31c>
 8001ad6:	e1fc      	b.n	8001ed2 <__aeabi_dsub+0x716>
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	0312      	lsls	r2, r2, #12
 8001adc:	4314      	orrs	r4, r2
 8001ade:	0324      	lsls	r4, r4, #12
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <__aeabi_dsub+0x358>)
 8001ae2:	0b24      	lsrs	r4, r4, #12
 8001ae4:	e70d      	b.n	8001902 <__aeabi_dsub+0x146>
 8001ae6:	0020      	movs	r0, r4
 8001ae8:	f000 fa7e 	bl	8001fe8 <__clzsi2>
 8001aec:	0001      	movs	r1, r0
 8001aee:	3118      	adds	r1, #24
 8001af0:	291f      	cmp	r1, #31
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dsub+0x33a>
 8001af4:	e6c4      	b.n	8001880 <__aeabi_dsub+0xc4>
 8001af6:	3808      	subs	r0, #8
 8001af8:	4084      	lsls	r4, r0
 8001afa:	4643      	mov	r3, r8
 8001afc:	0020      	movs	r0, r4
 8001afe:	2400      	movs	r4, #0
 8001b00:	4588      	cmp	r8, r1
 8001b02:	dc00      	bgt.n	8001b06 <__aeabi_dsub+0x34a>
 8001b04:	e6c8      	b.n	8001898 <__aeabi_dsub+0xdc>
 8001b06:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <__aeabi_dsub+0x35c>)
 8001b08:	1a5b      	subs	r3, r3, r1
 8001b0a:	4010      	ands	r0, r2
 8001b0c:	4698      	mov	r8, r3
 8001b0e:	4681      	mov	r9, r0
 8001b10:	e6d6      	b.n	80018c0 <__aeabi_dsub+0x104>
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	000007ff 	.word	0x000007ff
 8001b18:	ff7fffff 	.word	0xff7fffff
 8001b1c:	fffff801 	.word	0xfffff801
 8001b20:	000007fe 	.word	0x000007fe
 8001b24:	430f      	orrs	r7, r1
 8001b26:	1e7a      	subs	r2, r7, #1
 8001b28:	4197      	sbcs	r7, r2
 8001b2a:	e691      	b.n	8001850 <__aeabi_dsub+0x94>
 8001b2c:	4661      	mov	r1, ip
 8001b2e:	08db      	lsrs	r3, r3, #3
 8001b30:	0749      	lsls	r1, r1, #29
 8001b32:	430b      	orrs	r3, r1
 8001b34:	4661      	mov	r1, ip
 8001b36:	08cc      	lsrs	r4, r1, #3
 8001b38:	e7b8      	b.n	8001aac <__aeabi_dsub+0x2f0>
 8001b3a:	4640      	mov	r0, r8
 8001b3c:	4cd3      	ldr	r4, [pc, #844]	; (8001e8c <__aeabi_dsub+0x6d0>)
 8001b3e:	3001      	adds	r0, #1
 8001b40:	4220      	tst	r0, r4
 8001b42:	d000      	beq.n	8001b46 <__aeabi_dsub+0x38a>
 8001b44:	e0a2      	b.n	8001c8c <__aeabi_dsub+0x4d0>
 8001b46:	4640      	mov	r0, r8
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d000      	beq.n	8001b4e <__aeabi_dsub+0x392>
 8001b4c:	e101      	b.n	8001d52 <__aeabi_dsub+0x596>
 8001b4e:	4660      	mov	r0, ip
 8001b50:	4318      	orrs	r0, r3
 8001b52:	d100      	bne.n	8001b56 <__aeabi_dsub+0x39a>
 8001b54:	e15e      	b.n	8001e14 <__aeabi_dsub+0x658>
 8001b56:	0008      	movs	r0, r1
 8001b58:	4338      	orrs	r0, r7
 8001b5a:	d000      	beq.n	8001b5e <__aeabi_dsub+0x3a2>
 8001b5c:	e15f      	b.n	8001e1e <__aeabi_dsub+0x662>
 8001b5e:	4661      	mov	r1, ip
 8001b60:	08db      	lsrs	r3, r3, #3
 8001b62:	0749      	lsls	r1, r1, #29
 8001b64:	430b      	orrs	r3, r1
 8001b66:	4661      	mov	r1, ip
 8001b68:	08cc      	lsrs	r4, r1, #3
 8001b6a:	e7a2      	b.n	8001ab2 <__aeabi_dsub+0x2f6>
 8001b6c:	4dc8      	ldr	r5, [pc, #800]	; (8001e90 <__aeabi_dsub+0x6d4>)
 8001b6e:	42a8      	cmp	r0, r5
 8001b70:	d100      	bne.n	8001b74 <__aeabi_dsub+0x3b8>
 8001b72:	e0cf      	b.n	8001d14 <__aeabi_dsub+0x558>
 8001b74:	2580      	movs	r5, #128	; 0x80
 8001b76:	4664      	mov	r4, ip
 8001b78:	042d      	lsls	r5, r5, #16
 8001b7a:	432c      	orrs	r4, r5
 8001b7c:	46a4      	mov	ip, r4
 8001b7e:	2a38      	cmp	r2, #56	; 0x38
 8001b80:	dc56      	bgt.n	8001c30 <__aeabi_dsub+0x474>
 8001b82:	2a1f      	cmp	r2, #31
 8001b84:	dd00      	ble.n	8001b88 <__aeabi_dsub+0x3cc>
 8001b86:	e0d1      	b.n	8001d2c <__aeabi_dsub+0x570>
 8001b88:	2520      	movs	r5, #32
 8001b8a:	001e      	movs	r6, r3
 8001b8c:	1aad      	subs	r5, r5, r2
 8001b8e:	4664      	mov	r4, ip
 8001b90:	40ab      	lsls	r3, r5
 8001b92:	40ac      	lsls	r4, r5
 8001b94:	40d6      	lsrs	r6, r2
 8001b96:	1e5d      	subs	r5, r3, #1
 8001b98:	41ab      	sbcs	r3, r5
 8001b9a:	4334      	orrs	r4, r6
 8001b9c:	4323      	orrs	r3, r4
 8001b9e:	4664      	mov	r4, ip
 8001ba0:	40d4      	lsrs	r4, r2
 8001ba2:	1b09      	subs	r1, r1, r4
 8001ba4:	e049      	b.n	8001c3a <__aeabi_dsub+0x47e>
 8001ba6:	4660      	mov	r0, ip
 8001ba8:	1bdc      	subs	r4, r3, r7
 8001baa:	1a46      	subs	r6, r0, r1
 8001bac:	42a3      	cmp	r3, r4
 8001bae:	4180      	sbcs	r0, r0
 8001bb0:	4240      	negs	r0, r0
 8001bb2:	4681      	mov	r9, r0
 8001bb4:	0030      	movs	r0, r6
 8001bb6:	464e      	mov	r6, r9
 8001bb8:	1b80      	subs	r0, r0, r6
 8001bba:	4681      	mov	r9, r0
 8001bbc:	0200      	lsls	r0, r0, #8
 8001bbe:	d476      	bmi.n	8001cae <__aeabi_dsub+0x4f2>
 8001bc0:	464b      	mov	r3, r9
 8001bc2:	4323      	orrs	r3, r4
 8001bc4:	d000      	beq.n	8001bc8 <__aeabi_dsub+0x40c>
 8001bc6:	e652      	b.n	800186e <__aeabi_dsub+0xb2>
 8001bc8:	2400      	movs	r4, #0
 8001bca:	2500      	movs	r5, #0
 8001bcc:	e771      	b.n	8001ab2 <__aeabi_dsub+0x2f6>
 8001bce:	4339      	orrs	r1, r7
 8001bd0:	000c      	movs	r4, r1
 8001bd2:	1e62      	subs	r2, r4, #1
 8001bd4:	4194      	sbcs	r4, r2
 8001bd6:	18e4      	adds	r4, r4, r3
 8001bd8:	429c      	cmp	r4, r3
 8001bda:	419b      	sbcs	r3, r3
 8001bdc:	425b      	negs	r3, r3
 8001bde:	4463      	add	r3, ip
 8001be0:	4699      	mov	r9, r3
 8001be2:	464b      	mov	r3, r9
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	d400      	bmi.n	8001bea <__aeabi_dsub+0x42e>
 8001be8:	e756      	b.n	8001a98 <__aeabi_dsub+0x2dc>
 8001bea:	2301      	movs	r3, #1
 8001bec:	469c      	mov	ip, r3
 8001bee:	4ba8      	ldr	r3, [pc, #672]	; (8001e90 <__aeabi_dsub+0x6d4>)
 8001bf0:	44e0      	add	r8, ip
 8001bf2:	4598      	cmp	r8, r3
 8001bf4:	d038      	beq.n	8001c68 <__aeabi_dsub+0x4ac>
 8001bf6:	464b      	mov	r3, r9
 8001bf8:	48a6      	ldr	r0, [pc, #664]	; (8001e94 <__aeabi_dsub+0x6d8>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4003      	ands	r3, r0
 8001bfe:	0018      	movs	r0, r3
 8001c00:	0863      	lsrs	r3, r4, #1
 8001c02:	4014      	ands	r4, r2
 8001c04:	431c      	orrs	r4, r3
 8001c06:	07c3      	lsls	r3, r0, #31
 8001c08:	431c      	orrs	r4, r3
 8001c0a:	0843      	lsrs	r3, r0, #1
 8001c0c:	4699      	mov	r9, r3
 8001c0e:	e657      	b.n	80018c0 <__aeabi_dsub+0x104>
 8001c10:	0010      	movs	r0, r2
 8001c12:	000e      	movs	r6, r1
 8001c14:	3820      	subs	r0, #32
 8001c16:	40c6      	lsrs	r6, r0
 8001c18:	2a20      	cmp	r2, #32
 8001c1a:	d004      	beq.n	8001c26 <__aeabi_dsub+0x46a>
 8001c1c:	2040      	movs	r0, #64	; 0x40
 8001c1e:	1a82      	subs	r2, r0, r2
 8001c20:	4091      	lsls	r1, r2
 8001c22:	430f      	orrs	r7, r1
 8001c24:	46b9      	mov	r9, r7
 8001c26:	464f      	mov	r7, r9
 8001c28:	1e7a      	subs	r2, r7, #1
 8001c2a:	4197      	sbcs	r7, r2
 8001c2c:	4337      	orrs	r7, r6
 8001c2e:	e60f      	b.n	8001850 <__aeabi_dsub+0x94>
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	0013      	movs	r3, r2
 8001c36:	1e5a      	subs	r2, r3, #1
 8001c38:	4193      	sbcs	r3, r2
 8001c3a:	1afc      	subs	r4, r7, r3
 8001c3c:	42a7      	cmp	r7, r4
 8001c3e:	41bf      	sbcs	r7, r7
 8001c40:	427f      	negs	r7, r7
 8001c42:	1bcb      	subs	r3, r1, r7
 8001c44:	4699      	mov	r9, r3
 8001c46:	465d      	mov	r5, fp
 8001c48:	4680      	mov	r8, r0
 8001c4a:	e608      	b.n	800185e <__aeabi_dsub+0xa2>
 8001c4c:	4666      	mov	r6, ip
 8001c4e:	431e      	orrs	r6, r3
 8001c50:	d100      	bne.n	8001c54 <__aeabi_dsub+0x498>
 8001c52:	e0be      	b.n	8001dd2 <__aeabi_dsub+0x616>
 8001c54:	1e56      	subs	r6, r2, #1
 8001c56:	2a01      	cmp	r2, #1
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dsub+0x4a0>
 8001c5a:	e109      	b.n	8001e70 <__aeabi_dsub+0x6b4>
 8001c5c:	4c8c      	ldr	r4, [pc, #560]	; (8001e90 <__aeabi_dsub+0x6d4>)
 8001c5e:	42a2      	cmp	r2, r4
 8001c60:	d100      	bne.n	8001c64 <__aeabi_dsub+0x4a8>
 8001c62:	e119      	b.n	8001e98 <__aeabi_dsub+0x6dc>
 8001c64:	0032      	movs	r2, r6
 8001c66:	e6c1      	b.n	80019ec <__aeabi_dsub+0x230>
 8001c68:	4642      	mov	r2, r8
 8001c6a:	2400      	movs	r4, #0
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e648      	b.n	8001902 <__aeabi_dsub+0x146>
 8001c70:	2020      	movs	r0, #32
 8001c72:	000c      	movs	r4, r1
 8001c74:	1a80      	subs	r0, r0, r2
 8001c76:	003e      	movs	r6, r7
 8001c78:	4087      	lsls	r7, r0
 8001c7a:	4084      	lsls	r4, r0
 8001c7c:	40d6      	lsrs	r6, r2
 8001c7e:	1e78      	subs	r0, r7, #1
 8001c80:	4187      	sbcs	r7, r0
 8001c82:	40d1      	lsrs	r1, r2
 8001c84:	4334      	orrs	r4, r6
 8001c86:	433c      	orrs	r4, r7
 8001c88:	448c      	add	ip, r1
 8001c8a:	e7a4      	b.n	8001bd6 <__aeabi_dsub+0x41a>
 8001c8c:	4a80      	ldr	r2, [pc, #512]	; (8001e90 <__aeabi_dsub+0x6d4>)
 8001c8e:	4290      	cmp	r0, r2
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x4d8>
 8001c92:	e0e9      	b.n	8001e68 <__aeabi_dsub+0x6ac>
 8001c94:	19df      	adds	r7, r3, r7
 8001c96:	429f      	cmp	r7, r3
 8001c98:	419b      	sbcs	r3, r3
 8001c9a:	4461      	add	r1, ip
 8001c9c:	425b      	negs	r3, r3
 8001c9e:	18c9      	adds	r1, r1, r3
 8001ca0:	07cc      	lsls	r4, r1, #31
 8001ca2:	087f      	lsrs	r7, r7, #1
 8001ca4:	084b      	lsrs	r3, r1, #1
 8001ca6:	4699      	mov	r9, r3
 8001ca8:	4680      	mov	r8, r0
 8001caa:	433c      	orrs	r4, r7
 8001cac:	e6f4      	b.n	8001a98 <__aeabi_dsub+0x2dc>
 8001cae:	1afc      	subs	r4, r7, r3
 8001cb0:	42a7      	cmp	r7, r4
 8001cb2:	41bf      	sbcs	r7, r7
 8001cb4:	4663      	mov	r3, ip
 8001cb6:	427f      	negs	r7, r7
 8001cb8:	1ac9      	subs	r1, r1, r3
 8001cba:	1bcb      	subs	r3, r1, r7
 8001cbc:	4699      	mov	r9, r3
 8001cbe:	465d      	mov	r5, fp
 8001cc0:	e5d5      	b.n	800186e <__aeabi_dsub+0xb2>
 8001cc2:	08ff      	lsrs	r7, r7, #3
 8001cc4:	074b      	lsls	r3, r1, #29
 8001cc6:	465d      	mov	r5, fp
 8001cc8:	433b      	orrs	r3, r7
 8001cca:	08cc      	lsrs	r4, r1, #3
 8001ccc:	e6ee      	b.n	8001aac <__aeabi_dsub+0x2f0>
 8001cce:	4662      	mov	r2, ip
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	d000      	beq.n	8001cd6 <__aeabi_dsub+0x51a>
 8001cd4:	e082      	b.n	8001ddc <__aeabi_dsub+0x620>
 8001cd6:	000b      	movs	r3, r1
 8001cd8:	433b      	orrs	r3, r7
 8001cda:	d11b      	bne.n	8001d14 <__aeabi_dsub+0x558>
 8001cdc:	2480      	movs	r4, #128	; 0x80
 8001cde:	2500      	movs	r5, #0
 8001ce0:	0324      	lsls	r4, r4, #12
 8001ce2:	e6f9      	b.n	8001ad8 <__aeabi_dsub+0x31c>
 8001ce4:	19dc      	adds	r4, r3, r7
 8001ce6:	429c      	cmp	r4, r3
 8001ce8:	419b      	sbcs	r3, r3
 8001cea:	4461      	add	r1, ip
 8001cec:	4689      	mov	r9, r1
 8001cee:	425b      	negs	r3, r3
 8001cf0:	4499      	add	r9, r3
 8001cf2:	464b      	mov	r3, r9
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	d444      	bmi.n	8001d82 <__aeabi_dsub+0x5c6>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	4698      	mov	r8, r3
 8001cfc:	e6cc      	b.n	8001a98 <__aeabi_dsub+0x2dc>
 8001cfe:	1bdc      	subs	r4, r3, r7
 8001d00:	4662      	mov	r2, ip
 8001d02:	42a3      	cmp	r3, r4
 8001d04:	419b      	sbcs	r3, r3
 8001d06:	1a51      	subs	r1, r2, r1
 8001d08:	425b      	negs	r3, r3
 8001d0a:	1acb      	subs	r3, r1, r3
 8001d0c:	4699      	mov	r9, r3
 8001d0e:	2301      	movs	r3, #1
 8001d10:	4698      	mov	r8, r3
 8001d12:	e5a4      	b.n	800185e <__aeabi_dsub+0xa2>
 8001d14:	08ff      	lsrs	r7, r7, #3
 8001d16:	074b      	lsls	r3, r1, #29
 8001d18:	465d      	mov	r5, fp
 8001d1a:	433b      	orrs	r3, r7
 8001d1c:	08cc      	lsrs	r4, r1, #3
 8001d1e:	e6d7      	b.n	8001ad0 <__aeabi_dsub+0x314>
 8001d20:	4662      	mov	r2, ip
 8001d22:	431a      	orrs	r2, r3
 8001d24:	0014      	movs	r4, r2
 8001d26:	1e63      	subs	r3, r4, #1
 8001d28:	419c      	sbcs	r4, r3
 8001d2a:	e679      	b.n	8001a20 <__aeabi_dsub+0x264>
 8001d2c:	0015      	movs	r5, r2
 8001d2e:	4664      	mov	r4, ip
 8001d30:	3d20      	subs	r5, #32
 8001d32:	40ec      	lsrs	r4, r5
 8001d34:	46a0      	mov	r8, r4
 8001d36:	2a20      	cmp	r2, #32
 8001d38:	d005      	beq.n	8001d46 <__aeabi_dsub+0x58a>
 8001d3a:	2540      	movs	r5, #64	; 0x40
 8001d3c:	4664      	mov	r4, ip
 8001d3e:	1aaa      	subs	r2, r5, r2
 8001d40:	4094      	lsls	r4, r2
 8001d42:	4323      	orrs	r3, r4
 8001d44:	469a      	mov	sl, r3
 8001d46:	4654      	mov	r4, sl
 8001d48:	1e63      	subs	r3, r4, #1
 8001d4a:	419c      	sbcs	r4, r3
 8001d4c:	4643      	mov	r3, r8
 8001d4e:	4323      	orrs	r3, r4
 8001d50:	e773      	b.n	8001c3a <__aeabi_dsub+0x47e>
 8001d52:	4662      	mov	r2, ip
 8001d54:	431a      	orrs	r2, r3
 8001d56:	d023      	beq.n	8001da0 <__aeabi_dsub+0x5e4>
 8001d58:	000a      	movs	r2, r1
 8001d5a:	433a      	orrs	r2, r7
 8001d5c:	d000      	beq.n	8001d60 <__aeabi_dsub+0x5a4>
 8001d5e:	e0a0      	b.n	8001ea2 <__aeabi_dsub+0x6e6>
 8001d60:	4662      	mov	r2, ip
 8001d62:	08db      	lsrs	r3, r3, #3
 8001d64:	0752      	lsls	r2, r2, #29
 8001d66:	4313      	orrs	r3, r2
 8001d68:	4662      	mov	r2, ip
 8001d6a:	08d4      	lsrs	r4, r2, #3
 8001d6c:	e6b0      	b.n	8001ad0 <__aeabi_dsub+0x314>
 8001d6e:	000b      	movs	r3, r1
 8001d70:	433b      	orrs	r3, r7
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x5ba>
 8001d74:	e728      	b.n	8001bc8 <__aeabi_dsub+0x40c>
 8001d76:	08ff      	lsrs	r7, r7, #3
 8001d78:	074b      	lsls	r3, r1, #29
 8001d7a:	465d      	mov	r5, fp
 8001d7c:	433b      	orrs	r3, r7
 8001d7e:	08cc      	lsrs	r4, r1, #3
 8001d80:	e697      	b.n	8001ab2 <__aeabi_dsub+0x2f6>
 8001d82:	2302      	movs	r3, #2
 8001d84:	4698      	mov	r8, r3
 8001d86:	e736      	b.n	8001bf6 <__aeabi_dsub+0x43a>
 8001d88:	1afc      	subs	r4, r7, r3
 8001d8a:	42a7      	cmp	r7, r4
 8001d8c:	41bf      	sbcs	r7, r7
 8001d8e:	4663      	mov	r3, ip
 8001d90:	427f      	negs	r7, r7
 8001d92:	1ac9      	subs	r1, r1, r3
 8001d94:	1bcb      	subs	r3, r1, r7
 8001d96:	4699      	mov	r9, r3
 8001d98:	2301      	movs	r3, #1
 8001d9a:	465d      	mov	r5, fp
 8001d9c:	4698      	mov	r8, r3
 8001d9e:	e55e      	b.n	800185e <__aeabi_dsub+0xa2>
 8001da0:	074b      	lsls	r3, r1, #29
 8001da2:	08ff      	lsrs	r7, r7, #3
 8001da4:	433b      	orrs	r3, r7
 8001da6:	08cc      	lsrs	r4, r1, #3
 8001da8:	e692      	b.n	8001ad0 <__aeabi_dsub+0x314>
 8001daa:	1bdc      	subs	r4, r3, r7
 8001dac:	4660      	mov	r0, ip
 8001dae:	42a3      	cmp	r3, r4
 8001db0:	41b6      	sbcs	r6, r6
 8001db2:	1a40      	subs	r0, r0, r1
 8001db4:	4276      	negs	r6, r6
 8001db6:	1b80      	subs	r0, r0, r6
 8001db8:	4681      	mov	r9, r0
 8001dba:	0200      	lsls	r0, r0, #8
 8001dbc:	d560      	bpl.n	8001e80 <__aeabi_dsub+0x6c4>
 8001dbe:	1afc      	subs	r4, r7, r3
 8001dc0:	42a7      	cmp	r7, r4
 8001dc2:	41bf      	sbcs	r7, r7
 8001dc4:	4663      	mov	r3, ip
 8001dc6:	427f      	negs	r7, r7
 8001dc8:	1ac9      	subs	r1, r1, r3
 8001dca:	1bcb      	subs	r3, r1, r7
 8001dcc:	4699      	mov	r9, r3
 8001dce:	465d      	mov	r5, fp
 8001dd0:	e576      	b.n	80018c0 <__aeabi_dsub+0x104>
 8001dd2:	08ff      	lsrs	r7, r7, #3
 8001dd4:	074b      	lsls	r3, r1, #29
 8001dd6:	433b      	orrs	r3, r7
 8001dd8:	08cc      	lsrs	r4, r1, #3
 8001dda:	e667      	b.n	8001aac <__aeabi_dsub+0x2f0>
 8001ddc:	000a      	movs	r2, r1
 8001dde:	08db      	lsrs	r3, r3, #3
 8001de0:	433a      	orrs	r2, r7
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x62a>
 8001de4:	e66f      	b.n	8001ac6 <__aeabi_dsub+0x30a>
 8001de6:	4662      	mov	r2, ip
 8001de8:	0752      	lsls	r2, r2, #29
 8001dea:	4313      	orrs	r3, r2
 8001dec:	4662      	mov	r2, ip
 8001dee:	08d4      	lsrs	r4, r2, #3
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	0312      	lsls	r2, r2, #12
 8001df4:	4214      	tst	r4, r2
 8001df6:	d007      	beq.n	8001e08 <__aeabi_dsub+0x64c>
 8001df8:	08c8      	lsrs	r0, r1, #3
 8001dfa:	4210      	tst	r0, r2
 8001dfc:	d104      	bne.n	8001e08 <__aeabi_dsub+0x64c>
 8001dfe:	465d      	mov	r5, fp
 8001e00:	0004      	movs	r4, r0
 8001e02:	08fb      	lsrs	r3, r7, #3
 8001e04:	0749      	lsls	r1, r1, #29
 8001e06:	430b      	orrs	r3, r1
 8001e08:	0f5a      	lsrs	r2, r3, #29
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	08db      	lsrs	r3, r3, #3
 8001e0e:	0752      	lsls	r2, r2, #29
 8001e10:	4313      	orrs	r3, r2
 8001e12:	e65d      	b.n	8001ad0 <__aeabi_dsub+0x314>
 8001e14:	074b      	lsls	r3, r1, #29
 8001e16:	08ff      	lsrs	r7, r7, #3
 8001e18:	433b      	orrs	r3, r7
 8001e1a:	08cc      	lsrs	r4, r1, #3
 8001e1c:	e649      	b.n	8001ab2 <__aeabi_dsub+0x2f6>
 8001e1e:	19dc      	adds	r4, r3, r7
 8001e20:	429c      	cmp	r4, r3
 8001e22:	419b      	sbcs	r3, r3
 8001e24:	4461      	add	r1, ip
 8001e26:	4689      	mov	r9, r1
 8001e28:	425b      	negs	r3, r3
 8001e2a:	4499      	add	r9, r3
 8001e2c:	464b      	mov	r3, r9
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	d400      	bmi.n	8001e34 <__aeabi_dsub+0x678>
 8001e32:	e631      	b.n	8001a98 <__aeabi_dsub+0x2dc>
 8001e34:	464a      	mov	r2, r9
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <__aeabi_dsub+0x6d8>)
 8001e38:	401a      	ands	r2, r3
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	4691      	mov	r9, r2
 8001e3e:	4698      	mov	r8, r3
 8001e40:	e62a      	b.n	8001a98 <__aeabi_dsub+0x2dc>
 8001e42:	0016      	movs	r6, r2
 8001e44:	4664      	mov	r4, ip
 8001e46:	3e20      	subs	r6, #32
 8001e48:	40f4      	lsrs	r4, r6
 8001e4a:	46a0      	mov	r8, r4
 8001e4c:	2a20      	cmp	r2, #32
 8001e4e:	d005      	beq.n	8001e5c <__aeabi_dsub+0x6a0>
 8001e50:	2640      	movs	r6, #64	; 0x40
 8001e52:	4664      	mov	r4, ip
 8001e54:	1ab2      	subs	r2, r6, r2
 8001e56:	4094      	lsls	r4, r2
 8001e58:	4323      	orrs	r3, r4
 8001e5a:	469a      	mov	sl, r3
 8001e5c:	4654      	mov	r4, sl
 8001e5e:	1e63      	subs	r3, r4, #1
 8001e60:	419c      	sbcs	r4, r3
 8001e62:	4643      	mov	r3, r8
 8001e64:	431c      	orrs	r4, r3
 8001e66:	e5db      	b.n	8001a20 <__aeabi_dsub+0x264>
 8001e68:	0002      	movs	r2, r0
 8001e6a:	2400      	movs	r4, #0
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e548      	b.n	8001902 <__aeabi_dsub+0x146>
 8001e70:	19dc      	adds	r4, r3, r7
 8001e72:	42bc      	cmp	r4, r7
 8001e74:	41bf      	sbcs	r7, r7
 8001e76:	4461      	add	r1, ip
 8001e78:	4689      	mov	r9, r1
 8001e7a:	427f      	negs	r7, r7
 8001e7c:	44b9      	add	r9, r7
 8001e7e:	e738      	b.n	8001cf2 <__aeabi_dsub+0x536>
 8001e80:	464b      	mov	r3, r9
 8001e82:	4323      	orrs	r3, r4
 8001e84:	d100      	bne.n	8001e88 <__aeabi_dsub+0x6cc>
 8001e86:	e69f      	b.n	8001bc8 <__aeabi_dsub+0x40c>
 8001e88:	e606      	b.n	8001a98 <__aeabi_dsub+0x2dc>
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	000007fe 	.word	0x000007fe
 8001e90:	000007ff 	.word	0x000007ff
 8001e94:	ff7fffff 	.word	0xff7fffff
 8001e98:	08ff      	lsrs	r7, r7, #3
 8001e9a:	074b      	lsls	r3, r1, #29
 8001e9c:	433b      	orrs	r3, r7
 8001e9e:	08cc      	lsrs	r4, r1, #3
 8001ea0:	e616      	b.n	8001ad0 <__aeabi_dsub+0x314>
 8001ea2:	4662      	mov	r2, ip
 8001ea4:	08db      	lsrs	r3, r3, #3
 8001ea6:	0752      	lsls	r2, r2, #29
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	4662      	mov	r2, ip
 8001eac:	08d4      	lsrs	r4, r2, #3
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	0312      	lsls	r2, r2, #12
 8001eb2:	4214      	tst	r4, r2
 8001eb4:	d007      	beq.n	8001ec6 <__aeabi_dsub+0x70a>
 8001eb6:	08c8      	lsrs	r0, r1, #3
 8001eb8:	4210      	tst	r0, r2
 8001eba:	d104      	bne.n	8001ec6 <__aeabi_dsub+0x70a>
 8001ebc:	465d      	mov	r5, fp
 8001ebe:	0004      	movs	r4, r0
 8001ec0:	08fb      	lsrs	r3, r7, #3
 8001ec2:	0749      	lsls	r1, r1, #29
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	0f5a      	lsrs	r2, r3, #29
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	0752      	lsls	r2, r2, #29
 8001ecc:	08db      	lsrs	r3, r3, #3
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	e5fe      	b.n	8001ad0 <__aeabi_dsub+0x314>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	4a01      	ldr	r2, [pc, #4]	; (8001edc <__aeabi_dsub+0x720>)
 8001ed6:	001c      	movs	r4, r3
 8001ed8:	e513      	b.n	8001902 <__aeabi_dsub+0x146>
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	000007ff 	.word	0x000007ff

08001ee0 <__aeabi_dcmpun>:
 8001ee0:	b570      	push	{r4, r5, r6, lr}
 8001ee2:	0005      	movs	r5, r0
 8001ee4:	480c      	ldr	r0, [pc, #48]	; (8001f18 <__aeabi_dcmpun+0x38>)
 8001ee6:	031c      	lsls	r4, r3, #12
 8001ee8:	0016      	movs	r6, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	030a      	lsls	r2, r1, #12
 8001eee:	0049      	lsls	r1, r1, #1
 8001ef0:	0b12      	lsrs	r2, r2, #12
 8001ef2:	0d49      	lsrs	r1, r1, #21
 8001ef4:	0b24      	lsrs	r4, r4, #12
 8001ef6:	0d5b      	lsrs	r3, r3, #21
 8001ef8:	4281      	cmp	r1, r0
 8001efa:	d008      	beq.n	8001f0e <__aeabi_dcmpun+0x2e>
 8001efc:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <__aeabi_dcmpun+0x38>)
 8001efe:	2000      	movs	r0, #0
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d103      	bne.n	8001f0c <__aeabi_dcmpun+0x2c>
 8001f04:	0020      	movs	r0, r4
 8001f06:	4330      	orrs	r0, r6
 8001f08:	1e43      	subs	r3, r0, #1
 8001f0a:	4198      	sbcs	r0, r3
 8001f0c:	bd70      	pop	{r4, r5, r6, pc}
 8001f0e:	2001      	movs	r0, #1
 8001f10:	432a      	orrs	r2, r5
 8001f12:	d1fb      	bne.n	8001f0c <__aeabi_dcmpun+0x2c>
 8001f14:	e7f2      	b.n	8001efc <__aeabi_dcmpun+0x1c>
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	000007ff 	.word	0x000007ff

08001f1c <__aeabi_d2iz>:
 8001f1c:	000a      	movs	r2, r1
 8001f1e:	b530      	push	{r4, r5, lr}
 8001f20:	4c13      	ldr	r4, [pc, #76]	; (8001f70 <__aeabi_d2iz+0x54>)
 8001f22:	0053      	lsls	r3, r2, #1
 8001f24:	0309      	lsls	r1, r1, #12
 8001f26:	0005      	movs	r5, r0
 8001f28:	0b09      	lsrs	r1, r1, #12
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	0d5b      	lsrs	r3, r3, #21
 8001f2e:	0fd2      	lsrs	r2, r2, #31
 8001f30:	42a3      	cmp	r3, r4
 8001f32:	dd04      	ble.n	8001f3e <__aeabi_d2iz+0x22>
 8001f34:	480f      	ldr	r0, [pc, #60]	; (8001f74 <__aeabi_d2iz+0x58>)
 8001f36:	4283      	cmp	r3, r0
 8001f38:	dd02      	ble.n	8001f40 <__aeabi_d2iz+0x24>
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <__aeabi_d2iz+0x5c>)
 8001f3c:	18d0      	adds	r0, r2, r3
 8001f3e:	bd30      	pop	{r4, r5, pc}
 8001f40:	2080      	movs	r0, #128	; 0x80
 8001f42:	0340      	lsls	r0, r0, #13
 8001f44:	4301      	orrs	r1, r0
 8001f46:	480d      	ldr	r0, [pc, #52]	; (8001f7c <__aeabi_d2iz+0x60>)
 8001f48:	1ac0      	subs	r0, r0, r3
 8001f4a:	281f      	cmp	r0, #31
 8001f4c:	dd08      	ble.n	8001f60 <__aeabi_d2iz+0x44>
 8001f4e:	480c      	ldr	r0, [pc, #48]	; (8001f80 <__aeabi_d2iz+0x64>)
 8001f50:	1ac3      	subs	r3, r0, r3
 8001f52:	40d9      	lsrs	r1, r3
 8001f54:	000b      	movs	r3, r1
 8001f56:	4258      	negs	r0, r3
 8001f58:	2a00      	cmp	r2, #0
 8001f5a:	d1f0      	bne.n	8001f3e <__aeabi_d2iz+0x22>
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	e7ee      	b.n	8001f3e <__aeabi_d2iz+0x22>
 8001f60:	4c08      	ldr	r4, [pc, #32]	; (8001f84 <__aeabi_d2iz+0x68>)
 8001f62:	40c5      	lsrs	r5, r0
 8001f64:	46a4      	mov	ip, r4
 8001f66:	4463      	add	r3, ip
 8001f68:	4099      	lsls	r1, r3
 8001f6a:	000b      	movs	r3, r1
 8001f6c:	432b      	orrs	r3, r5
 8001f6e:	e7f2      	b.n	8001f56 <__aeabi_d2iz+0x3a>
 8001f70:	000003fe 	.word	0x000003fe
 8001f74:	0000041d 	.word	0x0000041d
 8001f78:	7fffffff 	.word	0x7fffffff
 8001f7c:	00000433 	.word	0x00000433
 8001f80:	00000413 	.word	0x00000413
 8001f84:	fffffbed 	.word	0xfffffbed

08001f88 <__aeabi_i2d>:
 8001f88:	b570      	push	{r4, r5, r6, lr}
 8001f8a:	2800      	cmp	r0, #0
 8001f8c:	d016      	beq.n	8001fbc <__aeabi_i2d+0x34>
 8001f8e:	17c3      	asrs	r3, r0, #31
 8001f90:	18c5      	adds	r5, r0, r3
 8001f92:	405d      	eors	r5, r3
 8001f94:	0fc4      	lsrs	r4, r0, #31
 8001f96:	0028      	movs	r0, r5
 8001f98:	f000 f826 	bl	8001fe8 <__clzsi2>
 8001f9c:	4a11      	ldr	r2, [pc, #68]	; (8001fe4 <__aeabi_i2d+0x5c>)
 8001f9e:	1a12      	subs	r2, r2, r0
 8001fa0:	280a      	cmp	r0, #10
 8001fa2:	dc16      	bgt.n	8001fd2 <__aeabi_i2d+0x4a>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	002e      	movs	r6, r5
 8001fa8:	3315      	adds	r3, #21
 8001faa:	409e      	lsls	r6, r3
 8001fac:	230b      	movs	r3, #11
 8001fae:	1a18      	subs	r0, r3, r0
 8001fb0:	40c5      	lsrs	r5, r0
 8001fb2:	0552      	lsls	r2, r2, #21
 8001fb4:	032d      	lsls	r5, r5, #12
 8001fb6:	0b2d      	lsrs	r5, r5, #12
 8001fb8:	0d53      	lsrs	r3, r2, #21
 8001fba:	e003      	b.n	8001fc4 <__aeabi_i2d+0x3c>
 8001fbc:	2400      	movs	r4, #0
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2500      	movs	r5, #0
 8001fc2:	2600      	movs	r6, #0
 8001fc4:	051b      	lsls	r3, r3, #20
 8001fc6:	432b      	orrs	r3, r5
 8001fc8:	07e4      	lsls	r4, r4, #31
 8001fca:	4323      	orrs	r3, r4
 8001fcc:	0030      	movs	r0, r6
 8001fce:	0019      	movs	r1, r3
 8001fd0:	bd70      	pop	{r4, r5, r6, pc}
 8001fd2:	380b      	subs	r0, #11
 8001fd4:	4085      	lsls	r5, r0
 8001fd6:	0552      	lsls	r2, r2, #21
 8001fd8:	032d      	lsls	r5, r5, #12
 8001fda:	2600      	movs	r6, #0
 8001fdc:	0b2d      	lsrs	r5, r5, #12
 8001fde:	0d53      	lsrs	r3, r2, #21
 8001fe0:	e7f0      	b.n	8001fc4 <__aeabi_i2d+0x3c>
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	0000041e 	.word	0x0000041e

08001fe8 <__clzsi2>:
 8001fe8:	211c      	movs	r1, #28
 8001fea:	2301      	movs	r3, #1
 8001fec:	041b      	lsls	r3, r3, #16
 8001fee:	4298      	cmp	r0, r3
 8001ff0:	d301      	bcc.n	8001ff6 <__clzsi2+0xe>
 8001ff2:	0c00      	lsrs	r0, r0, #16
 8001ff4:	3910      	subs	r1, #16
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	4298      	cmp	r0, r3
 8001ffa:	d301      	bcc.n	8002000 <__clzsi2+0x18>
 8001ffc:	0a00      	lsrs	r0, r0, #8
 8001ffe:	3908      	subs	r1, #8
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	4298      	cmp	r0, r3
 8002004:	d301      	bcc.n	800200a <__clzsi2+0x22>
 8002006:	0900      	lsrs	r0, r0, #4
 8002008:	3904      	subs	r1, #4
 800200a:	a202      	add	r2, pc, #8	; (adr r2, 8002014 <__clzsi2+0x2c>)
 800200c:	5c10      	ldrb	r0, [r2, r0]
 800200e:	1840      	adds	r0, r0, r1
 8002010:	4770      	bx	lr
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	02020304 	.word	0x02020304
 8002018:	01010101 	.word	0x01010101
	...

08002024 <calculateCRC16>:
 */

#ifndef CPPLIBS_CRC_H_
#define CPPLIBS_CRC_H_

uint16_t calculateCRC16(uint8_t *buf, uint16_t len){
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	000a      	movs	r2, r1
 800202e:	1cbb      	adds	r3, r7, #2
 8002030:	801a      	strh	r2, [r3, #0]
		0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
		0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
		0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
		0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
	};
	uint16_t crc = 0;
 8002032:	230e      	movs	r3, #14
 8002034:	18fb      	adds	r3, r7, r3
 8002036:	2200      	movs	r2, #0
 8002038:	801a      	strh	r2, [r3, #0]
	while (len--) {
 800203a:	e017      	b.n	800206c <calculateCRC16+0x48>
		crc = (crc << 8) ^ lookup_table[(crc >> 8) ^ *buf++];
 800203c:	240e      	movs	r4, #14
 800203e:	193b      	adds	r3, r7, r4
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b21a      	sxth	r2, r3
 8002046:	193b      	adds	r3, r7, r4
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	b29b      	uxth	r3, r3
 800204e:	0018      	movs	r0, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	1c59      	adds	r1, r3, #1
 8002054:	6079      	str	r1, [r7, #4]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	0001      	movs	r1, r0
 800205a:	4059      	eors	r1, r3
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <calculateCRC16+0x64>)
 800205e:	0049      	lsls	r1, r1, #1
 8002060:	5acb      	ldrh	r3, [r1, r3]
 8002062:	b21b      	sxth	r3, r3
 8002064:	4053      	eors	r3, r2
 8002066:	b21a      	sxth	r2, r3
 8002068:	193b      	adds	r3, r7, r4
 800206a:	801a      	strh	r2, [r3, #0]
	while (len--) {
 800206c:	1cbb      	adds	r3, r7, #2
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	1cba      	adds	r2, r7, #2
 8002072:	1e59      	subs	r1, r3, #1
 8002074:	8011      	strh	r1, [r2, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1e0      	bne.n	800203c <calculateCRC16+0x18>
	}
	return crc;
 800207a:	230e      	movs	r3, #14
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	881b      	ldrh	r3, [r3, #0]
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	b005      	add	sp, #20
 8002086:	bd90      	pop	{r4, r7, pc}
 8002088:	08006240 	.word	0x08006240

0800208c <get_temperature_data>:
#define BETA 3450                   // °K (Beta25/85)
#define DIODE_FV 0.286				//Serial diode forward voltage drop

/////////////////////////////////////////////
// gets °C data from raw adc data
int16_t get_temperature_data(uint16_t value){
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0
 8002092:	0002      	movs	r2, r0
 8002094:	1dbb      	adds	r3, r7, #6
 8002096:	801a      	strh	r2, [r3, #0]

    double voltage = VREF / (double)4096 * value;
 8002098:	1dbb      	adds	r3, r7, #6
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff ff73 	bl	8001f88 <__aeabi_i2d>
 80020a2:	4a3a      	ldr	r2, [pc, #232]	; (800218c <get_temperature_data+0x100>)
 80020a4:	4b3a      	ldr	r3, [pc, #232]	; (8002190 <get_temperature_data+0x104>)
 80020a6:	f7ff f91d 	bl	80012e4 <__aeabi_dmul>
 80020aa:	0002      	movs	r2, r0
 80020ac:	000b      	movs	r3, r1
 80020ae:	61ba      	str	r2, [r7, #24]
 80020b0:	61fb      	str	r3, [r7, #28]
 //   double ntc_resistance = voltage / (VREF-DIODE_FV - voltage) * DIVIDER_RESISTANCE;
//ezzel nem ok    double ntc_resistance =(VREF-voltage)/((voltage-DIODE_FV)/DIVIDER_RESISTANCE)-DIVIDER_RESISTANCE;
//majdnem jó    double ntc_resistance = 1.0 / ((voltage -DIODE_FV)/ (VREF-DIODE_FV- voltage) / DIVIDER_RESISTANCE);
    double ntc_resistance = 1.0 / ((voltage )/ (VREF- voltage) / DIVIDER_RESISTANCE);
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	4835      	ldr	r0, [pc, #212]	; (800218c <get_temperature_data+0x100>)
 80020b8:	4936      	ldr	r1, [pc, #216]	; (8002194 <get_temperature_data+0x108>)
 80020ba:	f7ff fb7f 	bl	80017bc <__aeabi_dsub>
 80020be:	0002      	movs	r2, r0
 80020c0:	000b      	movs	r3, r1
 80020c2:	69b8      	ldr	r0, [r7, #24]
 80020c4:	69f9      	ldr	r1, [r7, #28]
 80020c6:	f7fe fd0b 	bl	8000ae0 <__aeabi_ddiv>
 80020ca:	0002      	movs	r2, r0
 80020cc:	000b      	movs	r3, r1
 80020ce:	0010      	movs	r0, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	2200      	movs	r2, #0
 80020d4:	4b30      	ldr	r3, [pc, #192]	; (8002198 <get_temperature_data+0x10c>)
 80020d6:	f7fe fd03 	bl	8000ae0 <__aeabi_ddiv>
 80020da:	0002      	movs	r2, r0
 80020dc:	000b      	movs	r3, r1
 80020de:	2000      	movs	r0, #0
 80020e0:	492e      	ldr	r1, [pc, #184]	; (800219c <get_temperature_data+0x110>)
 80020e2:	f7fe fcfd 	bl	8000ae0 <__aeabi_ddiv>
 80020e6:	0002      	movs	r2, r0
 80020e8:	000b      	movs	r3, r1
 80020ea:	613a      	str	r2, [r7, #16]
 80020ec:	617b      	str	r3, [r7, #20]
    double temperature = (double)ntc_resistance / (double)NOMINAL_RESISTANCE;
 80020ee:	2200      	movs	r2, #0
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <get_temperature_data+0x114>)
 80020f2:	6938      	ldr	r0, [r7, #16]
 80020f4:	6979      	ldr	r1, [r7, #20]
 80020f6:	f7fe fcf3 	bl	8000ae0 <__aeabi_ddiv>
 80020fa:	0002      	movs	r2, r0
 80020fc:	000b      	movs	r3, r1
 80020fe:	60ba      	str	r2, [r7, #8]
 8002100:	60fb      	str	r3, [r7, #12]
    temperature = log(temperature);
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	0010      	movs	r0, r2
 8002108:	0019      	movs	r1, r3
 800210a:	f003 fe57 	bl	8005dbc <log>
 800210e:	0002      	movs	r2, r0
 8002110:	000b      	movs	r3, r1
 8002112:	60ba      	str	r2, [r7, #8]
 8002114:	60fb      	str	r3, [r7, #12]
    temperature /= BETA;
 8002116:	2200      	movs	r2, #0
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <get_temperature_data+0x118>)
 800211a:	68b8      	ldr	r0, [r7, #8]
 800211c:	68f9      	ldr	r1, [r7, #12]
 800211e:	f7fe fcdf 	bl	8000ae0 <__aeabi_ddiv>
 8002122:	0002      	movs	r2, r0
 8002124:	000b      	movs	r3, r1
 8002126:	60ba      	str	r2, [r7, #8]
 8002128:	60fb      	str	r3, [r7, #12]
    temperature += 1.0 / NOMINAL_TEMPERATURE;
 800212a:	4a1f      	ldr	r2, [pc, #124]	; (80021a8 <get_temperature_data+0x11c>)
 800212c:	4b1f      	ldr	r3, [pc, #124]	; (80021ac <get_temperature_data+0x120>)
 800212e:	68b8      	ldr	r0, [r7, #8]
 8002130:	68f9      	ldr	r1, [r7, #12]
 8002132:	f7fe f999 	bl	8000468 <__aeabi_dadd>
 8002136:	0002      	movs	r2, r0
 8002138:	000b      	movs	r3, r1
 800213a:	60ba      	str	r2, [r7, #8]
 800213c:	60fb      	str	r3, [r7, #12]
    temperature = 1.0 / temperature;
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2000      	movs	r0, #0
 8002144:	4915      	ldr	r1, [pc, #84]	; (800219c <get_temperature_data+0x110>)
 8002146:	f7fe fccb 	bl	8000ae0 <__aeabi_ddiv>
 800214a:	0002      	movs	r2, r0
 800214c:	000b      	movs	r3, r1
 800214e:	60ba      	str	r2, [r7, #8]
 8002150:	60fb      	str	r3, [r7, #12]
    temperature -= 273.15;
 8002152:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <get_temperature_data+0x124>)
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <get_temperature_data+0x128>)
 8002156:	68b8      	ldr	r0, [r7, #8]
 8002158:	68f9      	ldr	r1, [r7, #12]
 800215a:	f7ff fb2f 	bl	80017bc <__aeabi_dsub>
 800215e:	0002      	movs	r2, r0
 8002160:	000b      	movs	r3, r1
 8002162:	60ba      	str	r2, [r7, #8]
 8002164:	60fb      	str	r3, [r7, #12]
    return (int16_t)round(temperature);
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	0010      	movs	r0, r2
 800216c:	0019      	movs	r1, r3
 800216e:	f003 fdd7 	bl	8005d20 <round>
 8002172:	0002      	movs	r2, r0
 8002174:	000b      	movs	r3, r1
 8002176:	0010      	movs	r0, r2
 8002178:	0019      	movs	r1, r3
 800217a:	f7ff fecf 	bl	8001f1c <__aeabi_d2iz>
 800217e:	0003      	movs	r3, r0
 8002180:	b21b      	sxth	r3, r3
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b008      	add	sp, #32
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	bc6a7efa 	.word	0xbc6a7efa
 8002190:	3f489374 	.word	0x3f489374
 8002194:	40089374 	.word	0x40089374
 8002198:	40a2c000 	.word	0x40a2c000
 800219c:	3ff00000 	.word	0x3ff00000
 80021a0:	40c38800 	.word	0x40c38800
 80021a4:	40aaf400 	.word	0x40aaf400
 80021a8:	dcb5db83 	.word	0xdcb5db83
 80021ac:	3f6b79e1 	.word	0x3f6b79e1
 80021b0:	66666666 	.word	0x66666666
 80021b4:	40711266 	.word	0x40711266

080021b8 <select_adc_channel>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void select_adc_channel(int channel)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 80021c0:	230c      	movs	r3, #12
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	0018      	movs	r0, r3
 80021c6:	230c      	movs	r3, #12
 80021c8:	001a      	movs	r2, r3
 80021ca:	2100      	movs	r1, #0
 80021cc:	f003 fd9f 	bl	8005d0e <memset>
//////////    sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
    switch (channel)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d81e      	bhi.n	8002214 <select_adc_channel+0x5c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	009a      	lsls	r2, r3, #2
 80021da:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <select_adc_channel+0x90>)
 80021dc:	18d3      	adds	r3, r2, r3
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	469f      	mov	pc, r3
    {
        case 0:
            sConfig.Channel = ADC_CHANNEL_0;
 80021e2:	230c      	movs	r3, #12
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
              break;
 80021ea:	e017      	b.n	800221c <select_adc_channel+0x64>
        case 1:
            sConfig.Channel = ADC_CHANNEL_1;
 80021ec:	230c      	movs	r3, #12
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	4a16      	ldr	r2, [pc, #88]	; (800224c <select_adc_channel+0x94>)
 80021f2:	601a      	str	r2, [r3, #0]
              break;
 80021f4:	e012      	b.n	800221c <select_adc_channel+0x64>
        case 2:
            sConfig.Channel = ADC_CHANNEL_2;
 80021f6:	230c      	movs	r3, #12
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	4a15      	ldr	r2, [pc, #84]	; (8002250 <select_adc_channel+0x98>)
 80021fc:	601a      	str	r2, [r3, #0]
              break;
 80021fe:	e00d      	b.n	800221c <select_adc_channel+0x64>
        case 3:
            sConfig.Channel = ADC_CHANNEL_3;
 8002200:	230c      	movs	r3, #12
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	4a13      	ldr	r2, [pc, #76]	; (8002254 <select_adc_channel+0x9c>)
 8002206:	601a      	str	r2, [r3, #0]
              break;
 8002208:	e008      	b.n	800221c <select_adc_channel+0x64>
        case 4:
            sConfig.Channel = ADC_CHANNEL_4;
 800220a:	230c      	movs	r3, #12
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <select_adc_channel+0xa0>)
 8002210:	601a      	str	r2, [r3, #0]
              break;
 8002212:	e003      	b.n	800221c <select_adc_channel+0x64>
        default: sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002214:	230c      	movs	r3, #12
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	4a10      	ldr	r2, [pc, #64]	; (800225c <select_adc_channel+0xa4>)
 800221a:	601a      	str	r2, [r3, #0]
    }
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800221c:	210c      	movs	r1, #12
 800221e:	187b      	adds	r3, r7, r1
 8002220:	2200      	movs	r2, #0
 8002222:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002224:	187b      	adds	r3, r7, r1
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800222a:	187a      	adds	r2, r7, r1
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <select_adc_channel+0xa8>)
 800222e:	0011      	movs	r1, r2
 8002230:	0018      	movs	r0, r3
 8002232:	f001 faef 	bl	8003814 <HAL_ADC_ConfigChannel>
 8002236:	1e03      	subs	r3, r0, #0
 8002238:	d001      	beq.n	800223e <select_adc_channel+0x86>
    {
      Error_Handler();
 800223a:	f000 fc71 	bl	8002b20 <Error_Handler>
    }
}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	b006      	add	sp, #24
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	0800622c 	.word	0x0800622c
 800224c:	04000002 	.word	0x04000002
 8002250:	08000004 	.word	0x08000004
 8002254:	0c000008 	.word	0x0c000008
 8002258:	10000010 	.word	0x10000010
 800225c:	b0001000 	.word	0xb0001000
 8002260:	2000008c 	.word	0x2000008c

08002264 <convert>:
//----------------------------------------------

//----------------------------------------------

void convert (int column,int row)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]

	select_adc_channel(column);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	0018      	movs	r0, r3
 8002272:	f7ff ffa1 	bl	80021b8 <select_adc_channel>
	HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, GPIO_PIN_SET);
 8002276:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <convert+0x90>)
 8002278:	2201      	movs	r2, #1
 800227a:	2110      	movs	r1, #16
 800227c:	0018      	movs	r0, r3
 800227e:	f002 f8d0 	bl	8004422 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <convert+0x94>)
 8002284:	0018      	movs	r0, r3
 8002286:	f001 f99b 	bl	80035c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800228a:	2301      	movs	r3, #1
 800228c:	425a      	negs	r2, r3
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <convert+0x94>)
 8002290:	0011      	movs	r1, r2
 8002292:	0018      	movs	r0, r3
 8002294:	f001 fa1e 	bl	80036d4 <HAL_ADC_PollForConversion>
	raw_adc_data[column+SCOLUMNS*row] = HAL_ADC_GetValue(&hadc1);
 8002298:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <convert+0x94>)
 800229a:	0018      	movs	r0, r3
 800229c:	f001 faae 	bl	80037fc <HAL_ADC_GetValue>
 80022a0:	0001      	movs	r1, r0
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	009a      	lsls	r2, r3, #2
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	18d2      	adds	r2, r2, r3
 80022aa:	b289      	uxth	r1, r1
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <convert+0x98>)
 80022ae:	0052      	lsls	r2, r2, #1
 80022b0:	52d1      	strh	r1, [r2, r3]
	calculated_temperatures[column+SCOLUMNS*row]=get_temperature_data(raw_adc_data[column+SCOLUMNS*row] );
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	009a      	lsls	r2, r3, #2
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	18d2      	adds	r2, r2, r3
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <convert+0x98>)
 80022bc:	0052      	lsls	r2, r2, #1
 80022be:	5ad1      	ldrh	r1, [r2, r3]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	009a      	lsls	r2, r3, #2
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	18d4      	adds	r4, r2, r3
 80022c8:	0008      	movs	r0, r1
 80022ca:	f7ff fedf 	bl	800208c <get_temperature_data>
 80022ce:	0003      	movs	r3, r0
 80022d0:	0019      	movs	r1, r3
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <convert+0x9c>)
 80022d4:	0062      	lsls	r2, r4, #1
 80022d6:	52d1      	strh	r1, [r2, r3]
	HAL_GPIO_WritePin(PB4_GPIO_Port, PB4_Pin, GPIO_PIN_RESET);
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <convert+0x90>)
 80022da:	2200      	movs	r2, #0
 80022dc:	2110      	movs	r1, #16
 80022de:	0018      	movs	r0, r3
 80022e0:	f002 f89f 	bl	8004422 <HAL_GPIO_WritePin>
	HAL_ADC_Stop(&hadc1);
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <convert+0x94>)
 80022e6:	0018      	movs	r0, r3
 80022e8:	f001 f9b8 	bl	800365c <HAL_ADC_Stop>
}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b003      	add	sp, #12
 80022f2:	bd90      	pop	{r4, r7, pc}
 80022f4:	50000400 	.word	0x50000400
 80022f8:	2000008c 	.word	0x2000008c
 80022fc:	2000023c 	.word	0x2000023c
 8002300:	2000025c 	.word	0x2000025c

08002304 <scan_columns>:

void scan_columns(int row)
	{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

		HAL_GPIO_WritePin(COL0_GPIO_Port,COL0_Pin, GPIO_PIN_SET);
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4830      	ldr	r0, [pc, #192]	; (80023d4 <scan_columns+0xd0>)
 8002312:	2201      	movs	r2, #1
 8002314:	0019      	movs	r1, r3
 8002316:	f002 f884 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_Delay(ADC_SET_TIME);
 800231a:	2001      	movs	r0, #1
 800231c:	f000 fe1a 	bl	8002f54 <HAL_Delay>
		convert(0,row);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	0019      	movs	r1, r3
 8002324:	2000      	movs	r0, #0
 8002326:	f7ff ff9d 	bl	8002264 <convert>
		HAL_GPIO_WritePin(COL0_GPIO_Port,COL0_Pin, GPIO_PIN_RESET);
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4829      	ldr	r0, [pc, #164]	; (80023d4 <scan_columns+0xd0>)
 8002330:	2200      	movs	r2, #0
 8002332:	0019      	movs	r1, r3
 8002334:	f002 f875 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8002338:	2001      	movs	r0, #1
 800233a:	f000 fe0b 	bl	8002f54 <HAL_Delay>

		HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4824      	ldr	r0, [pc, #144]	; (80023d4 <scan_columns+0xd0>)
 8002344:	2201      	movs	r2, #1
 8002346:	0019      	movs	r1, r3
 8002348:	f002 f86b 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_Delay(ADC_SET_TIME);
 800234c:	2001      	movs	r0, #1
 800234e:	f000 fe01 	bl	8002f54 <HAL_Delay>
		convert(1,row);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	0019      	movs	r1, r3
 8002356:	2001      	movs	r0, #1
 8002358:	f7ff ff84 	bl	8002264 <convert>
		HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	481c      	ldr	r0, [pc, #112]	; (80023d4 <scan_columns+0xd0>)
 8002362:	2200      	movs	r2, #0
 8002364:	0019      	movs	r1, r3
 8002366:	f002 f85c 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800236a:	2001      	movs	r0, #1
 800236c:	f000 fdf2 	bl	8002f54 <HAL_Delay>

		HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <scan_columns+0xd0>)
 8002372:	2201      	movs	r2, #1
 8002374:	2180      	movs	r1, #128	; 0x80
 8002376:	0018      	movs	r0, r3
 8002378:	f002 f853 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_Delay(ADC_SET_TIME);
 800237c:	2001      	movs	r0, #1
 800237e:	f000 fde9 	bl	8002f54 <HAL_Delay>
		convert(2,row);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	0019      	movs	r1, r3
 8002386:	2002      	movs	r0, #2
 8002388:	f7ff ff6c 	bl	8002264 <convert>
		HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <scan_columns+0xd0>)
 800238e:	2200      	movs	r2, #0
 8002390:	2180      	movs	r1, #128	; 0x80
 8002392:	0018      	movs	r0, r3
 8002394:	f002 f845 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8002398:	2001      	movs	r0, #1
 800239a:	f000 fddb 	bl	8002f54 <HAL_Delay>

		HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <scan_columns+0xd0>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	2140      	movs	r1, #64	; 0x40
 80023a4:	0018      	movs	r0, r3
 80023a6:	f002 f83c 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_Delay(ADC_SET_TIME);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f000 fdd2 	bl	8002f54 <HAL_Delay>
		convert(3,row);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	0019      	movs	r1, r3
 80023b4:	2003      	movs	r0, #3
 80023b6:	f7ff ff55 	bl	8002264 <convert>
		HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <scan_columns+0xd0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	2140      	movs	r1, #64	; 0x40
 80023c0:	0018      	movs	r0, r3
 80023c2:	f002 f82e 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f000 fdc4 	bl	8002f54 <HAL_Delay>
		HAL_Delay(5);
		convert(4,row);
		HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
		HAL_Delay(1);
*/
	}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b002      	add	sp, #8
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	50000400 	.word	0x50000400

080023d8 <scan_rows>:


void scan_rows()
		{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(R0_GPIO_Port,R0_Pin, GPIO_PIN_RESET);
 80023dc:	23a0      	movs	r3, #160	; 0xa0
 80023de:	05db      	lsls	r3, r3, #23
 80023e0:	2200      	movs	r2, #0
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	0018      	movs	r0, r3
 80023e6:	f002 f81c 	bl	8004422 <HAL_GPIO_WritePin>
			scan_columns(0);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7ff ff8a 	bl	8002304 <scan_columns>
			HAL_GPIO_WritePin(R0_GPIO_Port,R0_Pin, GPIO_PIN_SET);
 80023f0:	23a0      	movs	r3, #160	; 0xa0
 80023f2:	05db      	lsls	r3, r3, #23
 80023f4:	2201      	movs	r2, #1
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	0018      	movs	r0, r3
 80023fa:	f002 f812 	bl	8004422 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(R1_GPIO_Port,R1_Pin, GPIO_PIN_RESET);
 80023fe:	4b18      	ldr	r3, [pc, #96]	; (8002460 <scan_rows+0x88>)
 8002400:	2200      	movs	r2, #0
 8002402:	2101      	movs	r1, #1
 8002404:	0018      	movs	r0, r3
 8002406:	f002 f80c 	bl	8004422 <HAL_GPIO_WritePin>
			scan_columns(1);
 800240a:	2001      	movs	r0, #1
 800240c:	f7ff ff7a 	bl	8002304 <scan_columns>
			HAL_GPIO_WritePin(R1_GPIO_Port,R1_Pin, GPIO_PIN_SET);
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <scan_rows+0x88>)
 8002412:	2201      	movs	r2, #1
 8002414:	2101      	movs	r1, #1
 8002416:	0018      	movs	r0, r3
 8002418:	f002 f803 	bl	8004422 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(R2_GPIO_Port,R2_Pin, GPIO_PIN_RESET);
 800241c:	4b10      	ldr	r3, [pc, #64]	; (8002460 <scan_rows+0x88>)
 800241e:	2200      	movs	r2, #0
 8002420:	2102      	movs	r1, #2
 8002422:	0018      	movs	r0, r3
 8002424:	f001 fffd 	bl	8004422 <HAL_GPIO_WritePin>
			scan_columns(2);
 8002428:	2002      	movs	r0, #2
 800242a:	f7ff ff6b 	bl	8002304 <scan_columns>
			HAL_GPIO_WritePin(R2_GPIO_Port,R2_Pin, GPIO_PIN_SET);
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <scan_rows+0x88>)
 8002430:	2201      	movs	r2, #1
 8002432:	2102      	movs	r1, #2
 8002434:	0018      	movs	r0, r3
 8002436:	f001 fff4 	bl	8004422 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(R3_GPIO_Port,R3_Pin, GPIO_PIN_RESET);
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <scan_rows+0x88>)
 800243c:	2200      	movs	r2, #0
 800243e:	2104      	movs	r1, #4
 8002440:	0018      	movs	r0, r3
 8002442:	f001 ffee 	bl	8004422 <HAL_GPIO_WritePin>
			scan_columns(3);
 8002446:	2003      	movs	r0, #3
 8002448:	f7ff ff5c 	bl	8002304 <scan_columns>
			HAL_GPIO_WritePin(R3_GPIO_Port,R3_Pin, GPIO_PIN_SET);
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <scan_rows+0x88>)
 800244e:	2201      	movs	r2, #1
 8002450:	2104      	movs	r1, #4
 8002452:	0018      	movs	r0, r3
 8002454:	f001 ffe5 	bl	8004422 <HAL_GPIO_WritePin>
/*
			HAL_GPIO_WritePin(R4_GPIO_Port,R4_Pin, GPIO_PIN_RESET);
			scan_columns(4);
			HAL_GPIO_WritePin(R4_GPIO_Port,R4_Pin, GPIO_PIN_SET);
*/
		}
 8002458:	46c0      	nop			; (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	50000400 	.word	0x50000400

08002464 <read_all_sensors>:


void read_all_sensors(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_SET);
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	4808      	ldr	r0, [pc, #32]	; (8002490 <read_all_sensors+0x2c>)
 800246e:	2201      	movs	r2, #1
 8002470:	0019      	movs	r1, r3
 8002472:	f001 ffd6 	bl	8004422 <HAL_GPIO_WritePin>
	scan_rows();
 8002476:	f7ff ffaf 	bl	80023d8 <scan_rows>
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	4804      	ldr	r0, [pc, #16]	; (8002490 <read_all_sensors+0x2c>)
 8002480:	2200      	movs	r2, #0
 8002482:	0019      	movs	r1, r3
 8002484:	f001 ffcd 	bl	8004422 <HAL_GPIO_WritePin>

}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	50000800 	.word	0x50000800

08002494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800249a:	f000 fcd5 	bl	8002e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800249e:	f000 f843 	bl	8002528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024a2:	f000 f9ed 	bl	8002880 <MX_GPIO_Init>
  MX_ADC1_Init();
 80024a6:	f000 f899 	bl	80025dc <MX_ADC1_Init>
  MX_CRC_Init();
 80024aa:	f000 f939 	bl	8002720 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80024ae:	f000 f95b 	bl	8002768 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80024b2:	f000 f9a7 	bl	8002804 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// wait for rising edge
	while (HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin));
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	23a0      	movs	r3, #160	; 0xa0
 80024ba:	05db      	lsls	r3, r3, #23
 80024bc:	2140      	movs	r1, #64	; 0x40
 80024be:	0018      	movs	r0, r3
 80024c0:	f001 ff92 	bl	80043e8 <HAL_GPIO_ReadPin>
 80024c4:	1e03      	subs	r3, r0, #0
 80024c6:	d1f7      	bne.n	80024b8 <main+0x24>

	//doMeasurements();
	read_all_sensors();
 80024c8:	f7ff ffcc 	bl	8002464 <read_all_sensors>
	    adc_cal[i*2] = raw_adc_data[i] >> 8;

	    adc_cal[i*2 + 1] = raw_adc_data[i] & 0xFF;

	}*/
	for (int i = 0; i < NUM_RAW_DATA; i++){
 80024cc:	2300      	movs	r3, #0
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	e017      	b.n	8002502 <main+0x6e>

	    adc_cal[i*2] = calculated_temperatures[i] >> 8;
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <main+0x8c>)
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	0052      	lsls	r2, r2, #1
 80024d8:	5ed3      	ldrsh	r3, [r2, r3]
 80024da:	121b      	asrs	r3, r3, #8
 80024dc:	b21a      	sxth	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	b2d1      	uxtb	r1, r2
 80024e4:	4a0f      	ldr	r2, [pc, #60]	; (8002524 <main+0x90>)
 80024e6:	54d1      	strb	r1, [r2, r3]

	    adc_cal[i*2 + 1] = calculated_temperatures[i] & 0xFF;
 80024e8:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <main+0x8c>)
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	0052      	lsls	r2, r2, #1
 80024ee:	5ed2      	ldrsh	r2, [r2, r3]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	3301      	adds	r3, #1
 80024f6:	b2d1      	uxtb	r1, r2
 80024f8:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <main+0x90>)
 80024fa:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < NUM_RAW_DATA; i++){
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3301      	adds	r3, #1
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b0f      	cmp	r3, #15
 8002506:	dde4      	ble.n	80024d2 <main+0x3e>
	// fill temperatures buffer
	//fillTemp();

	// send
	//sendData();
	sendDataCal();
 8002508:	f000 fa8c 	bl	8002a24 <sendDataCal>
	// wait for falling edge
	while (!HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin));
 800250c:	46c0      	nop			; (mov r8, r8)
 800250e:	23a0      	movs	r3, #160	; 0xa0
 8002510:	05db      	lsls	r3, r3, #23
 8002512:	2140      	movs	r1, #64	; 0x40
 8002514:	0018      	movs	r0, r3
 8002516:	f001 ff67 	bl	80043e8 <HAL_GPIO_ReadPin>
 800251a:	1e03      	subs	r3, r0, #0
 800251c:	d0f7      	beq.n	800250e <main+0x7a>
	while (HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin));
 800251e:	e7ca      	b.n	80024b6 <main+0x22>
 8002520:	2000025c 	.word	0x2000025c
 8002524:	2000027c 	.word	0x2000027c

08002528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b093      	sub	sp, #76	; 0x4c
 800252c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800252e:	2414      	movs	r4, #20
 8002530:	193b      	adds	r3, r7, r4
 8002532:	0018      	movs	r0, r3
 8002534:	2334      	movs	r3, #52	; 0x34
 8002536:	001a      	movs	r2, r3
 8002538:	2100      	movs	r1, #0
 800253a:	f003 fbe8 	bl	8005d0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	0018      	movs	r0, r3
 8002542:	2310      	movs	r3, #16
 8002544:	001a      	movs	r2, r3
 8002546:	2100      	movs	r1, #0
 8002548:	f003 fbe1 	bl	8005d0e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	0018      	movs	r0, r3
 8002552:	f001 ff83 	bl	800445c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002556:	193b      	adds	r3, r7, r4
 8002558:	2202      	movs	r2, #2
 800255a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800255c:	193b      	adds	r3, r7, r4
 800255e:	2280      	movs	r2, #128	; 0x80
 8002560:	0052      	lsls	r2, r2, #1
 8002562:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002564:	0021      	movs	r1, r4
 8002566:	187b      	adds	r3, r7, r1
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800256c:	187b      	adds	r3, r7, r1
 800256e:	2240      	movs	r2, #64	; 0x40
 8002570:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2202      	movs	r2, #2
 8002576:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002578:	187b      	adds	r3, r7, r1
 800257a:	2202      	movs	r2, #2
 800257c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800257e:	187b      	adds	r3, r7, r1
 8002580:	2200      	movs	r2, #0
 8002582:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002584:	187b      	adds	r3, r7, r1
 8002586:	2208      	movs	r2, #8
 8002588:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV32;
 800258a:	187b      	adds	r3, r7, r1
 800258c:	22f8      	movs	r2, #248	; 0xf8
 800258e:	0392      	lsls	r2, r2, #14
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002592:	187b      	adds	r3, r7, r1
 8002594:	2280      	movs	r2, #128	; 0x80
 8002596:	0592      	lsls	r2, r2, #22
 8002598:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800259a:	187b      	adds	r3, r7, r1
 800259c:	0018      	movs	r0, r3
 800259e:	f001 ffa9 	bl	80044f4 <HAL_RCC_OscConfig>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d001      	beq.n	80025aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80025a6:	f000 fabb 	bl	8002b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	2207      	movs	r2, #7
 80025ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	2202      	movs	r2, #2
 80025b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	2200      	movs	r2, #0
 80025c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	2102      	movs	r1, #2
 80025c6:	0018      	movs	r0, r3
 80025c8:	f002 faa4 	bl	8004b14 <HAL_RCC_ClockConfig>
 80025cc:	1e03      	subs	r3, r0, #0
 80025ce:	d001      	beq.n	80025d4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80025d0:	f000 faa6 	bl	8002b20 <Error_Handler>
  }
}
 80025d4:	46c0      	nop			; (mov r8, r8)
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b013      	add	sp, #76	; 0x4c
 80025da:	bd90      	pop	{r4, r7, pc}

080025dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025e2:	1d3b      	adds	r3, r7, #4
 80025e4:	0018      	movs	r0, r3
 80025e6:	230c      	movs	r3, #12
 80025e8:	001a      	movs	r2, r3
 80025ea:	2100      	movs	r1, #0
 80025ec:	f003 fb8f 	bl	8005d0e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80025f0:	4b46      	ldr	r3, [pc, #280]	; (800270c <MX_ADC1_Init+0x130>)
 80025f2:	4a47      	ldr	r2, [pc, #284]	; (8002710 <MX_ADC1_Init+0x134>)
 80025f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80025f6:	4b45      	ldr	r3, [pc, #276]	; (800270c <MX_ADC1_Init+0x130>)
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	0612      	lsls	r2, r2, #24
 80025fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025fe:	4b43      	ldr	r3, [pc, #268]	; (800270c <MX_ADC1_Init+0x130>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002604:	4b41      	ldr	r3, [pc, #260]	; (800270c <MX_ADC1_Init+0x130>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800260a:	4b40      	ldr	r3, [pc, #256]	; (800270c <MX_ADC1_Init+0x130>)
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	0392      	lsls	r2, r2, #14
 8002610:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002612:	4b3e      	ldr	r3, [pc, #248]	; (800270c <MX_ADC1_Init+0x130>)
 8002614:	2204      	movs	r2, #4
 8002616:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002618:	4b3c      	ldr	r3, [pc, #240]	; (800270c <MX_ADC1_Init+0x130>)
 800261a:	2200      	movs	r2, #0
 800261c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800261e:	4b3b      	ldr	r3, [pc, #236]	; (800270c <MX_ADC1_Init+0x130>)
 8002620:	2200      	movs	r2, #0
 8002622:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002624:	4b39      	ldr	r3, [pc, #228]	; (800270c <MX_ADC1_Init+0x130>)
 8002626:	2200      	movs	r2, #0
 8002628:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 800262a:	4b38      	ldr	r3, [pc, #224]	; (800270c <MX_ADC1_Init+0x130>)
 800262c:	2204      	movs	r2, #4
 800262e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8002630:	4b36      	ldr	r3, [pc, #216]	; (800270c <MX_ADC1_Init+0x130>)
 8002632:	2220      	movs	r2, #32
 8002634:	2101      	movs	r1, #1
 8002636:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002638:	4b34      	ldr	r3, [pc, #208]	; (800270c <MX_ADC1_Init+0x130>)
 800263a:	2200      	movs	r2, #0
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800263e:	4b33      	ldr	r3, [pc, #204]	; (800270c <MX_ADC1_Init+0x130>)
 8002640:	2200      	movs	r2, #0
 8002642:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002644:	4b31      	ldr	r3, [pc, #196]	; (800270c <MX_ADC1_Init+0x130>)
 8002646:	222c      	movs	r2, #44	; 0x2c
 8002648:	2100      	movs	r1, #0
 800264a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800264c:	4b2f      	ldr	r3, [pc, #188]	; (800270c <MX_ADC1_Init+0x130>)
 800264e:	2280      	movs	r2, #128	; 0x80
 8002650:	0152      	lsls	r2, r2, #5
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8002654:	4b2d      	ldr	r3, [pc, #180]	; (800270c <MX_ADC1_Init+0x130>)
 8002656:	2207      	movs	r2, #7
 8002658:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800265a:	4b2c      	ldr	r3, [pc, #176]	; (800270c <MX_ADC1_Init+0x130>)
 800265c:	2200      	movs	r2, #0
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002660:	4b2a      	ldr	r3, [pc, #168]	; (800270c <MX_ADC1_Init+0x130>)
 8002662:	223c      	movs	r2, #60	; 0x3c
 8002664:	2100      	movs	r1, #0
 8002666:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002668:	4b28      	ldr	r3, [pc, #160]	; (800270c <MX_ADC1_Init+0x130>)
 800266a:	2200      	movs	r2, #0
 800266c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800266e:	4b27      	ldr	r3, [pc, #156]	; (800270c <MX_ADC1_Init+0x130>)
 8002670:	0018      	movs	r0, r3
 8002672:	f000 fdfd 	bl	8003270 <HAL_ADC_Init>
 8002676:	1e03      	subs	r3, r0, #0
 8002678:	d001      	beq.n	800267e <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 800267a:	f000 fa51 	bl	8002b20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	2201      	movs	r2, #1
 8002682:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	2200      	movs	r2, #0
 8002688:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002690:	1d3a      	adds	r2, r7, #4
 8002692:	4b1e      	ldr	r3, [pc, #120]	; (800270c <MX_ADC1_Init+0x130>)
 8002694:	0011      	movs	r1, r2
 8002696:	0018      	movs	r0, r3
 8002698:	f001 f8bc 	bl	8003814 <HAL_ADC_ConfigChannel>
 800269c:	1e03      	subs	r3, r0, #0
 800269e:	d001      	beq.n	80026a4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80026a0:	f000 fa3e 	bl	8002b20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <MX_ADC1_Init+0x138>)
 80026a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	2204      	movs	r2, #4
 80026ae:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026b0:	1d3a      	adds	r2, r7, #4
 80026b2:	4b16      	ldr	r3, [pc, #88]	; (800270c <MX_ADC1_Init+0x130>)
 80026b4:	0011      	movs	r1, r2
 80026b6:	0018      	movs	r0, r3
 80026b8:	f001 f8ac 	bl	8003814 <HAL_ADC_ConfigChannel>
 80026bc:	1e03      	subs	r3, r0, #0
 80026be:	d001      	beq.n	80026c4 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80026c0:	f000 fa2e 	bl	8002b20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	4a14      	ldr	r2, [pc, #80]	; (8002718 <MX_ADC1_Init+0x13c>)
 80026c8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	2208      	movs	r2, #8
 80026ce:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026d0:	1d3a      	adds	r2, r7, #4
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <MX_ADC1_Init+0x130>)
 80026d4:	0011      	movs	r1, r2
 80026d6:	0018      	movs	r0, r3
 80026d8:	f001 f89c 	bl	8003814 <HAL_ADC_ConfigChannel>
 80026dc:	1e03      	subs	r3, r0, #0
 80026de:	d001      	beq.n	80026e4 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80026e0:	f000 fa1e 	bl	8002b20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	4a0d      	ldr	r2, [pc, #52]	; (800271c <MX_ADC1_Init+0x140>)
 80026e8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	220c      	movs	r2, #12
 80026ee:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026f0:	1d3a      	adds	r2, r7, #4
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <MX_ADC1_Init+0x130>)
 80026f4:	0011      	movs	r1, r2
 80026f6:	0018      	movs	r0, r3
 80026f8:	f001 f88c 	bl	8003814 <HAL_ADC_ConfigChannel>
 80026fc:	1e03      	subs	r3, r0, #0
 80026fe:	d001      	beq.n	8002704 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8002700:	f000 fa0e 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002704:	46c0      	nop			; (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	b004      	add	sp, #16
 800270a:	bd80      	pop	{r7, pc}
 800270c:	2000008c 	.word	0x2000008c
 8002710:	40012400 	.word	0x40012400
 8002714:	04000002 	.word	0x04000002
 8002718:	08000004 	.word	0x08000004
 800271c:	0c000008 	.word	0x0c000008

08002720 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002724:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <MX_CRC_Init+0x40>)
 8002726:	4a0f      	ldr	r2, [pc, #60]	; (8002764 <MX_CRC_Init+0x44>)
 8002728:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <MX_CRC_Init+0x40>)
 800272c:	2200      	movs	r2, #0
 800272e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <MX_CRC_Init+0x40>)
 8002732:	2200      	movs	r2, #0
 8002734:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <MX_CRC_Init+0x40>)
 8002738:	2200      	movs	r2, #0
 800273a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <MX_CRC_Init+0x40>)
 800273e:	2200      	movs	r2, #0
 8002740:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <MX_CRC_Init+0x40>)
 8002744:	2201      	movs	r2, #1
 8002746:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <MX_CRC_Init+0x40>)
 800274a:	0018      	movs	r0, r3
 800274c:	f001 fc14 	bl	8003f78 <HAL_CRC_Init>
 8002750:	1e03      	subs	r3, r0, #0
 8002752:	d001      	beq.n	8002758 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002754:	f000 f9e4 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	200000f0 	.word	0x200000f0
 8002764:	40023000 	.word	0x40023000

08002768 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800276c:	4b23      	ldr	r3, [pc, #140]	; (80027fc <MX_USART1_UART_Init+0x94>)
 800276e:	4a24      	ldr	r2, [pc, #144]	; (8002800 <MX_USART1_UART_Init+0x98>)
 8002770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002772:	4b22      	ldr	r3, [pc, #136]	; (80027fc <MX_USART1_UART_Init+0x94>)
 8002774:	22e1      	movs	r2, #225	; 0xe1
 8002776:	0252      	lsls	r2, r2, #9
 8002778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <MX_USART1_UART_Init+0x94>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002780:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <MX_USART1_UART_Init+0x94>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <MX_USART1_UART_Init+0x94>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <MX_USART1_UART_Init+0x94>)
 800278e:	220c      	movs	r2, #12
 8002790:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002792:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <MX_USART1_UART_Init+0x94>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002798:	4b18      	ldr	r3, [pc, #96]	; (80027fc <MX_USART1_UART_Init+0x94>)
 800279a:	2200      	movs	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800279e:	4b17      	ldr	r3, [pc, #92]	; (80027fc <MX_USART1_UART_Init+0x94>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027a4:	4b15      	ldr	r3, [pc, #84]	; (80027fc <MX_USART1_UART_Init+0x94>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027aa:	4b14      	ldr	r3, [pc, #80]	; (80027fc <MX_USART1_UART_Init+0x94>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027b0:	4b12      	ldr	r3, [pc, #72]	; (80027fc <MX_USART1_UART_Init+0x94>)
 80027b2:	0018      	movs	r0, r3
 80027b4:	f002 fc8c 	bl	80050d0 <HAL_UART_Init>
 80027b8:	1e03      	subs	r3, r0, #0
 80027ba:	d001      	beq.n	80027c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80027bc:	f000 f9b0 	bl	8002b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027c0:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <MX_USART1_UART_Init+0x94>)
 80027c2:	2100      	movs	r1, #0
 80027c4:	0018      	movs	r0, r3
 80027c6:	f003 f98f 	bl	8005ae8 <HAL_UARTEx_SetTxFifoThreshold>
 80027ca:	1e03      	subs	r3, r0, #0
 80027cc:	d001      	beq.n	80027d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80027ce:	f000 f9a7 	bl	8002b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <MX_USART1_UART_Init+0x94>)
 80027d4:	2100      	movs	r1, #0
 80027d6:	0018      	movs	r0, r3
 80027d8:	f003 f9c6 	bl	8005b68 <HAL_UARTEx_SetRxFifoThreshold>
 80027dc:	1e03      	subs	r3, r0, #0
 80027de:	d001      	beq.n	80027e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80027e0:	f000 f99e 	bl	8002b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <MX_USART1_UART_Init+0x94>)
 80027e6:	0018      	movs	r0, r3
 80027e8:	f003 f944 	bl	8005a74 <HAL_UARTEx_DisableFifoMode>
 80027ec:	1e03      	subs	r3, r0, #0
 80027ee:	d001      	beq.n	80027f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80027f0:	f000 f996 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	20000114 	.word	0x20000114
 8002800:	40013800 	.word	0x40013800

08002804 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002808:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <MX_USART3_UART_Init+0x74>)
 800280a:	4a1c      	ldr	r2, [pc, #112]	; (800287c <MX_USART3_UART_Init+0x78>)
 800280c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800280e:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <MX_USART3_UART_Init+0x74>)
 8002810:	22e1      	movs	r2, #225	; 0xe1
 8002812:	0252      	lsls	r2, r2, #9
 8002814:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002816:	4b18      	ldr	r3, [pc, #96]	; (8002878 <MX_USART3_UART_Init+0x74>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800281c:	4b16      	ldr	r3, [pc, #88]	; (8002878 <MX_USART3_UART_Init+0x74>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <MX_USART3_UART_Init+0x74>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002828:	4b13      	ldr	r3, [pc, #76]	; (8002878 <MX_USART3_UART_Init+0x74>)
 800282a:	220c      	movs	r2, #12
 800282c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <MX_USART3_UART_Init+0x74>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <MX_USART3_UART_Init+0x74>)
 8002836:	2200      	movs	r2, #0
 8002838:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800283a:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <MX_USART3_UART_Init+0x74>)
 800283c:	2200      	movs	r2, #0
 800283e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002840:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <MX_USART3_UART_Init+0x74>)
 8002842:	2200      	movs	r2, #0
 8002844:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <MX_USART3_UART_Init+0x74>)
 8002848:	2200      	movs	r2, #0
 800284a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800284c:	480a      	ldr	r0, [pc, #40]	; (8002878 <MX_USART3_UART_Init+0x74>)
 800284e:	2300      	movs	r3, #0
 8002850:	2200      	movs	r2, #0
 8002852:	2100      	movs	r1, #0
 8002854:	f003 f89c 	bl	8005990 <HAL_RS485Ex_Init>
 8002858:	1e03      	subs	r3, r0, #0
 800285a:	d001      	beq.n	8002860 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 800285c:	f000 f960 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <MX_USART3_UART_Init+0x74>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <MX_USART3_UART_Init+0x74>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2120      	movs	r1, #32
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART3_Init 2 */

}
 8002870:	46c0      	nop			; (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	200001a8 	.word	0x200001a8
 800287c:	40004800 	.word	0x40004800

08002880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b08b      	sub	sp, #44	; 0x2c
 8002884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002886:	2414      	movs	r4, #20
 8002888:	193b      	adds	r3, r7, r4
 800288a:	0018      	movs	r0, r3
 800288c:	2314      	movs	r3, #20
 800288e:	001a      	movs	r2, r3
 8002890:	2100      	movs	r1, #0
 8002892:	f003 fa3c 	bl	8005d0e <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002896:	4b5a      	ldr	r3, [pc, #360]	; (8002a00 <MX_GPIO_Init+0x180>)
 8002898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800289a:	4b59      	ldr	r3, [pc, #356]	; (8002a00 <MX_GPIO_Init+0x180>)
 800289c:	2104      	movs	r1, #4
 800289e:	430a      	orrs	r2, r1
 80028a0:	635a      	str	r2, [r3, #52]	; 0x34
 80028a2:	4b57      	ldr	r3, [pc, #348]	; (8002a00 <MX_GPIO_Init+0x180>)
 80028a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a6:	2204      	movs	r2, #4
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	4b54      	ldr	r3, [pc, #336]	; (8002a00 <MX_GPIO_Init+0x180>)
 80028b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b2:	4b53      	ldr	r3, [pc, #332]	; (8002a00 <MX_GPIO_Init+0x180>)
 80028b4:	2101      	movs	r1, #1
 80028b6:	430a      	orrs	r2, r1
 80028b8:	635a      	str	r2, [r3, #52]	; 0x34
 80028ba:	4b51      	ldr	r3, [pc, #324]	; (8002a00 <MX_GPIO_Init+0x180>)
 80028bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028be:	2201      	movs	r2, #1
 80028c0:	4013      	ands	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c6:	4b4e      	ldr	r3, [pc, #312]	; (8002a00 <MX_GPIO_Init+0x180>)
 80028c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ca:	4b4d      	ldr	r3, [pc, #308]	; (8002a00 <MX_GPIO_Init+0x180>)
 80028cc:	2102      	movs	r1, #2
 80028ce:	430a      	orrs	r2, r1
 80028d0:	635a      	str	r2, [r3, #52]	; 0x34
 80028d2:	4b4b      	ldr	r3, [pc, #300]	; (8002a00 <MX_GPIO_Init+0x180>)
 80028d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d6:	2202      	movs	r2, #2
 80028d8:	4013      	ands	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028de:	4b48      	ldr	r3, [pc, #288]	; (8002a00 <MX_GPIO_Init+0x180>)
 80028e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e2:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <MX_GPIO_Init+0x180>)
 80028e4:	2108      	movs	r1, #8
 80028e6:	430a      	orrs	r2, r1
 80028e8:	635a      	str	r2, [r3, #52]	; 0x34
 80028ea:	4b45      	ldr	r3, [pc, #276]	; (8002a00 <MX_GPIO_Init+0x180>)
 80028ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ee:	2208      	movs	r2, #8
 80028f0:	4013      	ands	r3, r2
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_Pin|GREEN_Pin|RED_Pin|PC7_Pin
 80028f6:	4943      	ldr	r1, [pc, #268]	; (8002a04 <MX_GPIO_Init+0x184>)
 80028f8:	4b43      	ldr	r3, [pc, #268]	; (8002a08 <MX_GPIO_Init+0x188>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	0018      	movs	r0, r3
 80028fe:	f001 fd90 	bl	8004422 <HAL_GPIO_WritePin>
                          |PC7C7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, GPIO_PIN_SET);
 8002902:	23a0      	movs	r3, #160	; 0xa0
 8002904:	05db      	lsls	r3, r3, #23
 8002906:	2201      	movs	r2, #1
 8002908:	2180      	movs	r1, #128	; 0x80
 800290a:	0018      	movs	r0, r3
 800290c:	f001 fd89 	bl	8004422 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin, GPIO_PIN_SET);
 8002910:	493e      	ldr	r1, [pc, #248]	; (8002a0c <MX_GPIO_Init+0x18c>)
 8002912:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <MX_GPIO_Init+0x190>)
 8002914:	2201      	movs	r2, #1
 8002916:	0018      	movs	r0, r3
 8002918:	f001 fd83 	bl	8004422 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB12_Pin|PB13_Pin|PB15_Pin|PB3_Pin
 800291c:	493d      	ldr	r1, [pc, #244]	; (8002a14 <MX_GPIO_Init+0x194>)
 800291e:	4b3c      	ldr	r3, [pc, #240]	; (8002a10 <MX_GPIO_Init+0x190>)
 8002920:	2200      	movs	r2, #0
 8002922:	0018      	movs	r0, r3
 8002924:	f001 fd7d 	bl	8004422 <HAL_GPIO_WritePin>
                          |PB4_Pin|COL4_Pin|COL3_Pin|COL2_Pin
                          |COL1_Pin|COL0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA8_Pin|PA11_Pin|PA12_Pin|PA15_Pin, GPIO_PIN_RESET);
 8002928:	2399      	movs	r3, #153	; 0x99
 800292a:	0219      	lsls	r1, r3, #8
 800292c:	23a0      	movs	r3, #160	; 0xa0
 800292e:	05db      	lsls	r3, r3, #23
 8002930:	2200      	movs	r2, #0
 8002932:	0018      	movs	r0, r3
 8002934:	f001 fd75 	bl	8004422 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD0_Pin|PD1_Pin|PD2_Pin|PD3_Pin, GPIO_PIN_RESET);
 8002938:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <MX_GPIO_Init+0x198>)
 800293a:	2200      	movs	r2, #0
 800293c:	210f      	movs	r1, #15
 800293e:	0018      	movs	r0, r3
 8002940:	f001 fd6f 	bl	8004422 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLUE_Pin GREEN_Pin RED_Pin PC7_Pin
                           PC7C7_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin|GREEN_Pin|RED_Pin|PC7_Pin
 8002944:	193b      	adds	r3, r7, r4
 8002946:	4a2f      	ldr	r2, [pc, #188]	; (8002a04 <MX_GPIO_Init+0x184>)
 8002948:	601a      	str	r2, [r3, #0]
                          |PC7C7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294a:	193b      	adds	r3, r7, r4
 800294c:	2201      	movs	r2, #1
 800294e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	193b      	adds	r3, r7, r4
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	193b      	adds	r3, r7, r4
 8002958:	2200      	movs	r2, #0
 800295a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800295c:	193b      	adds	r3, r7, r4
 800295e:	4a2a      	ldr	r2, [pc, #168]	; (8002a08 <MX_GPIO_Init+0x188>)
 8002960:	0019      	movs	r1, r3
 8002962:	0010      	movs	r0, r2
 8002964:	f001 fbdc 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_Pin */
  GPIO_InitStruct.Pin = START_Pin;
 8002968:	193b      	adds	r3, r7, r4
 800296a:	2240      	movs	r2, #64	; 0x40
 800296c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800296e:	193b      	adds	r3, r7, r4
 8002970:	2200      	movs	r2, #0
 8002972:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	193b      	adds	r3, r7, r4
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 800297a:	193a      	adds	r2, r7, r4
 800297c:	23a0      	movs	r3, #160	; 0xa0
 800297e:	05db      	lsls	r3, r3, #23
 8002980:	0011      	movs	r1, r2
 8002982:	0018      	movs	r0, r3
 8002984:	f001 fbcc 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pins : R0_Pin PA8_Pin PA11_Pin PA12_Pin
                           PA15_Pin */
  GPIO_InitStruct.Pin = R0_Pin|PA8_Pin|PA11_Pin|PA12_Pin
 8002988:	193b      	adds	r3, r7, r4
 800298a:	4a24      	ldr	r2, [pc, #144]	; (8002a1c <MX_GPIO_Init+0x19c>)
 800298c:	601a      	str	r2, [r3, #0]
                          |PA15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298e:	193b      	adds	r3, r7, r4
 8002990:	2201      	movs	r2, #1
 8002992:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	193b      	adds	r3, r7, r4
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	193b      	adds	r3, r7, r4
 800299c:	2200      	movs	r2, #0
 800299e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	193a      	adds	r2, r7, r4
 80029a2:	23a0      	movs	r3, #160	; 0xa0
 80029a4:	05db      	lsls	r3, r3, #23
 80029a6:	0011      	movs	r1, r2
 80029a8:	0018      	movs	r0, r3
 80029aa:	f001 fbb9 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin
                           PB12_Pin PB13_Pin PB15_Pin PB3_Pin
                           PB4_Pin COL4_Pin COL3_Pin COL2_Pin
                           COL1_Pin COL0_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin
 80029ae:	193b      	adds	r3, r7, r4
 80029b0:	4a1b      	ldr	r2, [pc, #108]	; (8002a20 <MX_GPIO_Init+0x1a0>)
 80029b2:	601a      	str	r2, [r3, #0]
                          |PB12_Pin|PB13_Pin|PB15_Pin|PB3_Pin
                          |PB4_Pin|COL4_Pin|COL3_Pin|COL2_Pin
                          |COL1_Pin|COL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b4:	193b      	adds	r3, r7, r4
 80029b6:	2201      	movs	r2, #1
 80029b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	193b      	adds	r3, r7, r4
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c0:	193b      	adds	r3, r7, r4
 80029c2:	2200      	movs	r2, #0
 80029c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c6:	193b      	adds	r3, r7, r4
 80029c8:	4a11      	ldr	r2, [pc, #68]	; (8002a10 <MX_GPIO_Init+0x190>)
 80029ca:	0019      	movs	r1, r3
 80029cc:	0010      	movs	r0, r2
 80029ce:	f001 fba7 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0_Pin PD1_Pin PD2_Pin PD3_Pin */
  GPIO_InitStruct.Pin = PD0_Pin|PD1_Pin|PD2_Pin|PD3_Pin;
 80029d2:	0021      	movs	r1, r4
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	220f      	movs	r2, #15
 80029d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029da:	187b      	adds	r3, r7, r1
 80029dc:	2201      	movs	r2, #1
 80029de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	2200      	movs	r2, #0
 80029ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <MX_GPIO_Init+0x198>)
 80029f0:	0019      	movs	r1, r3
 80029f2:	0010      	movs	r0, r2
 80029f4:	f001 fb94 	bl	8004120 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b00b      	add	sp, #44	; 0x2c
 80029fe:	bd90      	pop	{r4, r7, pc}
 8002a00:	40021000 	.word	0x40021000
 8002a04:	0000e0c0 	.word	0x0000e0c0
 8002a08:	50000800 	.word	0x50000800
 8002a0c:	00000407 	.word	0x00000407
 8002a10:	50000400 	.word	0x50000400
 8002a14:	0000b3f8 	.word	0x0000b3f8
 8002a18:	50000c00 	.word	0x50000c00
 8002a1c:	00009980 	.word	0x00009980
 8002a20:	0000b7ff 	.word	0x0000b7ff

08002a24 <sendDataCal>:
	packet[packet_len - 2] = crc >> 8;
	packet[packet_len - 1] = crc & 0xFF;
	HAL_UART_Transmit (&huart3, packet, packet_len, 10);
}

void sendDataCal(){
 8002a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a26:	46ce      	mov	lr, r9
 8002a28:	4647      	mov	r7, r8
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b089      	sub	sp, #36	; 0x24
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	466e      	mov	r6, sp
 8002a32:	46b0      	mov	r8, r6
	uint8_t packet_len = NUM_TEMPERATURES*2 + 2;
 8002a34:	260f      	movs	r6, #15
 8002a36:	0032      	movs	r2, r6
 8002a38:	2310      	movs	r3, #16
 8002a3a:	18f3      	adds	r3, r6, r3
 8002a3c:	19de      	adds	r6, r3, r7
 8002a3e:	2322      	movs	r3, #34	; 0x22
 8002a40:	469c      	mov	ip, r3
 8002a42:	4663      	mov	r3, ip
 8002a44:	7033      	strb	r3, [r6, #0]
	uint8_t packet[packet_len];
 8002a46:	0016      	movs	r6, r2
 8002a48:	2310      	movs	r3, #16
 8002a4a:	18f3      	adds	r3, r6, r3
 8002a4c:	19de      	adds	r6, r3, r7
 8002a4e:	7836      	ldrb	r6, [r6, #0]
 8002a50:	46b4      	mov	ip, r6
 8002a52:	2301      	movs	r3, #1
 8002a54:	425b      	negs	r3, r3
 8002a56:	4699      	mov	r9, r3
 8002a58:	44cc      	add	ip, r9
 8002a5a:	4663      	mov	r3, ip
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	60be      	str	r6, [r7, #8]
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	0f5b      	lsrs	r3, r3, #29
 8002a68:	469c      	mov	ip, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	00d9      	lsls	r1, r3, #3
 8002a6e:	4663      	mov	r3, ip
 8002a70:	4319      	orrs	r1, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	00d8      	lsls	r0, r3, #3
 8002a76:	0034      	movs	r4, r6
 8002a78:	2100      	movs	r1, #0
 8002a7a:	000d      	movs	r5, r1
 8002a7c:	0f61      	lsrs	r1, r4, #29
 8002a7e:	00eb      	lsls	r3, r5, #3
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	00e3      	lsls	r3, r4, #3
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	0033      	movs	r3, r6
 8002a8e:	3307      	adds	r3, #7
 8002a90:	08db      	lsrs	r3, r3, #3
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	466a      	mov	r2, sp
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	469d      	mov	sp, r3
 8002a9a:	466b      	mov	r3, sp
 8002a9c:	3300      	adds	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
	memcpy(packet,adc_cal,NUM_TEMPERATURES*2);
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <sendDataCal+0xf4>)
 8002aa4:	0010      	movs	r0, r2
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	001a      	movs	r2, r3
 8002aac:	f003 f926 	bl	8005cfc <memcpy>
	uint16_t crc = calculateCRC16(packet, NUM_TEMPERATURES*2);
 8002ab0:	2312      	movs	r3, #18
 8002ab2:	18fc      	adds	r4, r7, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2120      	movs	r1, #32
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7ff fab3 	bl	8002024 <calculateCRC16>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	8023      	strh	r3, [r4, #0]
	packet[packet_len - 2] = crc >> 8;
 8002ac2:	2312      	movs	r3, #18
 8002ac4:	18fb      	adds	r3, r7, r3
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	200f      	movs	r0, #15
 8002ace:	2310      	movs	r3, #16
 8002ad0:	18c3      	adds	r3, r0, r3
 8002ad2:	19db      	adds	r3, r3, r7
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	3b02      	subs	r3, #2
 8002ad8:	b2d1      	uxtb	r1, r2
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	54d1      	strb	r1, [r2, r3]
	packet[packet_len - 1] = crc & 0xFF;
 8002ade:	2310      	movs	r3, #16
 8002ae0:	18c3      	adds	r3, r0, r3
 8002ae2:	19db      	adds	r3, r3, r7
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	2212      	movs	r2, #18
 8002aea:	18ba      	adds	r2, r7, r2
 8002aec:	8812      	ldrh	r2, [r2, #0]
 8002aee:	b2d1      	uxtb	r1, r2
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit (&huart3, packet, packet_len, 10);
 8002af4:	2310      	movs	r3, #16
 8002af6:	18c3      	adds	r3, r0, r3
 8002af8:	19db      	adds	r3, r3, r7
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	6979      	ldr	r1, [r7, #20]
 8002b00:	4806      	ldr	r0, [pc, #24]	; (8002b1c <sendDataCal+0xf8>)
 8002b02:	230a      	movs	r3, #10
 8002b04:	f002 fb3a 	bl	800517c <HAL_UART_Transmit>
 8002b08:	46c5      	mov	sp, r8
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b009      	add	sp, #36	; 0x24
 8002b10:	bcc0      	pop	{r6, r7}
 8002b12:	46b9      	mov	r9, r7
 8002b14:	46b0      	mov	r8, r6
 8002b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b18:	2000027c 	.word	0x2000027c
 8002b1c:	200001a8 	.word	0x200001a8

08002b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b24:	b672      	cpsid	i
}
 8002b26:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <Error_Handler+0x8>
	...

08002b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b32:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <HAL_MspInit+0x44>)
 8002b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b36:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <HAL_MspInit+0x44>)
 8002b38:	2101      	movs	r1, #1
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <HAL_MspInit+0x44>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	2201      	movs	r2, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_MspInit+0x44>)
 8002b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <HAL_MspInit+0x44>)
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	0549      	lsls	r1, r1, #21
 8002b54:	430a      	orrs	r2, r1
 8002b56:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_MspInit+0x44>)
 8002b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	055b      	lsls	r3, r3, #21
 8002b60:	4013      	ands	r3, r2
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b002      	add	sp, #8
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	40021000 	.word	0x40021000

08002b74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b08b      	sub	sp, #44	; 0x2c
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	2414      	movs	r4, #20
 8002b7e:	193b      	adds	r3, r7, r4
 8002b80:	0018      	movs	r0, r3
 8002b82:	2314      	movs	r3, #20
 8002b84:	001a      	movs	r2, r3
 8002b86:	2100      	movs	r1, #0
 8002b88:	f003 f8c1 	bl	8005d0e <memset>
  if(hadc->Instance==ADC1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <HAL_ADC_MspInit+0x80>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d129      	bne.n	8002bea <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002b96:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <HAL_ADC_MspInit+0x84>)
 8002b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b9a:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <HAL_ADC_MspInit+0x84>)
 8002b9c:	2180      	movs	r1, #128	; 0x80
 8002b9e:	0349      	lsls	r1, r1, #13
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <HAL_ADC_MspInit+0x84>)
 8002ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	035b      	lsls	r3, r3, #13
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HAL_ADC_MspInit+0x84>)
 8002bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb6:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <HAL_ADC_MspInit+0x84>)
 8002bb8:	2101      	movs	r1, #1
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	635a      	str	r2, [r3, #52]	; 0x34
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <HAL_ADC_MspInit+0x84>)
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin
 8002bca:	193b      	adds	r3, r7, r4
 8002bcc:	221f      	movs	r2, #31
 8002bce:	601a      	str	r2, [r3, #0]
                          |S4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bd0:	193b      	adds	r3, r7, r4
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	193b      	adds	r3, r7, r4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bdc:	193a      	adds	r2, r7, r4
 8002bde:	23a0      	movs	r3, #160	; 0xa0
 8002be0:	05db      	lsls	r3, r3, #23
 8002be2:	0011      	movs	r1, r2
 8002be4:	0018      	movs	r0, r3
 8002be6:	f001 fa9b 	bl	8004120 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b00b      	add	sp, #44	; 0x2c
 8002bf0:	bd90      	pop	{r4, r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	40012400 	.word	0x40012400
 8002bf8:	40021000 	.word	0x40021000

08002bfc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <HAL_CRC_MspInit+0x38>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d10d      	bne.n	8002c2a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <HAL_CRC_MspInit+0x3c>)
 8002c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <HAL_CRC_MspInit+0x3c>)
 8002c14:	2180      	movs	r1, #128	; 0x80
 8002c16:	0149      	lsls	r1, r1, #5
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	639a      	str	r2, [r3, #56]	; 0x38
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_CRC_MspInit+0x3c>)
 8002c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	015b      	lsls	r3, r3, #5
 8002c24:	4013      	ands	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b004      	add	sp, #16
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	40023000 	.word	0x40023000
 8002c38:	40021000 	.word	0x40021000

08002c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b095      	sub	sp, #84	; 0x54
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	233c      	movs	r3, #60	; 0x3c
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	0018      	movs	r0, r3
 8002c4a:	2314      	movs	r3, #20
 8002c4c:	001a      	movs	r2, r3
 8002c4e:	2100      	movs	r1, #0
 8002c50:	f003 f85d 	bl	8005d0e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c54:	2420      	movs	r4, #32
 8002c56:	193b      	adds	r3, r7, r4
 8002c58:	0018      	movs	r0, r3
 8002c5a:	231c      	movs	r3, #28
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	2100      	movs	r1, #0
 8002c60:	f003 f855 	bl	8005d0e <memset>
  if(huart->Instance==USART1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a50      	ldr	r2, [pc, #320]	; (8002dac <HAL_UART_MspInit+0x170>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d140      	bne.n	8002cf0 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c6e:	193b      	adds	r3, r7, r4
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002c74:	193b      	adds	r3, r7, r4
 8002c76:	2200      	movs	r2, #0
 8002c78:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f002 f8f3 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 8002c82:	1e03      	subs	r3, r0, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c86:	f7ff ff4b 	bl	8002b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c8a:	4b49      	ldr	r3, [pc, #292]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c8e:	4b48      	ldr	r3, [pc, #288]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002c90:	2180      	movs	r1, #128	; 0x80
 8002c92:	01c9      	lsls	r1, r1, #7
 8002c94:	430a      	orrs	r2, r1
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40
 8002c98:	4b45      	ldr	r3, [pc, #276]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	01db      	lsls	r3, r3, #7
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca6:	4b42      	ldr	r3, [pc, #264]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002caa:	4b41      	ldr	r3, [pc, #260]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002cac:	2101      	movs	r1, #1
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002cb2:	4b3f      	ldr	r3, [pc, #252]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cbe:	213c      	movs	r1, #60	; 0x3c
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	22c0      	movs	r2, #192	; 0xc0
 8002cc4:	00d2      	lsls	r2, r2, #3
 8002cc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	2202      	movs	r2, #2
 8002ccc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd4:	187b      	adds	r3, r7, r1
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	2201      	movs	r2, #1
 8002cde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce0:	187a      	adds	r2, r7, r1
 8002ce2:	23a0      	movs	r3, #160	; 0xa0
 8002ce4:	05db      	lsls	r3, r3, #23
 8002ce6:	0011      	movs	r1, r2
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f001 fa19 	bl	8004120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002cee:	e058      	b.n	8002da2 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART3)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a2f      	ldr	r2, [pc, #188]	; (8002db4 <HAL_UART_MspInit+0x178>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d153      	bne.n	8002da2 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cfa:	4b2d      	ldr	r3, [pc, #180]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cfe:	4b2c      	ldr	r3, [pc, #176]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002d00:	2180      	movs	r1, #128	; 0x80
 8002d02:	02c9      	lsls	r1, r1, #11
 8002d04:	430a      	orrs	r2, r1
 8002d06:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d08:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	02db      	lsls	r3, r3, #11
 8002d10:	4013      	ands	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d16:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d1a:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	635a      	str	r2, [r3, #52]	; 0x34
 8002d22:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d26:	2201      	movs	r2, #1
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2e:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d32:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002d34:	2102      	movs	r1, #2
 8002d36:	430a      	orrs	r2, r1
 8002d38:	635a      	str	r2, [r3, #52]	; 0x34
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_UART_MspInit+0x174>)
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3e:	2202      	movs	r2, #2
 8002d40:	4013      	ands	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U3TX_Pin;
 8002d46:	243c      	movs	r4, #60	; 0x3c
 8002d48:	193b      	adds	r3, r7, r4
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	193b      	adds	r3, r7, r4
 8002d50:	2202      	movs	r2, #2
 8002d52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	193b      	adds	r3, r7, r4
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5a:	193b      	adds	r3, r7, r4
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002d60:	193b      	adds	r3, r7, r4
 8002d62:	2204      	movs	r2, #4
 8002d64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(U3TX_GPIO_Port, &GPIO_InitStruct);
 8002d66:	193a      	adds	r2, r7, r4
 8002d68:	23a0      	movs	r3, #160	; 0xa0
 8002d6a:	05db      	lsls	r3, r3, #23
 8002d6c:	0011      	movs	r1, r2
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f001 f9d6 	bl	8004120 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = U3RX_Pin|U3DE_Pin;
 8002d74:	0021      	movs	r1, r4
 8002d76:	187b      	adds	r3, r7, r1
 8002d78:	2290      	movs	r2, #144	; 0x90
 8002d7a:	01d2      	lsls	r2, r2, #7
 8002d7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	2202      	movs	r2, #2
 8002d82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	2204      	movs	r2, #4
 8002d94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	4a07      	ldr	r2, [pc, #28]	; (8002db8 <HAL_UART_MspInit+0x17c>)
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	0010      	movs	r0, r2
 8002d9e:	f001 f9bf 	bl	8004120 <HAL_GPIO_Init>
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b015      	add	sp, #84	; 0x54
 8002da8:	bd90      	pop	{r4, r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40004800 	.word	0x40004800
 8002db8:	50000400 	.word	0x50000400

08002dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <NMI_Handler+0x4>

08002dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc6:	e7fe      	b.n	8002dc6 <HardFault_Handler+0x4>

08002dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002de0:	f000 f89c 	bl	8002f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002df4:	480d      	ldr	r0, [pc, #52]	; (8002e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002df6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002df8:	f7ff fff7 	bl	8002dea <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dfc:	480c      	ldr	r0, [pc, #48]	; (8002e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dfe:	490d      	ldr	r1, [pc, #52]	; (8002e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e00:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <LoopForever+0xe>)
  movs r3, #0
 8002e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e04:	e002      	b.n	8002e0c <LoopCopyDataInit>

08002e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e0a:	3304      	adds	r3, #4

08002e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e10:	d3f9      	bcc.n	8002e06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e12:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e14:	4c0a      	ldr	r4, [pc, #40]	; (8002e40 <LoopForever+0x16>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e18:	e001      	b.n	8002e1e <LoopFillZerobss>

08002e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e1c:	3204      	adds	r2, #4

08002e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e20:	d3fb      	bcc.n	8002e1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e22:	f002 ff47 	bl	8005cb4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002e26:	f7ff fb35 	bl	8002494 <main>

08002e2a <LoopForever>:

LoopForever:
  b LoopForever
 8002e2a:	e7fe      	b.n	8002e2a <LoopForever>
  ldr   r0, =_estack
 8002e2c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002e38:	080064d4 	.word	0x080064d4
  ldr r2, =_sbss
 8002e3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002e40:	200002a0 	.word	0x200002a0

08002e44 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e44:	e7fe      	b.n	8002e44 <ADC1_IRQHandler>
	...

08002e48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e4e:	1dfb      	adds	r3, r7, #7
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_Init+0x3c>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <HAL_Init+0x3c>)
 8002e5a:	2180      	movs	r1, #128	; 0x80
 8002e5c:	0049      	lsls	r1, r1, #1
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e62:	2003      	movs	r0, #3
 8002e64:	f000 f810 	bl	8002e88 <HAL_InitTick>
 8002e68:	1e03      	subs	r3, r0, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002e6c:	1dfb      	adds	r3, r7, #7
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	e001      	b.n	8002e78 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002e74:	f7ff fe5a 	bl	8002b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e78:	1dfb      	adds	r3, r7, #7
 8002e7a:	781b      	ldrb	r3, [r3, #0]
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40022000 	.word	0x40022000

08002e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e88:	b590      	push	{r4, r7, lr}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e90:	230f      	movs	r3, #15
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <HAL_InitTick+0x88>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d02b      	beq.n	8002ef8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002ea0:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <HAL_InitTick+0x8c>)
 8002ea2:	681c      	ldr	r4, [r3, #0]
 8002ea4:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <HAL_InitTick+0x88>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	23fa      	movs	r3, #250	; 0xfa
 8002eac:	0098      	lsls	r0, r3, #2
 8002eae:	f7fd f927 	bl	8000100 <__udivsi3>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	0020      	movs	r0, r4
 8002eb8:	f7fd f922 	bl	8000100 <__udivsi3>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f001 f84d 	bl	8003f5e <HAL_SYSTICK_Config>
 8002ec4:	1e03      	subs	r3, r0, #0
 8002ec6:	d112      	bne.n	8002eee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d80a      	bhi.n	8002ee4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	425b      	negs	r3, r3
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f001 f82c 	bl	8003f34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002edc:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <HAL_InitTick+0x90>)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	e00d      	b.n	8002f00 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002ee4:	230f      	movs	r3, #15
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e008      	b.n	8002f00 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002eee:	230f      	movs	r3, #15
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e003      	b.n	8002f00 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ef8:	230f      	movs	r3, #15
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	2201      	movs	r2, #1
 8002efe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002f00:	230f      	movs	r3, #15
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	781b      	ldrb	r3, [r3, #0]
}
 8002f06:	0018      	movs	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b005      	add	sp, #20
 8002f0c:	bd90      	pop	{r4, r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	20000008 	.word	0x20000008
 8002f14:	20000000 	.word	0x20000000
 8002f18:	20000004 	.word	0x20000004

08002f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_IncTick+0x1c>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	001a      	movs	r2, r3
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <HAL_IncTick+0x20>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	18d2      	adds	r2, r2, r3
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <HAL_IncTick+0x20>)
 8002f2e:	601a      	str	r2, [r3, #0]
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	20000008 	.word	0x20000008
 8002f3c:	2000029c 	.word	0x2000029c

08002f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  return uwTick;
 8002f44:	4b02      	ldr	r3, [pc, #8]	; (8002f50 <HAL_GetTick+0x10>)
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	2000029c 	.word	0x2000029c

08002f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7ff fff0 	bl	8002f40 <HAL_GetTick>
 8002f60:	0003      	movs	r3, r0
 8002f62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	d005      	beq.n	8002f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <HAL_Delay+0x44>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	001a      	movs	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	189b      	adds	r3, r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	f7ff ffe0 	bl	8002f40 <HAL_GetTick>
 8002f80:	0002      	movs	r2, r0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d8f7      	bhi.n	8002f7c <HAL_Delay+0x28>
  {
  }
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b004      	add	sp, #16
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	20000008 	.word	0x20000008

08002f9c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a05      	ldr	r2, [pc, #20]	; (8002fc0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002fac:	401a      	ands	r2, r3
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	601a      	str	r2, [r3, #0]
}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b002      	add	sp, #8
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	fe3fffff 	.word	0xfe3fffff

08002fc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	23e0      	movs	r3, #224	; 0xe0
 8002fd2:	045b      	lsls	r3, r3, #17
 8002fd4:	4013      	ands	r3, r2
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b002      	add	sp, #8
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	2104      	movs	r1, #4
 8002ff2:	400a      	ands	r2, r1
 8002ff4:	2107      	movs	r1, #7
 8002ff6:	4091      	lsls	r1, r2
 8002ff8:	000a      	movs	r2, r1
 8002ffa:	43d2      	mvns	r2, r2
 8002ffc:	401a      	ands	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2104      	movs	r1, #4
 8003002:	400b      	ands	r3, r1
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4099      	lsls	r1, r3
 8003008:	000b      	movs	r3, r1
 800300a:	431a      	orrs	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	b004      	add	sp, #16
 8003016:	bd80      	pop	{r7, pc}

08003018 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	2104      	movs	r1, #4
 800302a:	400a      	ands	r2, r1
 800302c:	2107      	movs	r1, #7
 800302e:	4091      	lsls	r1, r2
 8003030:	000a      	movs	r2, r1
 8003032:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2104      	movs	r1, #4
 8003038:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800303a:	40da      	lsrs	r2, r3
 800303c:	0013      	movs	r3, r2
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b002      	add	sp, #8
 8003044:	bd80      	pop	{r7, pc}

08003046 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	23c0      	movs	r3, #192	; 0xc0
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	4013      	ands	r3, r2
 8003058:	d101      	bne.n	800305e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800305e:	2300      	movs	r3, #0
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}

08003068 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	211f      	movs	r1, #31
 800307c:	400a      	ands	r2, r1
 800307e:	210f      	movs	r1, #15
 8003080:	4091      	lsls	r1, r2
 8003082:	000a      	movs	r2, r1
 8003084:	43d2      	mvns	r2, r2
 8003086:	401a      	ands	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	0e9b      	lsrs	r3, r3, #26
 800308c:	210f      	movs	r1, #15
 800308e:	4019      	ands	r1, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	201f      	movs	r0, #31
 8003094:	4003      	ands	r3, r0
 8003096:	4099      	lsls	r1, r3
 8003098:	000b      	movs	r3, r1
 800309a:	431a      	orrs	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b004      	add	sp, #16
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	035b      	lsls	r3, r3, #13
 80030ba:	0b5b      	lsrs	r3, r3, #13
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b002      	add	sp, #8
 80030c8:	bd80      	pop	{r7, pc}

080030ca <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	0352      	lsls	r2, r2, #13
 80030dc:	0b52      	lsrs	r2, r2, #13
 80030de:	43d2      	mvns	r2, r2
 80030e0:	401a      	ands	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b002      	add	sp, #8
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	0212      	lsls	r2, r2, #8
 8003104:	43d2      	mvns	r2, r2
 8003106:	401a      	ands	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	400b      	ands	r3, r1
 8003110:	4904      	ldr	r1, [pc, #16]	; (8003124 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003112:	400b      	ands	r3, r1
 8003114:	431a      	orrs	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b004      	add	sp, #16
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	07ffff00 	.word	0x07ffff00

08003128 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a05      	ldr	r2, [pc, #20]	; (800314c <LL_ADC_EnableInternalRegulator+0x24>)
 8003136:	4013      	ands	r3, r2
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	0552      	lsls	r2, r2, #21
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b002      	add	sp, #8
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	6fffffe8 	.word	0x6fffffe8

08003150 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	055b      	lsls	r3, r3, #21
 8003160:	401a      	ands	r2, r3
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	055b      	lsls	r3, r3, #21
 8003166:	429a      	cmp	r2, r3
 8003168:	d101      	bne.n	800316e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800316e:	2300      	movs	r3, #0
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b002      	add	sp, #8
 8003176:	bd80      	pop	{r7, pc}

08003178 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <LL_ADC_Enable+0x20>)
 8003186:	4013      	ands	r3, r2
 8003188:	2201      	movs	r2, #1
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b002      	add	sp, #8
 8003196:	bd80      	pop	{r7, pc}
 8003198:	7fffffe8 	.word	0x7fffffe8

0800319c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a04      	ldr	r2, [pc, #16]	; (80031bc <LL_ADC_Disable+0x20>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	2202      	movs	r2, #2
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	7fffffe8 	.word	0x7fffffe8

080031c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2201      	movs	r2, #1
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <LL_ADC_IsEnabled+0x18>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <LL_ADC_IsEnabled+0x1a>
 80031d8:	2300      	movs	r3, #0
}
 80031da:	0018      	movs	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	b002      	add	sp, #8
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2202      	movs	r2, #2
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d101      	bne.n	80031fa <LL_ADC_IsDisableOngoing+0x18>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <LL_ADC_IsDisableOngoing+0x1a>
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	0018      	movs	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	b002      	add	sp, #8
 8003202:	bd80      	pop	{r7, pc}

08003204 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4a04      	ldr	r2, [pc, #16]	; (8003224 <LL_ADC_REG_StartConversion+0x20>)
 8003212:	4013      	ands	r3, r2
 8003214:	2204      	movs	r2, #4
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	b002      	add	sp, #8
 8003222:	bd80      	pop	{r7, pc}
 8003224:	7fffffe8 	.word	0x7fffffe8

08003228 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a04      	ldr	r2, [pc, #16]	; (8003248 <LL_ADC_REG_StopConversion+0x20>)
 8003236:	4013      	ands	r3, r2
 8003238:	2210      	movs	r2, #16
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}
 8003248:	7fffffe8 	.word	0x7fffffe8

0800324c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2204      	movs	r2, #4
 800325a:	4013      	ands	r3, r2
 800325c:	2b04      	cmp	r3, #4
 800325e:	d101      	bne.n	8003264 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003264:	2300      	movs	r3, #0
}
 8003266:	0018      	movs	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	b002      	add	sp, #8
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003278:	231f      	movs	r3, #31
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e17f      	b.n	8003596 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10a      	bne.n	80032b4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f7ff fc67 	bl	8002b74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2254      	movs	r2, #84	; 0x54
 80032b0:	2100      	movs	r1, #0
 80032b2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	0018      	movs	r0, r3
 80032ba:	f7ff ff49 	bl	8003150 <LL_ADC_IsInternalRegulatorEnabled>
 80032be:	1e03      	subs	r3, r0, #0
 80032c0:	d115      	bne.n	80032ee <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7ff ff2e 	bl	8003128 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032cc:	4bb4      	ldr	r3, [pc, #720]	; (80035a0 <HAL_ADC_Init+0x330>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	49b4      	ldr	r1, [pc, #720]	; (80035a4 <HAL_ADC_Init+0x334>)
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7fc ff14 	bl	8000100 <__udivsi3>
 80032d8:	0003      	movs	r3, r0
 80032da:	3301      	adds	r3, #1
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80032e0:	e002      	b.n	80032e8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f9      	bne.n	80032e2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7ff ff2c 	bl	8003150 <LL_ADC_IsInternalRegulatorEnabled>
 80032f8:	1e03      	subs	r3, r0, #0
 80032fa:	d10f      	bne.n	800331c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003300:	2210      	movs	r2, #16
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	2201      	movs	r2, #1
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003314:	231f      	movs	r3, #31
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	2201      	movs	r2, #1
 800331a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	0018      	movs	r0, r3
 8003322:	f7ff ff93 	bl	800324c <LL_ADC_REG_IsConversionOngoing>
 8003326:	0003      	movs	r3, r0
 8003328:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332e:	2210      	movs	r2, #16
 8003330:	4013      	ands	r3, r2
 8003332:	d000      	beq.n	8003336 <HAL_ADC_Init+0xc6>
 8003334:	e122      	b.n	800357c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d000      	beq.n	800333e <HAL_ADC_Init+0xce>
 800333c:	e11e      	b.n	800357c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	4a99      	ldr	r2, [pc, #612]	; (80035a8 <HAL_ADC_Init+0x338>)
 8003344:	4013      	ands	r3, r2
 8003346:	2202      	movs	r2, #2
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	0018      	movs	r0, r3
 8003354:	f7ff ff34 	bl	80031c0 <LL_ADC_IsEnabled>
 8003358:	1e03      	subs	r3, r0, #0
 800335a:	d000      	beq.n	800335e <HAL_ADC_Init+0xee>
 800335c:	e0ad      	b.n	80034ba <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7e1b      	ldrb	r3, [r3, #24]
 8003366:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003368:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	7e5b      	ldrb	r3, [r3, #25]
 800336e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003370:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	7e9b      	ldrb	r3, [r3, #26]
 8003376:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003378:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_ADC_Init+0x118>
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	015b      	lsls	r3, r3, #5
 8003386:	e000      	b.n	800338a <HAL_ADC_Init+0x11a>
 8003388:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800338a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003390:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	da04      	bge.n	80033a4 <HAL_ADC_Init+0x134>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	e001      	b.n	80033a8 <HAL_ADC_Init+0x138>
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80033a8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	212c      	movs	r1, #44	; 0x2c
 80033ae:	5c5b      	ldrb	r3, [r3, r1]
 80033b0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80033b2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	5c9b      	ldrb	r3, [r3, r2]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d115      	bne.n	80033f0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	7e9b      	ldrb	r3, [r3, #26]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d105      	bne.n	80033d8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2280      	movs	r2, #128	; 0x80
 80033d0:	0252      	lsls	r2, r2, #9
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	e00b      	b.n	80033f0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	2220      	movs	r2, #32
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	2201      	movs	r2, #1
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033fc:	23e0      	movs	r3, #224	; 0xe0
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003406:	4313      	orrs	r3, r2
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4a65      	ldr	r2, [pc, #404]	; (80035ac <HAL_ADC_Init+0x33c>)
 8003416:	4013      	ands	r3, r2
 8003418:	0019      	movs	r1, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	430a      	orrs	r2, r1
 8003422:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	0f9b      	lsrs	r3, r3, #30
 800342a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003430:	4313      	orrs	r3, r2
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	223c      	movs	r2, #60	; 0x3c
 800343c:	5c9b      	ldrb	r3, [r3, r2]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d111      	bne.n	8003466 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	0f9b      	lsrs	r3, r3, #30
 8003448:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800344e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003454:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800345a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	2201      	movs	r2, #1
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	4a50      	ldr	r2, [pc, #320]	; (80035b0 <HAL_ADC_Init+0x340>)
 800346e:	4013      	ands	r3, r2
 8003470:	0019      	movs	r1, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	430a      	orrs	r2, r1
 800347a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	23c0      	movs	r3, #192	; 0xc0
 8003482:	061b      	lsls	r3, r3, #24
 8003484:	429a      	cmp	r2, r3
 8003486:	d018      	beq.n	80034ba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	05db      	lsls	r3, r3, #23
 8003490:	429a      	cmp	r2, r3
 8003492:	d012      	beq.n	80034ba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	061b      	lsls	r3, r3, #24
 800349c:	429a      	cmp	r2, r3
 800349e:	d00c      	beq.n	80034ba <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80034a0:	4b44      	ldr	r3, [pc, #272]	; (80035b4 <HAL_ADC_Init+0x344>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a44      	ldr	r2, [pc, #272]	; (80035b8 <HAL_ADC_Init+0x348>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	0019      	movs	r1, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	23f0      	movs	r3, #240	; 0xf0
 80034b0:	039b      	lsls	r3, r3, #14
 80034b2:	401a      	ands	r2, r3
 80034b4:	4b3f      	ldr	r3, [pc, #252]	; (80035b4 <HAL_ADC_Init+0x344>)
 80034b6:	430a      	orrs	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c2:	001a      	movs	r2, r3
 80034c4:	2100      	movs	r1, #0
 80034c6:	f7ff fd8a 	bl	8002fde <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d2:	493a      	ldr	r1, [pc, #232]	; (80035bc <HAL_ADC_Init+0x34c>)
 80034d4:	001a      	movs	r2, r3
 80034d6:	f7ff fd82 	bl	8002fde <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2110      	movs	r1, #16
 80034ee:	4249      	negs	r1, r1
 80034f0:	430a      	orrs	r2, r1
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28
 80034f4:	e018      	b.n	8003528 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	039b      	lsls	r3, r3, #14
 80034fe:	429a      	cmp	r2, r3
 8003500:	d112      	bne.n	8003528 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	3b01      	subs	r3, #1
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	221c      	movs	r2, #28
 8003512:	4013      	ands	r3, r2
 8003514:	2210      	movs	r2, #16
 8003516:	4252      	negs	r2, r2
 8003518:	409a      	lsls	r2, r3
 800351a:	0011      	movs	r1, r2
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2100      	movs	r1, #0
 800352e:	0018      	movs	r0, r3
 8003530:	f7ff fd72 	bl	8003018 <LL_ADC_GetSamplingTimeCommonChannels>
 8003534:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800353a:	429a      	cmp	r2, r3
 800353c:	d10b      	bne.n	8003556 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	2203      	movs	r2, #3
 800354a:	4393      	bics	r3, r2
 800354c:	2201      	movs	r2, #1
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003554:	e01c      	b.n	8003590 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	2212      	movs	r2, #18
 800355c:	4393      	bics	r3, r2
 800355e:	2210      	movs	r2, #16
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356a:	2201      	movs	r2, #1
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003572:	231f      	movs	r3, #31
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800357a:	e009      	b.n	8003590 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	2210      	movs	r2, #16
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003588:	231f      	movs	r3, #31
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	2201      	movs	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003590:	231f      	movs	r3, #31
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	781b      	ldrb	r3, [r3, #0]
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b008      	add	sp, #32
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	20000000 	.word	0x20000000
 80035a4:	00030d40 	.word	0x00030d40
 80035a8:	fffffefd 	.word	0xfffffefd
 80035ac:	fffe0201 	.word	0xfffe0201
 80035b0:	1ffffc02 	.word	0x1ffffc02
 80035b4:	40012708 	.word	0x40012708
 80035b8:	ffc3ffff 	.word	0xffc3ffff
 80035bc:	07ffff04 	.word	0x07ffff04

080035c0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80035c0:	b5b0      	push	{r4, r5, r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7ff fe3d 	bl	800324c <LL_ADC_REG_IsConversionOngoing>
 80035d2:	1e03      	subs	r3, r0, #0
 80035d4:	d135      	bne.n	8003642 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2254      	movs	r2, #84	; 0x54
 80035da:	5c9b      	ldrb	r3, [r3, r2]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_ADC_Start+0x24>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e035      	b.n	8003650 <HAL_ADC_Start+0x90>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2254      	movs	r2, #84	; 0x54
 80035e8:	2101      	movs	r1, #1
 80035ea:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80035ec:	250f      	movs	r5, #15
 80035ee:	197c      	adds	r4, r7, r5
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	0018      	movs	r0, r3
 80035f4:	f000 fb28 	bl	8003c48 <ADC_Enable>
 80035f8:	0003      	movs	r3, r0
 80035fa:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80035fc:	197b      	adds	r3, r7, r5
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d119      	bne.n	8003638 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003608:	4a13      	ldr	r2, [pc, #76]	; (8003658 <HAL_ADC_Start+0x98>)
 800360a:	4013      	ands	r3, r2
 800360c:	2280      	movs	r2, #128	; 0x80
 800360e:	0052      	lsls	r2, r2, #1
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	221c      	movs	r2, #28
 8003622:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2254      	movs	r2, #84	; 0x54
 8003628:	2100      	movs	r1, #0
 800362a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	0018      	movs	r0, r3
 8003632:	f7ff fde7 	bl	8003204 <LL_ADC_REG_StartConversion>
 8003636:	e008      	b.n	800364a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2254      	movs	r2, #84	; 0x54
 800363c:	2100      	movs	r1, #0
 800363e:	5499      	strb	r1, [r3, r2]
 8003640:	e003      	b.n	800364a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003642:	230f      	movs	r3, #15
 8003644:	18fb      	adds	r3, r7, r3
 8003646:	2202      	movs	r2, #2
 8003648:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800364a:	230f      	movs	r3, #15
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	781b      	ldrb	r3, [r3, #0]
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b004      	add	sp, #16
 8003656:	bdb0      	pop	{r4, r5, r7, pc}
 8003658:	fffff0fe 	.word	0xfffff0fe

0800365c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800365c:	b5b0      	push	{r4, r5, r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2254      	movs	r2, #84	; 0x54
 8003668:	5c9b      	ldrb	r3, [r3, r2]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_ADC_Stop+0x16>
 800366e:	2302      	movs	r3, #2
 8003670:	e029      	b.n	80036c6 <HAL_ADC_Stop+0x6a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2254      	movs	r2, #84	; 0x54
 8003676:	2101      	movs	r1, #1
 8003678:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800367a:	250f      	movs	r5, #15
 800367c:	197c      	adds	r4, r7, r5
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f000 fa9f 	bl	8003bc4 <ADC_ConversionStop>
 8003686:	0003      	movs	r3, r0
 8003688:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800368a:	197b      	adds	r3, r7, r5
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d112      	bne.n	80036b8 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003692:	197c      	adds	r4, r7, r5
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	0018      	movs	r0, r3
 8003698:	f000 fb5c 	bl	8003d54 <ADC_Disable>
 800369c:	0003      	movs	r3, r0
 800369e:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80036a0:	197b      	adds	r3, r7, r5
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d107      	bne.n	80036b8 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	4a08      	ldr	r2, [pc, #32]	; (80036d0 <HAL_ADC_Stop+0x74>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	2201      	movs	r2, #1
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2254      	movs	r2, #84	; 0x54
 80036bc:	2100      	movs	r1, #0
 80036be:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80036c0:	230f      	movs	r3, #15
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	781b      	ldrb	r3, [r3, #0]
}
 80036c6:	0018      	movs	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b004      	add	sp, #16
 80036cc:	bdb0      	pop	{r4, r5, r7, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	fffffefe 	.word	0xfffffefe

080036d4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d102      	bne.n	80036ec <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80036e6:	2308      	movs	r3, #8
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e00f      	b.n	800370c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	4013      	ands	r3, r2
 80036f6:	d007      	beq.n	8003708 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	2220      	movs	r2, #32
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e072      	b.n	80037ee <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003708:	2304      	movs	r3, #4
 800370a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800370c:	f7ff fc18 	bl	8002f40 <HAL_GetTick>
 8003710:	0003      	movs	r3, r0
 8003712:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003714:	e01f      	b.n	8003756 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	3301      	adds	r3, #1
 800371a:	d01c      	beq.n	8003756 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800371c:	f7ff fc10 	bl	8002f40 <HAL_GetTick>
 8003720:	0002      	movs	r2, r0
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d302      	bcc.n	8003732 <HAL_ADC_PollForConversion+0x5e>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d111      	bne.n	8003756 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4013      	ands	r3, r2
 800373c:	d10b      	bne.n	8003756 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	2204      	movs	r2, #4
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2254      	movs	r2, #84	; 0x54
 800374e:	2100      	movs	r1, #0
 8003750:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e04b      	b.n	80037ee <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4013      	ands	r3, r2
 8003760:	d0d9      	beq.n	8003716 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	2280      	movs	r2, #128	; 0x80
 8003768:	0092      	lsls	r2, r2, #2
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	0018      	movs	r0, r3
 8003776:	f7ff fc66 	bl	8003046 <LL_ADC_REG_IsTriggerSourceSWStart>
 800377a:	1e03      	subs	r3, r0, #0
 800377c:	d02e      	beq.n	80037dc <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7e9b      	ldrb	r3, [r3, #26]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d12a      	bne.n	80037dc <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2208      	movs	r2, #8
 800378e:	4013      	ands	r3, r2
 8003790:	2b08      	cmp	r3, #8
 8003792:	d123      	bne.n	80037dc <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	0018      	movs	r0, r3
 800379a:	f7ff fd57 	bl	800324c <LL_ADC_REG_IsConversionOngoing>
 800379e:	1e03      	subs	r3, r0, #0
 80037a0:	d110      	bne.n	80037c4 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	210c      	movs	r1, #12
 80037ae:	438a      	bics	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	4a10      	ldr	r2, [pc, #64]	; (80037f8 <HAL_ADC_PollForConversion+0x124>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	2201      	movs	r2, #1
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	659a      	str	r2, [r3, #88]	; 0x58
 80037c2:	e00b      	b.n	80037dc <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	2220      	movs	r2, #32
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	2201      	movs	r2, #1
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	7e1b      	ldrb	r3, [r3, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d103      	bne.n	80037ec <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	220c      	movs	r2, #12
 80037ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	0018      	movs	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b004      	add	sp, #16
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	fffffefe 	.word	0xfffffefe

080037fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800380a:	0018      	movs	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	b002      	add	sp, #8
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800381e:	2317      	movs	r3, #23
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2254      	movs	r2, #84	; 0x54
 800382e:	5c9b      	ldrb	r3, [r3, r2]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x24>
 8003834:	2302      	movs	r3, #2
 8003836:	e1c0      	b.n	8003bba <HAL_ADC_ConfigChannel+0x3a6>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2254      	movs	r2, #84	; 0x54
 800383c:	2101      	movs	r1, #1
 800383e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	0018      	movs	r0, r3
 8003846:	f7ff fd01 	bl	800324c <LL_ADC_REG_IsConversionOngoing>
 800384a:	1e03      	subs	r3, r0, #0
 800384c:	d000      	beq.n	8003850 <HAL_ADC_ConfigChannel+0x3c>
 800384e:	e1a3      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d100      	bne.n	800385a <HAL_ADC_ConfigChannel+0x46>
 8003858:	e143      	b.n	8003ae2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	2380      	movs	r3, #128	; 0x80
 8003860:	061b      	lsls	r3, r3, #24
 8003862:	429a      	cmp	r2, r3
 8003864:	d004      	beq.n	8003870 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800386a:	4ac1      	ldr	r2, [pc, #772]	; (8003b70 <HAL_ADC_ConfigChannel+0x35c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d108      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	0019      	movs	r1, r3
 800387a:	0010      	movs	r0, r2
 800387c:	f7ff fc14 	bl	80030a8 <LL_ADC_REG_SetSequencerChAdd>
 8003880:	e0c9      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	211f      	movs	r1, #31
 800388c:	400b      	ands	r3, r1
 800388e:	210f      	movs	r1, #15
 8003890:	4099      	lsls	r1, r3
 8003892:	000b      	movs	r3, r1
 8003894:	43db      	mvns	r3, r3
 8003896:	4013      	ands	r3, r2
 8003898:	0019      	movs	r1, r3
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	035b      	lsls	r3, r3, #13
 80038a0:	0b5b      	lsrs	r3, r3, #13
 80038a2:	d105      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x9c>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	0e9b      	lsrs	r3, r3, #26
 80038aa:	221f      	movs	r2, #31
 80038ac:	4013      	ands	r3, r2
 80038ae:	e098      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2201      	movs	r2, #1
 80038b6:	4013      	ands	r3, r2
 80038b8:	d000      	beq.n	80038bc <HAL_ADC_ConfigChannel+0xa8>
 80038ba:	e091      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x1cc>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2202      	movs	r2, #2
 80038c2:	4013      	ands	r3, r2
 80038c4:	d000      	beq.n	80038c8 <HAL_ADC_ConfigChannel+0xb4>
 80038c6:	e089      	b.n	80039dc <HAL_ADC_ConfigChannel+0x1c8>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2204      	movs	r2, #4
 80038ce:	4013      	ands	r3, r2
 80038d0:	d000      	beq.n	80038d4 <HAL_ADC_ConfigChannel+0xc0>
 80038d2:	e081      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x1c4>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2208      	movs	r2, #8
 80038da:	4013      	ands	r3, r2
 80038dc:	d000      	beq.n	80038e0 <HAL_ADC_ConfigChannel+0xcc>
 80038de:	e079      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x1c0>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2210      	movs	r2, #16
 80038e6:	4013      	ands	r3, r2
 80038e8:	d000      	beq.n	80038ec <HAL_ADC_ConfigChannel+0xd8>
 80038ea:	e071      	b.n	80039d0 <HAL_ADC_ConfigChannel+0x1bc>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2220      	movs	r2, #32
 80038f2:	4013      	ands	r3, r2
 80038f4:	d000      	beq.n	80038f8 <HAL_ADC_ConfigChannel+0xe4>
 80038f6:	e069      	b.n	80039cc <HAL_ADC_ConfigChannel+0x1b8>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2240      	movs	r2, #64	; 0x40
 80038fe:	4013      	ands	r3, r2
 8003900:	d000      	beq.n	8003904 <HAL_ADC_ConfigChannel+0xf0>
 8003902:	e061      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x1b4>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2280      	movs	r2, #128	; 0x80
 800390a:	4013      	ands	r3, r2
 800390c:	d000      	beq.n	8003910 <HAL_ADC_ConfigChannel+0xfc>
 800390e:	e059      	b.n	80039c4 <HAL_ADC_ConfigChannel+0x1b0>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4013      	ands	r3, r2
 800391a:	d151      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x1ac>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4013      	ands	r3, r2
 8003926:	d149      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x1a8>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4013      	ands	r3, r2
 8003932:	d141      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x1a4>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	4013      	ands	r3, r2
 800393e:	d139      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x1a0>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	015b      	lsls	r3, r3, #5
 8003948:	4013      	ands	r3, r2
 800394a:	d131      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x19c>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	019b      	lsls	r3, r3, #6
 8003954:	4013      	ands	r3, r2
 8003956:	d129      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x198>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	01db      	lsls	r3, r3, #7
 8003960:	4013      	ands	r3, r2
 8003962:	d121      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x194>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	2380      	movs	r3, #128	; 0x80
 800396a:	021b      	lsls	r3, r3, #8
 800396c:	4013      	ands	r3, r2
 800396e:	d119      	bne.n	80039a4 <HAL_ADC_ConfigChannel+0x190>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	025b      	lsls	r3, r3, #9
 8003978:	4013      	ands	r3, r2
 800397a:	d111      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x18c>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	029b      	lsls	r3, r3, #10
 8003984:	4013      	ands	r3, r2
 8003986:	d109      	bne.n	800399c <HAL_ADC_ConfigChannel+0x188>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	2380      	movs	r3, #128	; 0x80
 800398e:	02db      	lsls	r3, r3, #11
 8003990:	4013      	ands	r3, r2
 8003992:	d001      	beq.n	8003998 <HAL_ADC_ConfigChannel+0x184>
 8003994:	2312      	movs	r3, #18
 8003996:	e024      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 8003998:	2300      	movs	r3, #0
 800399a:	e022      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 800399c:	2311      	movs	r3, #17
 800399e:	e020      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039a0:	2310      	movs	r3, #16
 80039a2:	e01e      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039a4:	230f      	movs	r3, #15
 80039a6:	e01c      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039a8:	230e      	movs	r3, #14
 80039aa:	e01a      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039ac:	230d      	movs	r3, #13
 80039ae:	e018      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039b0:	230c      	movs	r3, #12
 80039b2:	e016      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039b4:	230b      	movs	r3, #11
 80039b6:	e014      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039b8:	230a      	movs	r3, #10
 80039ba:	e012      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039bc:	2309      	movs	r3, #9
 80039be:	e010      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039c0:	2308      	movs	r3, #8
 80039c2:	e00e      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039c4:	2307      	movs	r3, #7
 80039c6:	e00c      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039c8:	2306      	movs	r3, #6
 80039ca:	e00a      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039cc:	2305      	movs	r3, #5
 80039ce:	e008      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039d0:	2304      	movs	r3, #4
 80039d2:	e006      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039d4:	2303      	movs	r3, #3
 80039d6:	e004      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039d8:	2302      	movs	r3, #2
 80039da:	e002      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x1ce>
 80039e0:	2300      	movs	r3, #0
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	6852      	ldr	r2, [r2, #4]
 80039e6:	201f      	movs	r0, #31
 80039e8:	4002      	ands	r2, r0
 80039ea:	4093      	lsls	r3, r2
 80039ec:	000a      	movs	r2, r1
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d808      	bhi.n	8003a16 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	001a      	movs	r2, r3
 8003a12:	f7ff fb29 	bl	8003068 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6819      	ldr	r1, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	001a      	movs	r2, r3
 8003a24:	f7ff fb64 	bl	80030f0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	db00      	blt.n	8003a32 <HAL_ADC_ConfigChannel+0x21e>
 8003a30:	e0bc      	b.n	8003bac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a32:	4b50      	ldr	r3, [pc, #320]	; (8003b74 <HAL_ADC_ConfigChannel+0x360>)
 8003a34:	0018      	movs	r0, r3
 8003a36:	f7ff fac5 	bl	8002fc4 <LL_ADC_GetCommonPathInternalCh>
 8003a3a:	0003      	movs	r3, r0
 8003a3c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a4d      	ldr	r2, [pc, #308]	; (8003b78 <HAL_ADC_ConfigChannel+0x364>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d122      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	041b      	lsls	r3, r3, #16
 8003a4e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a50:	d11d      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2280      	movs	r2, #128	; 0x80
 8003a56:	0412      	lsls	r2, r2, #16
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	4a46      	ldr	r2, [pc, #280]	; (8003b74 <HAL_ADC_ConfigChannel+0x360>)
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	0010      	movs	r0, r2
 8003a60:	f7ff fa9c 	bl	8002f9c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a64:	4b45      	ldr	r3, [pc, #276]	; (8003b7c <HAL_ADC_ConfigChannel+0x368>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4945      	ldr	r1, [pc, #276]	; (8003b80 <HAL_ADC_ConfigChannel+0x36c>)
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f7fc fb48 	bl	8000100 <__udivsi3>
 8003a70:	0003      	movs	r3, r0
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	0013      	movs	r3, r2
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	189b      	adds	r3, r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a7e:	e002      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1f9      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a8c:	e08e      	b.n	8003bac <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a3c      	ldr	r2, [pc, #240]	; (8003b84 <HAL_ADC_ConfigChannel+0x370>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d10e      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	045b      	lsls	r3, r3, #17
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d109      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2280      	movs	r2, #128	; 0x80
 8003aa6:	0452      	lsls	r2, r2, #17
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	4a32      	ldr	r2, [pc, #200]	; (8003b74 <HAL_ADC_ConfigChannel+0x360>)
 8003aac:	0019      	movs	r1, r3
 8003aae:	0010      	movs	r0, r2
 8003ab0:	f7ff fa74 	bl	8002f9c <LL_ADC_SetCommonPathInternalCh>
 8003ab4:	e07a      	b.n	8003bac <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a33      	ldr	r2, [pc, #204]	; (8003b88 <HAL_ADC_ConfigChannel+0x374>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d000      	beq.n	8003ac2 <HAL_ADC_ConfigChannel+0x2ae>
 8003ac0:	e074      	b.n	8003bac <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	2380      	movs	r3, #128	; 0x80
 8003ac6:	03db      	lsls	r3, r3, #15
 8003ac8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003aca:	d000      	beq.n	8003ace <HAL_ADC_ConfigChannel+0x2ba>
 8003acc:	e06e      	b.n	8003bac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	2280      	movs	r2, #128	; 0x80
 8003ad2:	03d2      	lsls	r2, r2, #15
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	4a27      	ldr	r2, [pc, #156]	; (8003b74 <HAL_ADC_ConfigChannel+0x360>)
 8003ad8:	0019      	movs	r1, r3
 8003ada:	0010      	movs	r0, r2
 8003adc:	f7ff fa5e 	bl	8002f9c <LL_ADC_SetCommonPathInternalCh>
 8003ae0:	e064      	b.n	8003bac <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	2380      	movs	r3, #128	; 0x80
 8003ae8:	061b      	lsls	r3, r3, #24
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d004      	beq.n	8003af8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003af2:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <HAL_ADC_ConfigChannel+0x35c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d107      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	0019      	movs	r1, r3
 8003b02:	0010      	movs	r0, r2
 8003b04:	f7ff fae1 	bl	80030ca <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	da4d      	bge.n	8003bac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b10:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <HAL_ADC_ConfigChannel+0x360>)
 8003b12:	0018      	movs	r0, r3
 8003b14:	f7ff fa56 	bl	8002fc4 <LL_ADC_GetCommonPathInternalCh>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a15      	ldr	r2, [pc, #84]	; (8003b78 <HAL_ADC_ConfigChannel+0x364>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d108      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <HAL_ADC_ConfigChannel+0x378>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	4a11      	ldr	r2, [pc, #68]	; (8003b74 <HAL_ADC_ConfigChannel+0x360>)
 8003b2e:	0019      	movs	r1, r3
 8003b30:	0010      	movs	r0, r2
 8003b32:	f7ff fa33 	bl	8002f9c <LL_ADC_SetCommonPathInternalCh>
 8003b36:	e039      	b.n	8003bac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a11      	ldr	r2, [pc, #68]	; (8003b84 <HAL_ADC_ConfigChannel+0x370>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d108      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <HAL_ADC_ConfigChannel+0x37c>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <HAL_ADC_ConfigChannel+0x360>)
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	0010      	movs	r0, r2
 8003b4e:	f7ff fa25 	bl	8002f9c <LL_ADC_SetCommonPathInternalCh>
 8003b52:	e02b      	b.n	8003bac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0b      	ldr	r2, [pc, #44]	; (8003b88 <HAL_ADC_ConfigChannel+0x374>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d126      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4a0c      	ldr	r2, [pc, #48]	; (8003b94 <HAL_ADC_ConfigChannel+0x380>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	4a03      	ldr	r2, [pc, #12]	; (8003b74 <HAL_ADC_ConfigChannel+0x360>)
 8003b66:	0019      	movs	r1, r3
 8003b68:	0010      	movs	r0, r2
 8003b6a:	f7ff fa17 	bl	8002f9c <LL_ADC_SetCommonPathInternalCh>
 8003b6e:	e01d      	b.n	8003bac <HAL_ADC_ConfigChannel+0x398>
 8003b70:	80000004 	.word	0x80000004
 8003b74:	40012708 	.word	0x40012708
 8003b78:	b0001000 	.word	0xb0001000
 8003b7c:	20000000 	.word	0x20000000
 8003b80:	00030d40 	.word	0x00030d40
 8003b84:	b8004000 	.word	0xb8004000
 8003b88:	b4002000 	.word	0xb4002000
 8003b8c:	ff7fffff 	.word	0xff7fffff
 8003b90:	feffffff 	.word	0xfeffffff
 8003b94:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ba4:	2317      	movs	r3, #23
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	2201      	movs	r2, #1
 8003baa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2254      	movs	r2, #84	; 0x54
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003bb4:	2317      	movs	r3, #23
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	781b      	ldrb	r3, [r3, #0]
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b006      	add	sp, #24
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			; (mov r8, r8)

08003bc4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7ff fb3b 	bl	800324c <LL_ADC_REG_IsConversionOngoing>
 8003bd6:	1e03      	subs	r3, r0, #0
 8003bd8:	d031      	beq.n	8003c3e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	0018      	movs	r0, r3
 8003be0:	f7ff faff 	bl	80031e2 <LL_ADC_IsDisableOngoing>
 8003be4:	1e03      	subs	r3, r0, #0
 8003be6:	d104      	bne.n	8003bf2 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7ff fb1b 	bl	8003228 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bf2:	f7ff f9a5 	bl	8002f40 <HAL_GetTick>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003bfa:	e01a      	b.n	8003c32 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003bfc:	f7ff f9a0 	bl	8002f40 <HAL_GetTick>
 8003c00:	0002      	movs	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d913      	bls.n	8003c32 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2204      	movs	r2, #4
 8003c12:	4013      	ands	r3, r2
 8003c14:	d00d      	beq.n	8003c32 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	2210      	movs	r2, #16
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c26:	2201      	movs	r2, #1
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e006      	b.n	8003c40 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2204      	movs	r2, #4
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d1de      	bne.n	8003bfc <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b004      	add	sp, #16
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f7ff fab1 	bl	80031c0 <LL_ADC_IsEnabled>
 8003c5e:	1e03      	subs	r3, r0, #0
 8003c60:	d000      	beq.n	8003c64 <ADC_Enable+0x1c>
 8003c62:	e069      	b.n	8003d38 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	4a36      	ldr	r2, [pc, #216]	; (8003d44 <ADC_Enable+0xfc>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d00d      	beq.n	8003c8c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	2210      	movs	r2, #16
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c80:	2201      	movs	r2, #1
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e056      	b.n	8003d3a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	0018      	movs	r0, r3
 8003c92:	f7ff fa71 	bl	8003178 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003c96:	4b2c      	ldr	r3, [pc, #176]	; (8003d48 <ADC_Enable+0x100>)
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f7ff f993 	bl	8002fc4 <LL_ADC_GetCommonPathInternalCh>
 8003c9e:	0002      	movs	r2, r0
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	041b      	lsls	r3, r3, #16
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d00f      	beq.n	8003cc8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ca8:	4b28      	ldr	r3, [pc, #160]	; (8003d4c <ADC_Enable+0x104>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4928      	ldr	r1, [pc, #160]	; (8003d50 <ADC_Enable+0x108>)
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f7fc fa26 	bl	8000100 <__udivsi3>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003cb8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003cba:	e002      	b.n	8003cc2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f9      	bne.n	8003cbc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	7e5b      	ldrb	r3, [r3, #25]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d033      	beq.n	8003d38 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003cd0:	f7ff f936 	bl	8002f40 <HAL_GetTick>
 8003cd4:	0003      	movs	r3, r0
 8003cd6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cd8:	e027      	b.n	8003d2a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f7ff fa6e 	bl	80031c0 <LL_ADC_IsEnabled>
 8003ce4:	1e03      	subs	r3, r0, #0
 8003ce6:	d104      	bne.n	8003cf2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f7ff fa43 	bl	8003178 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cf2:	f7ff f925 	bl	8002f40 <HAL_GetTick>
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d914      	bls.n	8003d2a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2201      	movs	r2, #1
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d00d      	beq.n	8003d2a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d12:	2210      	movs	r2, #16
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1e:	2201      	movs	r2, #1
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e007      	b.n	8003d3a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2201      	movs	r2, #1
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d1d0      	bne.n	8003cda <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b004      	add	sp, #16
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	80000017 	.word	0x80000017
 8003d48:	40012708 	.word	0x40012708
 8003d4c:	20000000 	.word	0x20000000
 8003d50:	00030d40 	.word	0x00030d40

08003d54 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7ff fa3e 	bl	80031e2 <LL_ADC_IsDisableOngoing>
 8003d66:	0003      	movs	r3, r0
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f7ff fa26 	bl	80031c0 <LL_ADC_IsEnabled>
 8003d74:	1e03      	subs	r3, r0, #0
 8003d76:	d046      	beq.n	8003e06 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d143      	bne.n	8003e06 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2205      	movs	r2, #5
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d10d      	bne.n	8003da8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	0018      	movs	r0, r3
 8003d92:	f7ff fa03 	bl	800319c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d9e:	f7ff f8cf 	bl	8002f40 <HAL_GetTick>
 8003da2:	0003      	movs	r3, r0
 8003da4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003da6:	e028      	b.n	8003dfa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dac:	2210      	movs	r2, #16
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db8:	2201      	movs	r2, #1
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e021      	b.n	8003e08 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dc4:	f7ff f8bc 	bl	8002f40 <HAL_GetTick>
 8003dc8:	0002      	movs	r2, r0
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d913      	bls.n	8003dfa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d00d      	beq.n	8003dfa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	2210      	movs	r2, #16
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dee:	2201      	movs	r2, #1
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e006      	b.n	8003e08 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2201      	movs	r2, #1
 8003e02:	4013      	ands	r3, r2
 8003e04:	d1de      	bne.n	8003dc4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	0018      	movs	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b004      	add	sp, #16
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e10:	b590      	push	{r4, r7, lr}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	0002      	movs	r2, r0
 8003e18:	6039      	str	r1, [r7, #0]
 8003e1a:	1dfb      	adds	r3, r7, #7
 8003e1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e1e:	1dfb      	adds	r3, r7, #7
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b7f      	cmp	r3, #127	; 0x7f
 8003e24:	d828      	bhi.n	8003e78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e26:	4a2f      	ldr	r2, [pc, #188]	; (8003ee4 <__NVIC_SetPriority+0xd4>)
 8003e28:	1dfb      	adds	r3, r7, #7
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	b25b      	sxtb	r3, r3
 8003e2e:	089b      	lsrs	r3, r3, #2
 8003e30:	33c0      	adds	r3, #192	; 0xc0
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	589b      	ldr	r3, [r3, r2]
 8003e36:	1dfa      	adds	r2, r7, #7
 8003e38:	7812      	ldrb	r2, [r2, #0]
 8003e3a:	0011      	movs	r1, r2
 8003e3c:	2203      	movs	r2, #3
 8003e3e:	400a      	ands	r2, r1
 8003e40:	00d2      	lsls	r2, r2, #3
 8003e42:	21ff      	movs	r1, #255	; 0xff
 8003e44:	4091      	lsls	r1, r2
 8003e46:	000a      	movs	r2, r1
 8003e48:	43d2      	mvns	r2, r2
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	019b      	lsls	r3, r3, #6
 8003e52:	22ff      	movs	r2, #255	; 0xff
 8003e54:	401a      	ands	r2, r3
 8003e56:	1dfb      	adds	r3, r7, #7
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	4003      	ands	r3, r0
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e64:	481f      	ldr	r0, [pc, #124]	; (8003ee4 <__NVIC_SetPriority+0xd4>)
 8003e66:	1dfb      	adds	r3, r7, #7
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	b25b      	sxtb	r3, r3
 8003e6c:	089b      	lsrs	r3, r3, #2
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	33c0      	adds	r3, #192	; 0xc0
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003e76:	e031      	b.n	8003edc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e78:	4a1b      	ldr	r2, [pc, #108]	; (8003ee8 <__NVIC_SetPriority+0xd8>)
 8003e7a:	1dfb      	adds	r3, r7, #7
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	0019      	movs	r1, r3
 8003e80:	230f      	movs	r3, #15
 8003e82:	400b      	ands	r3, r1
 8003e84:	3b08      	subs	r3, #8
 8003e86:	089b      	lsrs	r3, r3, #2
 8003e88:	3306      	adds	r3, #6
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	18d3      	adds	r3, r2, r3
 8003e8e:	3304      	adds	r3, #4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	1dfa      	adds	r2, r7, #7
 8003e94:	7812      	ldrb	r2, [r2, #0]
 8003e96:	0011      	movs	r1, r2
 8003e98:	2203      	movs	r2, #3
 8003e9a:	400a      	ands	r2, r1
 8003e9c:	00d2      	lsls	r2, r2, #3
 8003e9e:	21ff      	movs	r1, #255	; 0xff
 8003ea0:	4091      	lsls	r1, r2
 8003ea2:	000a      	movs	r2, r1
 8003ea4:	43d2      	mvns	r2, r2
 8003ea6:	401a      	ands	r2, r3
 8003ea8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	019b      	lsls	r3, r3, #6
 8003eae:	22ff      	movs	r2, #255	; 0xff
 8003eb0:	401a      	ands	r2, r3
 8003eb2:	1dfb      	adds	r3, r7, #7
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	2303      	movs	r3, #3
 8003eba:	4003      	ands	r3, r0
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ec0:	4809      	ldr	r0, [pc, #36]	; (8003ee8 <__NVIC_SetPriority+0xd8>)
 8003ec2:	1dfb      	adds	r3, r7, #7
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	001c      	movs	r4, r3
 8003ec8:	230f      	movs	r3, #15
 8003eca:	4023      	ands	r3, r4
 8003ecc:	3b08      	subs	r3, #8
 8003ece:	089b      	lsrs	r3, r3, #2
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	3306      	adds	r3, #6
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	18c3      	adds	r3, r0, r3
 8003ed8:	3304      	adds	r3, #4
 8003eda:	601a      	str	r2, [r3, #0]
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b003      	add	sp, #12
 8003ee2:	bd90      	pop	{r4, r7, pc}
 8003ee4:	e000e100 	.word	0xe000e100
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	1e5a      	subs	r2, r3, #1
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	045b      	lsls	r3, r3, #17
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d301      	bcc.n	8003f04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f00:	2301      	movs	r3, #1
 8003f02:	e010      	b.n	8003f26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f04:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <SysTick_Config+0x44>)
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	3a01      	subs	r2, #1
 8003f0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	425b      	negs	r3, r3
 8003f10:	2103      	movs	r1, #3
 8003f12:	0018      	movs	r0, r3
 8003f14:	f7ff ff7c 	bl	8003e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <SysTick_Config+0x44>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f1e:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <SysTick_Config+0x44>)
 8003f20:	2207      	movs	r2, #7
 8003f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	0018      	movs	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b002      	add	sp, #8
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	e000e010 	.word	0xe000e010

08003f34 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	210f      	movs	r1, #15
 8003f40:	187b      	adds	r3, r7, r1
 8003f42:	1c02      	adds	r2, r0, #0
 8003f44:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	187b      	adds	r3, r7, r1
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	b25b      	sxtb	r3, r3
 8003f4e:	0011      	movs	r1, r2
 8003f50:	0018      	movs	r0, r3
 8003f52:	f7ff ff5d 	bl	8003e10 <__NVIC_SetPriority>
}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b004      	add	sp, #16
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7ff ffbf 	bl	8003eec <SysTick_Config>
 8003f6e:	0003      	movs	r3, r0
}
 8003f70:	0018      	movs	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b002      	add	sp, #8
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e056      	b.n	8004038 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	7f5b      	ldrb	r3, [r3, #29]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d106      	bne.n	8003fa2 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7fe fe2d 	bl	8002bfc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	791b      	ldrb	r3, [r3, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10c      	bne.n	8003fca <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a22      	ldr	r2, [pc, #136]	; (8004040 <HAL_CRC_Init+0xc8>)
 8003fb6:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2118      	movs	r1, #24
 8003fc4:	438a      	bics	r2, r1
 8003fc6:	609a      	str	r2, [r3, #8]
 8003fc8:	e00b      	b.n	8003fe2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6899      	ldr	r1, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f000 f835 	bl	8004044 <HAL_CRCEx_Polynomial_Set>
 8003fda:	1e03      	subs	r3, r0, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e02a      	b.n	8004038 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	795b      	ldrb	r3, [r3, #5]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d105      	bne.n	8003ff6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	4252      	negs	r2, r2
 8003ff2:	611a      	str	r2, [r3, #16]
 8003ff4:	e004      	b.n	8004000 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6912      	ldr	r2, [r2, #16]
 8003ffe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2260      	movs	r2, #96	; 0x60
 8004008:	4393      	bics	r3, r2
 800400a:	0019      	movs	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	695a      	ldr	r2, [r3, #20]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2280      	movs	r2, #128	; 0x80
 8004020:	4393      	bics	r3, r2
 8004022:	0019      	movs	r1, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	0018      	movs	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	b002      	add	sp, #8
 800403e:	bd80      	pop	{r7, pc}
 8004040:	04c11db7 	.word	0x04c11db7

08004044 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004050:	2317      	movs	r3, #23
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004058:	231f      	movs	r3, #31
 800405a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800405c:	46c0      	nop			; (mov r8, r8)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1e5a      	subs	r2, r3, #1
 8004062:	613a      	str	r2, [r7, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_CRCEx_Polynomial_Set+0x36>
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	221f      	movs	r2, #31
 800406c:	4013      	ands	r3, r2
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	40da      	lsrs	r2, r3
 8004072:	0013      	movs	r3, r2
 8004074:	2201      	movs	r2, #1
 8004076:	4013      	ands	r3, r2
 8004078:	d0f1      	beq.n	800405e <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b18      	cmp	r3, #24
 800407e:	d00f      	beq.n	80040a0 <HAL_CRCEx_Polynomial_Set+0x5c>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b18      	cmp	r3, #24
 8004084:	d824      	bhi.n	80040d0 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b10      	cmp	r3, #16
 800408a:	d011      	beq.n	80040b0 <HAL_CRCEx_Polynomial_Set+0x6c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b10      	cmp	r3, #16
 8004090:	d81e      	bhi.n	80040d0 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d020      	beq.n	80040da <HAL_CRCEx_Polynomial_Set+0x96>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b08      	cmp	r3, #8
 800409c:	d010      	beq.n	80040c0 <HAL_CRCEx_Polynomial_Set+0x7c>
 800409e:	e017      	b.n	80040d0 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b06      	cmp	r3, #6
 80040a4:	d91b      	bls.n	80040de <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 80040a6:	2317      	movs	r3, #23
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
      }
      break;
 80040ae:	e016      	b.n	80040de <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b07      	cmp	r3, #7
 80040b4:	d915      	bls.n	80040e2 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 80040b6:	2317      	movs	r3, #23
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	2201      	movs	r2, #1
 80040bc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80040be:	e010      	b.n	80040e2 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b0f      	cmp	r3, #15
 80040c4:	d90f      	bls.n	80040e6 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 80040c6:	2317      	movs	r3, #23
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	2201      	movs	r2, #1
 80040cc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80040ce:	e00a      	b.n	80040e6 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80040d0:	2317      	movs	r3, #23
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
      break;
 80040d8:	e006      	b.n	80040e8 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	e004      	b.n	80040e8 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	e002      	b.n	80040e8 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	e000      	b.n	80040e8 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80040e6:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 80040e8:	2317      	movs	r3, #23
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10e      	bne.n	8004110 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2218      	movs	r2, #24
 8004102:	4393      	bics	r3, r2
 8004104:	0019      	movs	r1, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	430a      	orrs	r2, r1
 800410e:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004110:	2317      	movs	r3, #23
 8004112:	18fb      	adds	r3, r7, r3
 8004114:	781b      	ldrb	r3, [r3, #0]
}
 8004116:	0018      	movs	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	b006      	add	sp, #24
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800412e:	e147      	b.n	80043c0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2101      	movs	r1, #1
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4091      	lsls	r1, r2
 800413a:	000a      	movs	r2, r1
 800413c:	4013      	ands	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d100      	bne.n	8004148 <HAL_GPIO_Init+0x28>
 8004146:	e138      	b.n	80043ba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2203      	movs	r2, #3
 800414e:	4013      	ands	r3, r2
 8004150:	2b01      	cmp	r3, #1
 8004152:	d005      	beq.n	8004160 <HAL_GPIO_Init+0x40>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2203      	movs	r2, #3
 800415a:	4013      	ands	r3, r2
 800415c:	2b02      	cmp	r3, #2
 800415e:	d130      	bne.n	80041c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	2203      	movs	r2, #3
 800416c:	409a      	lsls	r2, r3
 800416e:	0013      	movs	r3, r2
 8004170:	43da      	mvns	r2, r3
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4013      	ands	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	409a      	lsls	r2, r3
 8004182:	0013      	movs	r3, r2
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004196:	2201      	movs	r2, #1
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	409a      	lsls	r2, r3
 800419c:	0013      	movs	r3, r2
 800419e:	43da      	mvns	r2, r3
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4013      	ands	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	2201      	movs	r2, #1
 80041ae:	401a      	ands	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	409a      	lsls	r2, r3
 80041b4:	0013      	movs	r3, r2
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2203      	movs	r2, #3
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d017      	beq.n	80041fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	2203      	movs	r2, #3
 80041da:	409a      	lsls	r2, r3
 80041dc:	0013      	movs	r3, r2
 80041de:	43da      	mvns	r2, r3
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4013      	ands	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	409a      	lsls	r2, r3
 80041f0:	0013      	movs	r3, r2
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2203      	movs	r2, #3
 8004204:	4013      	ands	r3, r2
 8004206:	2b02      	cmp	r3, #2
 8004208:	d123      	bne.n	8004252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	08da      	lsrs	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3208      	adds	r2, #8
 8004212:	0092      	lsls	r2, r2, #2
 8004214:	58d3      	ldr	r3, [r2, r3]
 8004216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2207      	movs	r2, #7
 800421c:	4013      	ands	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	220f      	movs	r2, #15
 8004222:	409a      	lsls	r2, r3
 8004224:	0013      	movs	r3, r2
 8004226:	43da      	mvns	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4013      	ands	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2107      	movs	r1, #7
 8004236:	400b      	ands	r3, r1
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	409a      	lsls	r2, r3
 800423c:	0013      	movs	r3, r2
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	08da      	lsrs	r2, r3, #3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3208      	adds	r2, #8
 800424c:	0092      	lsls	r2, r2, #2
 800424e:	6939      	ldr	r1, [r7, #16]
 8004250:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	2203      	movs	r2, #3
 800425e:	409a      	lsls	r2, r3
 8004260:	0013      	movs	r3, r2
 8004262:	43da      	mvns	r2, r3
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	4013      	ands	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2203      	movs	r2, #3
 8004270:	401a      	ands	r2, r3
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	409a      	lsls	r2, r3
 8004278:	0013      	movs	r3, r2
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	23c0      	movs	r3, #192	; 0xc0
 800428c:	029b      	lsls	r3, r3, #10
 800428e:	4013      	ands	r3, r2
 8004290:	d100      	bne.n	8004294 <HAL_GPIO_Init+0x174>
 8004292:	e092      	b.n	80043ba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004294:	4a50      	ldr	r2, [pc, #320]	; (80043d8 <HAL_GPIO_Init+0x2b8>)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	089b      	lsrs	r3, r3, #2
 800429a:	3318      	adds	r3, #24
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	589b      	ldr	r3, [r3, r2]
 80042a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2203      	movs	r2, #3
 80042a6:	4013      	ands	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	220f      	movs	r2, #15
 80042ac:	409a      	lsls	r2, r3
 80042ae:	0013      	movs	r3, r2
 80042b0:	43da      	mvns	r2, r3
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4013      	ands	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	23a0      	movs	r3, #160	; 0xa0
 80042bc:	05db      	lsls	r3, r3, #23
 80042be:	429a      	cmp	r2, r3
 80042c0:	d013      	beq.n	80042ea <HAL_GPIO_Init+0x1ca>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a45      	ldr	r2, [pc, #276]	; (80043dc <HAL_GPIO_Init+0x2bc>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00d      	beq.n	80042e6 <HAL_GPIO_Init+0x1c6>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a44      	ldr	r2, [pc, #272]	; (80043e0 <HAL_GPIO_Init+0x2c0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d007      	beq.n	80042e2 <HAL_GPIO_Init+0x1c2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a43      	ldr	r2, [pc, #268]	; (80043e4 <HAL_GPIO_Init+0x2c4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d101      	bne.n	80042de <HAL_GPIO_Init+0x1be>
 80042da:	2303      	movs	r3, #3
 80042dc:	e006      	b.n	80042ec <HAL_GPIO_Init+0x1cc>
 80042de:	2305      	movs	r3, #5
 80042e0:	e004      	b.n	80042ec <HAL_GPIO_Init+0x1cc>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e002      	b.n	80042ec <HAL_GPIO_Init+0x1cc>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <HAL_GPIO_Init+0x1cc>
 80042ea:	2300      	movs	r3, #0
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	2103      	movs	r1, #3
 80042f0:	400a      	ands	r2, r1
 80042f2:	00d2      	lsls	r2, r2, #3
 80042f4:	4093      	lsls	r3, r2
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80042fc:	4936      	ldr	r1, [pc, #216]	; (80043d8 <HAL_GPIO_Init+0x2b8>)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	089b      	lsrs	r3, r3, #2
 8004302:	3318      	adds	r3, #24
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800430a:	4b33      	ldr	r3, [pc, #204]	; (80043d8 <HAL_GPIO_Init+0x2b8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	43da      	mvns	r2, r3
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4013      	ands	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	2380      	movs	r3, #128	; 0x80
 8004320:	035b      	lsls	r3, r3, #13
 8004322:	4013      	ands	r3, r2
 8004324:	d003      	beq.n	800432e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800432e:	4b2a      	ldr	r3, [pc, #168]	; (80043d8 <HAL_GPIO_Init+0x2b8>)
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004334:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <HAL_GPIO_Init+0x2b8>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	43da      	mvns	r2, r3
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4013      	ands	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	039b      	lsls	r3, r3, #14
 800434c:	4013      	ands	r3, r2
 800434e:	d003      	beq.n	8004358 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004358:	4b1f      	ldr	r3, [pc, #124]	; (80043d8 <HAL_GPIO_Init+0x2b8>)
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800435e:	4a1e      	ldr	r2, [pc, #120]	; (80043d8 <HAL_GPIO_Init+0x2b8>)
 8004360:	2384      	movs	r3, #132	; 0x84
 8004362:	58d3      	ldr	r3, [r2, r3]
 8004364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	43da      	mvns	r2, r3
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4013      	ands	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	029b      	lsls	r3, r3, #10
 8004378:	4013      	ands	r3, r2
 800437a:	d003      	beq.n	8004384 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004384:	4914      	ldr	r1, [pc, #80]	; (80043d8 <HAL_GPIO_Init+0x2b8>)
 8004386:	2284      	movs	r2, #132	; 0x84
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800438c:	4a12      	ldr	r2, [pc, #72]	; (80043d8 <HAL_GPIO_Init+0x2b8>)
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	58d3      	ldr	r3, [r2, r3]
 8004392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	43da      	mvns	r2, r3
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4013      	ands	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	2380      	movs	r3, #128	; 0x80
 80043a4:	025b      	lsls	r3, r3, #9
 80043a6:	4013      	ands	r3, r2
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043b2:	4909      	ldr	r1, [pc, #36]	; (80043d8 <HAL_GPIO_Init+0x2b8>)
 80043b4:	2280      	movs	r2, #128	; 0x80
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	3301      	adds	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	40da      	lsrs	r2, r3
 80043c8:	1e13      	subs	r3, r2, #0
 80043ca:	d000      	beq.n	80043ce <HAL_GPIO_Init+0x2ae>
 80043cc:	e6b0      	b.n	8004130 <HAL_GPIO_Init+0x10>
  }
}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	46c0      	nop			; (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b006      	add	sp, #24
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40021800 	.word	0x40021800
 80043dc:	50000400 	.word	0x50000400
 80043e0:	50000800 	.word	0x50000800
 80043e4:	50000c00 	.word	0x50000c00

080043e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	000a      	movs	r2, r1
 80043f2:	1cbb      	adds	r3, r7, #2
 80043f4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	1cba      	adds	r2, r7, #2
 80043fc:	8812      	ldrh	r2, [r2, #0]
 80043fe:	4013      	ands	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004402:	230f      	movs	r3, #15
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	2201      	movs	r2, #1
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	e003      	b.n	8004414 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800440c:	230f      	movs	r3, #15
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004414:	230f      	movs	r3, #15
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	781b      	ldrb	r3, [r3, #0]
}
 800441a:	0018      	movs	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	b004      	add	sp, #16
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	0008      	movs	r0, r1
 800442c:	0011      	movs	r1, r2
 800442e:	1cbb      	adds	r3, r7, #2
 8004430:	1c02      	adds	r2, r0, #0
 8004432:	801a      	strh	r2, [r3, #0]
 8004434:	1c7b      	adds	r3, r7, #1
 8004436:	1c0a      	adds	r2, r1, #0
 8004438:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800443a:	1c7b      	adds	r3, r7, #1
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004442:	1cbb      	adds	r3, r7, #2
 8004444:	881a      	ldrh	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800444a:	e003      	b.n	8004454 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800444c:	1cbb      	adds	r3, r7, #2
 800444e:	881a      	ldrh	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004454:	46c0      	nop			; (mov r8, r8)
 8004456:	46bd      	mov	sp, r7
 8004458:	b002      	add	sp, #8
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004464:	4b19      	ldr	r3, [pc, #100]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a19      	ldr	r2, [pc, #100]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800446a:	4013      	ands	r3, r2
 800446c:	0019      	movs	r1, r3
 800446e:	4b17      	ldr	r3, [pc, #92]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	430a      	orrs	r2, r1
 8004474:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	429a      	cmp	r2, r3
 800447e:	d11f      	bne.n	80044c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004480:	4b14      	ldr	r3, [pc, #80]	; (80044d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	0013      	movs	r3, r2
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	189b      	adds	r3, r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4912      	ldr	r1, [pc, #72]	; (80044d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800448e:	0018      	movs	r0, r3
 8004490:	f7fb fe36 	bl	8000100 <__udivsi3>
 8004494:	0003      	movs	r3, r0
 8004496:	3301      	adds	r3, #1
 8004498:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800449a:	e008      	b.n	80044ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	e001      	b.n	80044ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e009      	b.n	80044c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044ae:	4b07      	ldr	r3, [pc, #28]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	2380      	movs	r3, #128	; 0x80
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	401a      	ands	r2, r3
 80044b8:	2380      	movs	r3, #128	; 0x80
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	429a      	cmp	r2, r3
 80044be:	d0ed      	beq.n	800449c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	0018      	movs	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b004      	add	sp, #16
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	40007000 	.word	0x40007000
 80044d0:	fffff9ff 	.word	0xfffff9ff
 80044d4:	20000000 	.word	0x20000000
 80044d8:	000f4240 	.word	0x000f4240

080044dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	23e0      	movs	r3, #224	; 0xe0
 80044e6:	01db      	lsls	r3, r3, #7
 80044e8:	4013      	ands	r3, r2
}
 80044ea:	0018      	movs	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40021000 	.word	0x40021000

080044f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e2f3      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2201      	movs	r2, #1
 800450c:	4013      	ands	r3, r2
 800450e:	d100      	bne.n	8004512 <HAL_RCC_OscConfig+0x1e>
 8004510:	e07c      	b.n	800460c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004512:	4bc3      	ldr	r3, [pc, #780]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2238      	movs	r2, #56	; 0x38
 8004518:	4013      	ands	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800451c:	4bc0      	ldr	r3, [pc, #768]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	2203      	movs	r2, #3
 8004522:	4013      	ands	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b10      	cmp	r3, #16
 800452a:	d102      	bne.n	8004532 <HAL_RCC_OscConfig+0x3e>
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b03      	cmp	r3, #3
 8004530:	d002      	beq.n	8004538 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d10b      	bne.n	8004550 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004538:	4bb9      	ldr	r3, [pc, #740]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	029b      	lsls	r3, r3, #10
 8004540:	4013      	ands	r3, r2
 8004542:	d062      	beq.n	800460a <HAL_RCC_OscConfig+0x116>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d15e      	bne.n	800460a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e2ce      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	025b      	lsls	r3, r3, #9
 8004558:	429a      	cmp	r2, r3
 800455a:	d107      	bne.n	800456c <HAL_RCC_OscConfig+0x78>
 800455c:	4bb0      	ldr	r3, [pc, #704]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4baf      	ldr	r3, [pc, #700]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004562:	2180      	movs	r1, #128	; 0x80
 8004564:	0249      	lsls	r1, r1, #9
 8004566:	430a      	orrs	r2, r1
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e020      	b.n	80045ae <HAL_RCC_OscConfig+0xba>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	23a0      	movs	r3, #160	; 0xa0
 8004572:	02db      	lsls	r3, r3, #11
 8004574:	429a      	cmp	r2, r3
 8004576:	d10e      	bne.n	8004596 <HAL_RCC_OscConfig+0xa2>
 8004578:	4ba9      	ldr	r3, [pc, #676]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4ba8      	ldr	r3, [pc, #672]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 800457e:	2180      	movs	r1, #128	; 0x80
 8004580:	02c9      	lsls	r1, r1, #11
 8004582:	430a      	orrs	r2, r1
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	4ba6      	ldr	r3, [pc, #664]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4ba5      	ldr	r3, [pc, #660]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 800458c:	2180      	movs	r1, #128	; 0x80
 800458e:	0249      	lsls	r1, r1, #9
 8004590:	430a      	orrs	r2, r1
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e00b      	b.n	80045ae <HAL_RCC_OscConfig+0xba>
 8004596:	4ba2      	ldr	r3, [pc, #648]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4ba1      	ldr	r3, [pc, #644]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 800459c:	49a1      	ldr	r1, [pc, #644]	; (8004824 <HAL_RCC_OscConfig+0x330>)
 800459e:	400a      	ands	r2, r1
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	4b9f      	ldr	r3, [pc, #636]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4b9e      	ldr	r3, [pc, #632]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 80045a8:	499f      	ldr	r1, [pc, #636]	; (8004828 <HAL_RCC_OscConfig+0x334>)
 80045aa:	400a      	ands	r2, r1
 80045ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d014      	beq.n	80045e0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b6:	f7fe fcc3 	bl	8002f40 <HAL_GetTick>
 80045ba:	0003      	movs	r3, r0
 80045bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c0:	f7fe fcbe 	bl	8002f40 <HAL_GetTick>
 80045c4:	0002      	movs	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	; 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e28d      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d2:	4b93      	ldr	r3, [pc, #588]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	029b      	lsls	r3, r3, #10
 80045da:	4013      	ands	r3, r2
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0xcc>
 80045de:	e015      	b.n	800460c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fe fcae 	bl	8002f40 <HAL_GetTick>
 80045e4:	0003      	movs	r3, r0
 80045e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045ea:	f7fe fca9 	bl	8002f40 <HAL_GetTick>
 80045ee:	0002      	movs	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b64      	cmp	r3, #100	; 0x64
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e278      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045fc:	4b88      	ldr	r3, [pc, #544]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	2380      	movs	r3, #128	; 0x80
 8004602:	029b      	lsls	r3, r3, #10
 8004604:	4013      	ands	r3, r2
 8004606:	d1f0      	bne.n	80045ea <HAL_RCC_OscConfig+0xf6>
 8004608:	e000      	b.n	800460c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2202      	movs	r2, #2
 8004612:	4013      	ands	r3, r2
 8004614:	d100      	bne.n	8004618 <HAL_RCC_OscConfig+0x124>
 8004616:	e099      	b.n	800474c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004618:	4b81      	ldr	r3, [pc, #516]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2238      	movs	r2, #56	; 0x38
 800461e:	4013      	ands	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004622:	4b7f      	ldr	r3, [pc, #508]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2203      	movs	r2, #3
 8004628:	4013      	ands	r3, r2
 800462a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b10      	cmp	r3, #16
 8004630:	d102      	bne.n	8004638 <HAL_RCC_OscConfig+0x144>
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d002      	beq.n	800463e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d135      	bne.n	80046aa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800463e:	4b78      	ldr	r3, [pc, #480]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	4013      	ands	r3, r2
 8004648:	d005      	beq.n	8004656 <HAL_RCC_OscConfig+0x162>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e24b      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004656:	4b72      	ldr	r3, [pc, #456]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4a74      	ldr	r2, [pc, #464]	; (800482c <HAL_RCC_OscConfig+0x338>)
 800465c:	4013      	ands	r3, r2
 800465e:	0019      	movs	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	021a      	lsls	r2, r3, #8
 8004666:	4b6e      	ldr	r3, [pc, #440]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004668:	430a      	orrs	r2, r1
 800466a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d112      	bne.n	8004698 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004672:	4b6b      	ldr	r3, [pc, #428]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6e      	ldr	r2, [pc, #440]	; (8004830 <HAL_RCC_OscConfig+0x33c>)
 8004678:	4013      	ands	r3, r2
 800467a:	0019      	movs	r1, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	4b67      	ldr	r3, [pc, #412]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004682:	430a      	orrs	r2, r1
 8004684:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004686:	4b66      	ldr	r3, [pc, #408]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	0adb      	lsrs	r3, r3, #11
 800468c:	2207      	movs	r2, #7
 800468e:	4013      	ands	r3, r2
 8004690:	4a68      	ldr	r2, [pc, #416]	; (8004834 <HAL_RCC_OscConfig+0x340>)
 8004692:	40da      	lsrs	r2, r3
 8004694:	4b68      	ldr	r3, [pc, #416]	; (8004838 <HAL_RCC_OscConfig+0x344>)
 8004696:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004698:	4b68      	ldr	r3, [pc, #416]	; (800483c <HAL_RCC_OscConfig+0x348>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	0018      	movs	r0, r3
 800469e:	f7fe fbf3 	bl	8002e88 <HAL_InitTick>
 80046a2:	1e03      	subs	r3, r0, #0
 80046a4:	d051      	beq.n	800474a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e221      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d030      	beq.n	8004714 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80046b2:	4b5b      	ldr	r3, [pc, #364]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a5e      	ldr	r2, [pc, #376]	; (8004830 <HAL_RCC_OscConfig+0x33c>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	0019      	movs	r1, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	4b57      	ldr	r3, [pc, #348]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 80046c2:	430a      	orrs	r2, r1
 80046c4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80046c6:	4b56      	ldr	r3, [pc, #344]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b55      	ldr	r3, [pc, #340]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 80046cc:	2180      	movs	r1, #128	; 0x80
 80046ce:	0049      	lsls	r1, r1, #1
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fe fc34 	bl	8002f40 <HAL_GetTick>
 80046d8:	0003      	movs	r3, r0
 80046da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046de:	f7fe fc2f 	bl	8002f40 <HAL_GetTick>
 80046e2:	0002      	movs	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e1fe      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f0:	4b4b      	ldr	r3, [pc, #300]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	2380      	movs	r3, #128	; 0x80
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	4013      	ands	r3, r2
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fc:	4b48      	ldr	r3, [pc, #288]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4a4a      	ldr	r2, [pc, #296]	; (800482c <HAL_RCC_OscConfig+0x338>)
 8004702:	4013      	ands	r3, r2
 8004704:	0019      	movs	r1, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	021a      	lsls	r2, r3, #8
 800470c:	4b44      	ldr	r3, [pc, #272]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	e01b      	b.n	800474c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004714:	4b42      	ldr	r3, [pc, #264]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4b41      	ldr	r3, [pc, #260]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 800471a:	4949      	ldr	r1, [pc, #292]	; (8004840 <HAL_RCC_OscConfig+0x34c>)
 800471c:	400a      	ands	r2, r1
 800471e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004720:	f7fe fc0e 	bl	8002f40 <HAL_GetTick>
 8004724:	0003      	movs	r3, r0
 8004726:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800472a:	f7fe fc09 	bl	8002f40 <HAL_GetTick>
 800472e:	0002      	movs	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e1d8      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800473c:	4b38      	ldr	r3, [pc, #224]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	4013      	ands	r3, r2
 8004746:	d1f0      	bne.n	800472a <HAL_RCC_OscConfig+0x236>
 8004748:	e000      	b.n	800474c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800474a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2208      	movs	r2, #8
 8004752:	4013      	ands	r3, r2
 8004754:	d047      	beq.n	80047e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004756:	4b32      	ldr	r3, [pc, #200]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2238      	movs	r2, #56	; 0x38
 800475c:	4013      	ands	r3, r2
 800475e:	2b18      	cmp	r3, #24
 8004760:	d10a      	bne.n	8004778 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004762:	4b2f      	ldr	r3, [pc, #188]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004766:	2202      	movs	r2, #2
 8004768:	4013      	ands	r3, r2
 800476a:	d03c      	beq.n	80047e6 <HAL_RCC_OscConfig+0x2f2>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d138      	bne.n	80047e6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e1ba      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d019      	beq.n	80047b4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004780:	4b27      	ldr	r3, [pc, #156]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004782:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004784:	4b26      	ldr	r3, [pc, #152]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004786:	2101      	movs	r1, #1
 8004788:	430a      	orrs	r2, r1
 800478a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fe fbd8 	bl	8002f40 <HAL_GetTick>
 8004790:	0003      	movs	r3, r0
 8004792:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004796:	f7fe fbd3 	bl	8002f40 <HAL_GetTick>
 800479a:	0002      	movs	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e1a2      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047a8:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 80047aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ac:	2202      	movs	r2, #2
 80047ae:	4013      	ands	r3, r2
 80047b0:	d0f1      	beq.n	8004796 <HAL_RCC_OscConfig+0x2a2>
 80047b2:	e018      	b.n	80047e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80047b4:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 80047b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047b8:	4b19      	ldr	r3, [pc, #100]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 80047ba:	2101      	movs	r1, #1
 80047bc:	438a      	bics	r2, r1
 80047be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fe fbbe 	bl	8002f40 <HAL_GetTick>
 80047c4:	0003      	movs	r3, r0
 80047c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ca:	f7fe fbb9 	bl	8002f40 <HAL_GetTick>
 80047ce:	0002      	movs	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e188      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047dc:	4b10      	ldr	r3, [pc, #64]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 80047de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e0:	2202      	movs	r2, #2
 80047e2:	4013      	ands	r3, r2
 80047e4:	d1f1      	bne.n	80047ca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2204      	movs	r2, #4
 80047ec:	4013      	ands	r3, r2
 80047ee:	d100      	bne.n	80047f2 <HAL_RCC_OscConfig+0x2fe>
 80047f0:	e0c6      	b.n	8004980 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047f2:	231f      	movs	r3, #31
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80047fa:	4b09      	ldr	r3, [pc, #36]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2238      	movs	r2, #56	; 0x38
 8004800:	4013      	ands	r3, r2
 8004802:	2b20      	cmp	r3, #32
 8004804:	d11e      	bne.n	8004844 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004806:	4b06      	ldr	r3, [pc, #24]	; (8004820 <HAL_RCC_OscConfig+0x32c>)
 8004808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480a:	2202      	movs	r2, #2
 800480c:	4013      	ands	r3, r2
 800480e:	d100      	bne.n	8004812 <HAL_RCC_OscConfig+0x31e>
 8004810:	e0b6      	b.n	8004980 <HAL_RCC_OscConfig+0x48c>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d000      	beq.n	800481c <HAL_RCC_OscConfig+0x328>
 800481a:	e0b1      	b.n	8004980 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e166      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
 8004820:	40021000 	.word	0x40021000
 8004824:	fffeffff 	.word	0xfffeffff
 8004828:	fffbffff 	.word	0xfffbffff
 800482c:	ffff80ff 	.word	0xffff80ff
 8004830:	ffffc7ff 	.word	0xffffc7ff
 8004834:	00f42400 	.word	0x00f42400
 8004838:	20000000 	.word	0x20000000
 800483c:	20000004 	.word	0x20000004
 8004840:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004844:	4bac      	ldr	r3, [pc, #688]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	055b      	lsls	r3, r3, #21
 800484c:	4013      	ands	r3, r2
 800484e:	d101      	bne.n	8004854 <HAL_RCC_OscConfig+0x360>
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <HAL_RCC_OscConfig+0x362>
 8004854:	2300      	movs	r3, #0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d011      	beq.n	800487e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800485a:	4ba7      	ldr	r3, [pc, #668]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 800485c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800485e:	4ba6      	ldr	r3, [pc, #664]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004860:	2180      	movs	r1, #128	; 0x80
 8004862:	0549      	lsls	r1, r1, #21
 8004864:	430a      	orrs	r2, r1
 8004866:	63da      	str	r2, [r3, #60]	; 0x3c
 8004868:	4ba3      	ldr	r3, [pc, #652]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 800486a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	055b      	lsls	r3, r3, #21
 8004870:	4013      	ands	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004876:	231f      	movs	r3, #31
 8004878:	18fb      	adds	r3, r7, r3
 800487a:	2201      	movs	r2, #1
 800487c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800487e:	4b9f      	ldr	r3, [pc, #636]	; (8004afc <HAL_RCC_OscConfig+0x608>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	2380      	movs	r3, #128	; 0x80
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	4013      	ands	r3, r2
 8004888:	d11a      	bne.n	80048c0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800488a:	4b9c      	ldr	r3, [pc, #624]	; (8004afc <HAL_RCC_OscConfig+0x608>)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	4b9b      	ldr	r3, [pc, #620]	; (8004afc <HAL_RCC_OscConfig+0x608>)
 8004890:	2180      	movs	r1, #128	; 0x80
 8004892:	0049      	lsls	r1, r1, #1
 8004894:	430a      	orrs	r2, r1
 8004896:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004898:	f7fe fb52 	bl	8002f40 <HAL_GetTick>
 800489c:	0003      	movs	r3, r0
 800489e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a2:	f7fe fb4d 	bl	8002f40 <HAL_GetTick>
 80048a6:	0002      	movs	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e11c      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048b4:	4b91      	ldr	r3, [pc, #580]	; (8004afc <HAL_RCC_OscConfig+0x608>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	4013      	ands	r3, r2
 80048be:	d0f0      	beq.n	80048a2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d106      	bne.n	80048d6 <HAL_RCC_OscConfig+0x3e2>
 80048c8:	4b8b      	ldr	r3, [pc, #556]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 80048ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048cc:	4b8a      	ldr	r3, [pc, #552]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 80048ce:	2101      	movs	r1, #1
 80048d0:	430a      	orrs	r2, r1
 80048d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80048d4:	e01c      	b.n	8004910 <HAL_RCC_OscConfig+0x41c>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b05      	cmp	r3, #5
 80048dc:	d10c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x404>
 80048de:	4b86      	ldr	r3, [pc, #536]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 80048e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048e2:	4b85      	ldr	r3, [pc, #532]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 80048e4:	2104      	movs	r1, #4
 80048e6:	430a      	orrs	r2, r1
 80048e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80048ea:	4b83      	ldr	r3, [pc, #524]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 80048ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048ee:	4b82      	ldr	r3, [pc, #520]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 80048f0:	2101      	movs	r1, #1
 80048f2:	430a      	orrs	r2, r1
 80048f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80048f6:	e00b      	b.n	8004910 <HAL_RCC_OscConfig+0x41c>
 80048f8:	4b7f      	ldr	r3, [pc, #508]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 80048fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048fc:	4b7e      	ldr	r3, [pc, #504]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 80048fe:	2101      	movs	r1, #1
 8004900:	438a      	bics	r2, r1
 8004902:	65da      	str	r2, [r3, #92]	; 0x5c
 8004904:	4b7c      	ldr	r3, [pc, #496]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004906:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004908:	4b7b      	ldr	r3, [pc, #492]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 800490a:	2104      	movs	r1, #4
 800490c:	438a      	bics	r2, r1
 800490e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d014      	beq.n	8004942 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fe fb12 	bl	8002f40 <HAL_GetTick>
 800491c:	0003      	movs	r3, r0
 800491e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004920:	e009      	b.n	8004936 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004922:	f7fe fb0d 	bl	8002f40 <HAL_GetTick>
 8004926:	0002      	movs	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	4a74      	ldr	r2, [pc, #464]	; (8004b00 <HAL_RCC_OscConfig+0x60c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e0db      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004936:	4b70      	ldr	r3, [pc, #448]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493a:	2202      	movs	r2, #2
 800493c:	4013      	ands	r3, r2
 800493e:	d0f0      	beq.n	8004922 <HAL_RCC_OscConfig+0x42e>
 8004940:	e013      	b.n	800496a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004942:	f7fe fafd 	bl	8002f40 <HAL_GetTick>
 8004946:	0003      	movs	r3, r0
 8004948:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800494a:	e009      	b.n	8004960 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494c:	f7fe faf8 	bl	8002f40 <HAL_GetTick>
 8004950:	0002      	movs	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	4a6a      	ldr	r2, [pc, #424]	; (8004b00 <HAL_RCC_OscConfig+0x60c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e0c6      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004960:	4b65      	ldr	r3, [pc, #404]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	2202      	movs	r2, #2
 8004966:	4013      	ands	r3, r2
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800496a:	231f      	movs	r3, #31
 800496c:	18fb      	adds	r3, r7, r3
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d105      	bne.n	8004980 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004974:	4b60      	ldr	r3, [pc, #384]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004978:	4b5f      	ldr	r3, [pc, #380]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 800497a:	4962      	ldr	r1, [pc, #392]	; (8004b04 <HAL_RCC_OscConfig+0x610>)
 800497c:	400a      	ands	r2, r1
 800497e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d100      	bne.n	800498a <HAL_RCC_OscConfig+0x496>
 8004988:	e0b0      	b.n	8004aec <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800498a:	4b5b      	ldr	r3, [pc, #364]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2238      	movs	r2, #56	; 0x38
 8004990:	4013      	ands	r3, r2
 8004992:	2b10      	cmp	r3, #16
 8004994:	d100      	bne.n	8004998 <HAL_RCC_OscConfig+0x4a4>
 8004996:	e078      	b.n	8004a8a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	2b02      	cmp	r3, #2
 800499e:	d153      	bne.n	8004a48 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a0:	4b55      	ldr	r3, [pc, #340]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4b54      	ldr	r3, [pc, #336]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 80049a6:	4958      	ldr	r1, [pc, #352]	; (8004b08 <HAL_RCC_OscConfig+0x614>)
 80049a8:	400a      	ands	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fe fac8 	bl	8002f40 <HAL_GetTick>
 80049b0:	0003      	movs	r3, r0
 80049b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b6:	f7fe fac3 	bl	8002f40 <HAL_GetTick>
 80049ba:	0002      	movs	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e092      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c8:	4b4b      	ldr	r3, [pc, #300]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	049b      	lsls	r3, r3, #18
 80049d0:	4013      	ands	r3, r2
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049d4:	4b48      	ldr	r3, [pc, #288]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4a4c      	ldr	r2, [pc, #304]	; (8004b0c <HAL_RCC_OscConfig+0x618>)
 80049da:	4013      	ands	r3, r2
 80049dc:	0019      	movs	r1, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1a      	ldr	r2, [r3, #32]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	021b      	lsls	r3, r3, #8
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	431a      	orrs	r2, r3
 80049fc:	4b3e      	ldr	r3, [pc, #248]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 80049fe:	430a      	orrs	r2, r1
 8004a00:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a02:	4b3d      	ldr	r3, [pc, #244]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	4b3c      	ldr	r3, [pc, #240]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004a08:	2180      	movs	r1, #128	; 0x80
 8004a0a:	0449      	lsls	r1, r1, #17
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004a10:	4b39      	ldr	r3, [pc, #228]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	4b38      	ldr	r3, [pc, #224]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004a16:	2180      	movs	r1, #128	; 0x80
 8004a18:	0549      	lsls	r1, r1, #21
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1e:	f7fe fa8f 	bl	8002f40 <HAL_GetTick>
 8004a22:	0003      	movs	r3, r0
 8004a24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a28:	f7fe fa8a 	bl	8002f40 <HAL_GetTick>
 8004a2c:	0002      	movs	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e059      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a3a:	4b2f      	ldr	r3, [pc, #188]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	2380      	movs	r3, #128	; 0x80
 8004a40:	049b      	lsls	r3, r3, #18
 8004a42:	4013      	ands	r3, r2
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0x534>
 8004a46:	e051      	b.n	8004aec <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a48:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4b2a      	ldr	r3, [pc, #168]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004a4e:	492e      	ldr	r1, [pc, #184]	; (8004b08 <HAL_RCC_OscConfig+0x614>)
 8004a50:	400a      	ands	r2, r1
 8004a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fe fa74 	bl	8002f40 <HAL_GetTick>
 8004a58:	0003      	movs	r3, r0
 8004a5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5e:	f7fe fa6f 	bl	8002f40 <HAL_GetTick>
 8004a62:	0002      	movs	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e03e      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a70:	4b21      	ldr	r3, [pc, #132]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	2380      	movs	r3, #128	; 0x80
 8004a76:	049b      	lsls	r3, r3, #18
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004a7c:	4b1e      	ldr	r3, [pc, #120]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	4b1d      	ldr	r3, [pc, #116]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004a82:	4923      	ldr	r1, [pc, #140]	; (8004b10 <HAL_RCC_OscConfig+0x61c>)
 8004a84:	400a      	ands	r2, r1
 8004a86:	60da      	str	r2, [r3, #12]
 8004a88:	e030      	b.n	8004aec <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e02b      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004a96:	4b18      	ldr	r3, [pc, #96]	; (8004af8 <HAL_RCC_OscConfig+0x604>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	401a      	ands	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d11e      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2270      	movs	r2, #112	; 0x70
 8004aae:	401a      	ands	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d117      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	23fe      	movs	r3, #254	; 0xfe
 8004abc:	01db      	lsls	r3, r3, #7
 8004abe:	401a      	ands	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	23f8      	movs	r3, #248	; 0xf8
 8004ace:	039b      	lsls	r3, r3, #14
 8004ad0:	401a      	ands	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d106      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	0f5b      	lsrs	r3, r3, #29
 8004ade:	075a      	lsls	r2, r3, #29
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e000      	b.n	8004aee <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	0018      	movs	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b008      	add	sp, #32
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	40021000 	.word	0x40021000
 8004afc:	40007000 	.word	0x40007000
 8004b00:	00001388 	.word	0x00001388
 8004b04:	efffffff 	.word	0xefffffff
 8004b08:	feffffff 	.word	0xfeffffff
 8004b0c:	1fc1808c 	.word	0x1fc1808c
 8004b10:	effefffc 	.word	0xeffefffc

08004b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0e9      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b28:	4b76      	ldr	r3, [pc, #472]	; (8004d04 <HAL_RCC_ClockConfig+0x1f0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2207      	movs	r2, #7
 8004b2e:	4013      	ands	r3, r2
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d91e      	bls.n	8004b74 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b73      	ldr	r3, [pc, #460]	; (8004d04 <HAL_RCC_ClockConfig+0x1f0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2207      	movs	r2, #7
 8004b3c:	4393      	bics	r3, r2
 8004b3e:	0019      	movs	r1, r3
 8004b40:	4b70      	ldr	r3, [pc, #448]	; (8004d04 <HAL_RCC_ClockConfig+0x1f0>)
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b48:	f7fe f9fa 	bl	8002f40 <HAL_GetTick>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b50:	e009      	b.n	8004b66 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b52:	f7fe f9f5 	bl	8002f40 <HAL_GetTick>
 8004b56:	0002      	movs	r2, r0
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	4a6a      	ldr	r2, [pc, #424]	; (8004d08 <HAL_RCC_ClockConfig+0x1f4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e0ca      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b66:	4b67      	ldr	r3, [pc, #412]	; (8004d04 <HAL_RCC_ClockConfig+0x1f0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2207      	movs	r2, #7
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d1ee      	bne.n	8004b52 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d015      	beq.n	8004baa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2204      	movs	r2, #4
 8004b84:	4013      	ands	r3, r2
 8004b86:	d006      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b88:	4b60      	ldr	r3, [pc, #384]	; (8004d0c <HAL_RCC_ClockConfig+0x1f8>)
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	4b5f      	ldr	r3, [pc, #380]	; (8004d0c <HAL_RCC_ClockConfig+0x1f8>)
 8004b8e:	21e0      	movs	r1, #224	; 0xe0
 8004b90:	01c9      	lsls	r1, r1, #7
 8004b92:	430a      	orrs	r2, r1
 8004b94:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b96:	4b5d      	ldr	r3, [pc, #372]	; (8004d0c <HAL_RCC_ClockConfig+0x1f8>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	4a5d      	ldr	r2, [pc, #372]	; (8004d10 <HAL_RCC_ClockConfig+0x1fc>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	0019      	movs	r1, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	4b59      	ldr	r3, [pc, #356]	; (8004d0c <HAL_RCC_ClockConfig+0x1f8>)
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d057      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d107      	bne.n	8004bcc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bbc:	4b53      	ldr	r3, [pc, #332]	; (8004d0c <HAL_RCC_ClockConfig+0x1f8>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	2380      	movs	r3, #128	; 0x80
 8004bc2:	029b      	lsls	r3, r3, #10
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d12b      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e097      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d107      	bne.n	8004be4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd4:	4b4d      	ldr	r3, [pc, #308]	; (8004d0c <HAL_RCC_ClockConfig+0x1f8>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	2380      	movs	r3, #128	; 0x80
 8004bda:	049b      	lsls	r3, r3, #18
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d11f      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e08b      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d107      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bec:	4b47      	ldr	r3, [pc, #284]	; (8004d0c <HAL_RCC_ClockConfig+0x1f8>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	2380      	movs	r3, #128	; 0x80
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d113      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e07f      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d106      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c04:	4b41      	ldr	r3, [pc, #260]	; (8004d0c <HAL_RCC_ClockConfig+0x1f8>)
 8004c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c08:	2202      	movs	r2, #2
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d108      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e074      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c12:	4b3e      	ldr	r3, [pc, #248]	; (8004d0c <HAL_RCC_ClockConfig+0x1f8>)
 8004c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c16:	2202      	movs	r2, #2
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d101      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e06d      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c20:	4b3a      	ldr	r3, [pc, #232]	; (8004d0c <HAL_RCC_ClockConfig+0x1f8>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2207      	movs	r2, #7
 8004c26:	4393      	bics	r3, r2
 8004c28:	0019      	movs	r1, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	4b37      	ldr	r3, [pc, #220]	; (8004d0c <HAL_RCC_ClockConfig+0x1f8>)
 8004c30:	430a      	orrs	r2, r1
 8004c32:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c34:	f7fe f984 	bl	8002f40 <HAL_GetTick>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3c:	e009      	b.n	8004c52 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c3e:	f7fe f97f 	bl	8002f40 <HAL_GetTick>
 8004c42:	0002      	movs	r2, r0
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	4a2f      	ldr	r2, [pc, #188]	; (8004d08 <HAL_RCC_ClockConfig+0x1f4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e054      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c52:	4b2e      	ldr	r3, [pc, #184]	; (8004d0c <HAL_RCC_ClockConfig+0x1f8>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2238      	movs	r2, #56	; 0x38
 8004c58:	401a      	ands	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d1ec      	bne.n	8004c3e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c64:	4b27      	ldr	r3, [pc, #156]	; (8004d04 <HAL_RCC_ClockConfig+0x1f0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2207      	movs	r2, #7
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d21e      	bcs.n	8004cb0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <HAL_RCC_ClockConfig+0x1f0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2207      	movs	r2, #7
 8004c78:	4393      	bics	r3, r2
 8004c7a:	0019      	movs	r1, r3
 8004c7c:	4b21      	ldr	r3, [pc, #132]	; (8004d04 <HAL_RCC_ClockConfig+0x1f0>)
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c84:	f7fe f95c 	bl	8002f40 <HAL_GetTick>
 8004c88:	0003      	movs	r3, r0
 8004c8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c8c:	e009      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c8e:	f7fe f957 	bl	8002f40 <HAL_GetTick>
 8004c92:	0002      	movs	r2, r0
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	4a1b      	ldr	r2, [pc, #108]	; (8004d08 <HAL_RCC_ClockConfig+0x1f4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e02c      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ca2:	4b18      	ldr	r3, [pc, #96]	; (8004d04 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2207      	movs	r2, #7
 8004ca8:	4013      	ands	r3, r2
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d1ee      	bne.n	8004c8e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d009      	beq.n	8004cce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004cba:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <HAL_RCC_ClockConfig+0x1f8>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	4a15      	ldr	r2, [pc, #84]	; (8004d14 <HAL_RCC_ClockConfig+0x200>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	0019      	movs	r1, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68da      	ldr	r2, [r3, #12]
 8004cc8:	4b10      	ldr	r3, [pc, #64]	; (8004d0c <HAL_RCC_ClockConfig+0x1f8>)
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004cce:	f000 f829 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8004cd2:	0001      	movs	r1, r0
 8004cd4:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <HAL_RCC_ClockConfig+0x1f8>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	0a1b      	lsrs	r3, r3, #8
 8004cda:	220f      	movs	r2, #15
 8004cdc:	401a      	ands	r2, r3
 8004cde:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <HAL_RCC_ClockConfig+0x204>)
 8004ce0:	0092      	lsls	r2, r2, #2
 8004ce2:	58d3      	ldr	r3, [r2, r3]
 8004ce4:	221f      	movs	r2, #31
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	000a      	movs	r2, r1
 8004cea:	40da      	lsrs	r2, r3
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_RCC_ClockConfig+0x208>)
 8004cee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <HAL_RCC_ClockConfig+0x20c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f7fe f8c7 	bl	8002e88 <HAL_InitTick>
 8004cfa:	0003      	movs	r3, r0
}
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b004      	add	sp, #16
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40022000 	.word	0x40022000
 8004d08:	00001388 	.word	0x00001388
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	fffff0ff 	.word	0xfffff0ff
 8004d14:	ffff8fff 	.word	0xffff8fff
 8004d18:	08006440 	.word	0x08006440
 8004d1c:	20000000 	.word	0x20000000
 8004d20:	20000004 	.word	0x20000004

08004d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d2a:	4b3c      	ldr	r3, [pc, #240]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2238      	movs	r2, #56	; 0x38
 8004d30:	4013      	ands	r3, r2
 8004d32:	d10f      	bne.n	8004d54 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004d34:	4b39      	ldr	r3, [pc, #228]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	0adb      	lsrs	r3, r3, #11
 8004d3a:	2207      	movs	r2, #7
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2201      	movs	r2, #1
 8004d40:	409a      	lsls	r2, r3
 8004d42:	0013      	movs	r3, r2
 8004d44:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004d46:	6839      	ldr	r1, [r7, #0]
 8004d48:	4835      	ldr	r0, [pc, #212]	; (8004e20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d4a:	f7fb f9d9 	bl	8000100 <__udivsi3>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	e05d      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d54:	4b31      	ldr	r3, [pc, #196]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	2238      	movs	r2, #56	; 0x38
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d102      	bne.n	8004d66 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d60:	4b30      	ldr	r3, [pc, #192]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x100>)
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	e054      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d66:	4b2d      	ldr	r3, [pc, #180]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2238      	movs	r2, #56	; 0x38
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b10      	cmp	r3, #16
 8004d70:	d138      	bne.n	8004de4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004d72:	4b2a      	ldr	r3, [pc, #168]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2203      	movs	r2, #3
 8004d78:	4013      	ands	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d7c:	4b27      	ldr	r3, [pc, #156]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	2207      	movs	r2, #7
 8004d84:	4013      	ands	r3, r2
 8004d86:	3301      	adds	r3, #1
 8004d88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d10d      	bne.n	8004dac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	4824      	ldr	r0, [pc, #144]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x100>)
 8004d94:	f7fb f9b4 	bl	8000100 <__udivsi3>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	4b1f      	ldr	r3, [pc, #124]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	0a1b      	lsrs	r3, r3, #8
 8004da2:	227f      	movs	r2, #127	; 0x7f
 8004da4:	4013      	ands	r3, r2
 8004da6:	434b      	muls	r3, r1
 8004da8:	617b      	str	r3, [r7, #20]
        break;
 8004daa:	e00d      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	481c      	ldr	r0, [pc, #112]	; (8004e20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004db0:	f7fb f9a6 	bl	8000100 <__udivsi3>
 8004db4:	0003      	movs	r3, r0
 8004db6:	0019      	movs	r1, r3
 8004db8:	4b18      	ldr	r3, [pc, #96]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	0a1b      	lsrs	r3, r3, #8
 8004dbe:	227f      	movs	r2, #127	; 0x7f
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	434b      	muls	r3, r1
 8004dc4:	617b      	str	r3, [r7, #20]
        break;
 8004dc6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004dc8:	4b14      	ldr	r3, [pc, #80]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	0f5b      	lsrs	r3, r3, #29
 8004dce:	2207      	movs	r2, #7
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	6978      	ldr	r0, [r7, #20]
 8004dda:	f7fb f991 	bl	8000100 <__udivsi3>
 8004dde:	0003      	movs	r3, r0
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	e015      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004de4:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2238      	movs	r2, #56	; 0x38
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	d103      	bne.n	8004df8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004df0:	2380      	movs	r3, #128	; 0x80
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	e00b      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004df8:	4b08      	ldr	r3, [pc, #32]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2238      	movs	r2, #56	; 0x38
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b18      	cmp	r3, #24
 8004e02:	d103      	bne.n	8004e0c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004e04:	23fa      	movs	r3, #250	; 0xfa
 8004e06:	01db      	lsls	r3, r3, #7
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	e001      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e10:	693b      	ldr	r3, [r7, #16]
}
 8004e12:	0018      	movs	r0, r3
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b006      	add	sp, #24
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	00f42400 	.word	0x00f42400
 8004e24:	007a1200 	.word	0x007a1200

08004e28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e2c:	4b02      	ldr	r3, [pc, #8]	; (8004e38 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
}
 8004e30:	0018      	movs	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	20000000 	.word	0x20000000

08004e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e3c:	b5b0      	push	{r4, r5, r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004e40:	f7ff fff2 	bl	8004e28 <HAL_RCC_GetHCLKFreq>
 8004e44:	0004      	movs	r4, r0
 8004e46:	f7ff fb49 	bl	80044dc <LL_RCC_GetAPB1Prescaler>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	0b1a      	lsrs	r2, r3, #12
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e50:	0092      	lsls	r2, r2, #2
 8004e52:	58d3      	ldr	r3, [r2, r3]
 8004e54:	221f      	movs	r2, #31
 8004e56:	4013      	ands	r3, r2
 8004e58:	40dc      	lsrs	r4, r3
 8004e5a:	0023      	movs	r3, r4
}
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bdb0      	pop	{r4, r5, r7, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	08006480 	.word	0x08006480

08004e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004e70:	2313      	movs	r3, #19
 8004e72:	18fb      	adds	r3, r7, r3
 8004e74:	2200      	movs	r2, #0
 8004e76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e78:	2312      	movs	r3, #18
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	029b      	lsls	r3, r3, #10
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d100      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004e8c:	e0a3      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e8e:	2011      	movs	r0, #17
 8004e90:	183b      	adds	r3, r7, r0
 8004e92:	2200      	movs	r2, #0
 8004e94:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e96:	4b86      	ldr	r3, [pc, #536]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e9a:	2380      	movs	r3, #128	; 0x80
 8004e9c:	055b      	lsls	r3, r3, #21
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	d110      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea2:	4b83      	ldr	r3, [pc, #524]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ea6:	4b82      	ldr	r3, [pc, #520]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ea8:	2180      	movs	r1, #128	; 0x80
 8004eaa:	0549      	lsls	r1, r1, #21
 8004eac:	430a      	orrs	r2, r1
 8004eae:	63da      	str	r2, [r3, #60]	; 0x3c
 8004eb0:	4b7f      	ldr	r3, [pc, #508]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb4:	2380      	movs	r3, #128	; 0x80
 8004eb6:	055b      	lsls	r3, r3, #21
 8004eb8:	4013      	ands	r3, r2
 8004eba:	60bb      	str	r3, [r7, #8]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ebe:	183b      	adds	r3, r7, r0
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ec4:	4b7b      	ldr	r3, [pc, #492]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4b7a      	ldr	r3, [pc, #488]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004eca:	2180      	movs	r1, #128	; 0x80
 8004ecc:	0049      	lsls	r1, r1, #1
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ed2:	f7fe f835 	bl	8002f40 <HAL_GetTick>
 8004ed6:	0003      	movs	r3, r0
 8004ed8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eda:	e00b      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004edc:	f7fe f830 	bl	8002f40 <HAL_GetTick>
 8004ee0:	0002      	movs	r2, r0
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d904      	bls.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004eea:	2313      	movs	r3, #19
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	2203      	movs	r2, #3
 8004ef0:	701a      	strb	r2, [r3, #0]
        break;
 8004ef2:	e005      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ef4:	4b6f      	ldr	r3, [pc, #444]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	2380      	movs	r3, #128	; 0x80
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4013      	ands	r3, r2
 8004efe:	d0ed      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004f00:	2313      	movs	r3, #19
 8004f02:	18fb      	adds	r3, r7, r3
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d154      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f0a:	4b69      	ldr	r3, [pc, #420]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f0e:	23c0      	movs	r3, #192	; 0xc0
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4013      	ands	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d019      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d014      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f26:	4b62      	ldr	r3, [pc, #392]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2a:	4a63      	ldr	r2, [pc, #396]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f30:	4b5f      	ldr	r3, [pc, #380]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f34:	4b5e      	ldr	r3, [pc, #376]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f36:	2180      	movs	r1, #128	; 0x80
 8004f38:	0249      	lsls	r1, r1, #9
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f3e:	4b5c      	ldr	r3, [pc, #368]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f42:	4b5b      	ldr	r3, [pc, #364]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f44:	495d      	ldr	r1, [pc, #372]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f46:	400a      	ands	r2, r1
 8004f48:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f4a:	4b59      	ldr	r3, [pc, #356]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2201      	movs	r2, #1
 8004f54:	4013      	ands	r3, r2
 8004f56:	d016      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fd fff2 	bl	8002f40 <HAL_GetTick>
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f60:	e00c      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f62:	f7fd ffed 	bl	8002f40 <HAL_GetTick>
 8004f66:	0002      	movs	r2, r0
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	4a54      	ldr	r2, [pc, #336]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d904      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004f72:	2313      	movs	r3, #19
 8004f74:	18fb      	adds	r3, r7, r3
 8004f76:	2203      	movs	r2, #3
 8004f78:	701a      	strb	r2, [r3, #0]
            break;
 8004f7a:	e004      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f7c:	4b4c      	ldr	r3, [pc, #304]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f80:	2202      	movs	r2, #2
 8004f82:	4013      	ands	r3, r2
 8004f84:	d0ed      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004f86:	2313      	movs	r3, #19
 8004f88:	18fb      	adds	r3, r7, r3
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10a      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f90:	4b47      	ldr	r3, [pc, #284]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f94:	4a48      	ldr	r2, [pc, #288]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	0019      	movs	r1, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	4b44      	ldr	r3, [pc, #272]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004fa4:	e00c      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fa6:	2312      	movs	r3, #18
 8004fa8:	18fb      	adds	r3, r7, r3
 8004faa:	2213      	movs	r2, #19
 8004fac:	18ba      	adds	r2, r7, r2
 8004fae:	7812      	ldrb	r2, [r2, #0]
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	e005      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb4:	2312      	movs	r3, #18
 8004fb6:	18fb      	adds	r3, r7, r3
 8004fb8:	2213      	movs	r2, #19
 8004fba:	18ba      	adds	r2, r7, r2
 8004fbc:	7812      	ldrb	r2, [r2, #0]
 8004fbe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fc0:	2311      	movs	r3, #17
 8004fc2:	18fb      	adds	r3, r7, r3
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d105      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fca:	4b39      	ldr	r3, [pc, #228]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004fcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fce:	4b38      	ldr	r3, [pc, #224]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004fd0:	493c      	ldr	r1, [pc, #240]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004fd2:	400a      	ands	r2, r1
 8004fd4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d009      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fe0:	4b33      	ldr	r3, [pc, #204]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe4:	2203      	movs	r2, #3
 8004fe6:	4393      	bics	r3, r2
 8004fe8:	0019      	movs	r1, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	4b30      	ldr	r3, [pc, #192]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d009      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ffe:	4b2c      	ldr	r3, [pc, #176]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005002:	220c      	movs	r2, #12
 8005004:	4393      	bics	r3, r2
 8005006:	0019      	movs	r1, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	4b28      	ldr	r3, [pc, #160]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800500e:	430a      	orrs	r2, r1
 8005010:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2220      	movs	r2, #32
 8005018:	4013      	ands	r3, r2
 800501a:	d009      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800501c:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800501e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005020:	4a29      	ldr	r2, [pc, #164]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005022:	4013      	ands	r3, r2
 8005024:	0019      	movs	r1, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	4b21      	ldr	r3, [pc, #132]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800502c:	430a      	orrs	r2, r1
 800502e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	2380      	movs	r3, #128	; 0x80
 8005036:	01db      	lsls	r3, r3, #7
 8005038:	4013      	ands	r3, r2
 800503a:	d015      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800503c:	4b1c      	ldr	r3, [pc, #112]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800503e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	0899      	lsrs	r1, r3, #2
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	695a      	ldr	r2, [r3, #20]
 8005048:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800504a:	430a      	orrs	r2, r1
 800504c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695a      	ldr	r2, [r3, #20]
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	05db      	lsls	r3, r3, #23
 8005056:	429a      	cmp	r2, r3
 8005058:	d106      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800505a:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	4b14      	ldr	r3, [pc, #80]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005060:	2180      	movs	r1, #128	; 0x80
 8005062:	0249      	lsls	r1, r1, #9
 8005064:	430a      	orrs	r2, r1
 8005066:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	2380      	movs	r3, #128	; 0x80
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	4013      	ands	r3, r2
 8005072:	d016      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005074:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005078:	4a14      	ldr	r2, [pc, #80]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800507a:	4013      	ands	r3, r2
 800507c:	0019      	movs	r1, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005084:	430a      	orrs	r2, r1
 8005086:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	2380      	movs	r3, #128	; 0x80
 800508e:	01db      	lsls	r3, r3, #7
 8005090:	429a      	cmp	r2, r3
 8005092:	d106      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005094:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800509a:	2180      	movs	r1, #128	; 0x80
 800509c:	0249      	lsls	r1, r1, #9
 800509e:	430a      	orrs	r2, r1
 80050a0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80050a2:	2312      	movs	r3, #18
 80050a4:	18fb      	adds	r3, r7, r3
 80050a6:	781b      	ldrb	r3, [r3, #0]
}
 80050a8:	0018      	movs	r0, r3
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b006      	add	sp, #24
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40007000 	.word	0x40007000
 80050b8:	fffffcff 	.word	0xfffffcff
 80050bc:	fffeffff 	.word	0xfffeffff
 80050c0:	00001388 	.word	0x00001388
 80050c4:	efffffff 	.word	0xefffffff
 80050c8:	ffffcfff 	.word	0xffffcfff
 80050cc:	ffff3fff 	.word	0xffff3fff

080050d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e046      	b.n	8005170 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2288      	movs	r2, #136	; 0x88
 80050e6:	589b      	ldr	r3, [r3, r2]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d107      	bne.n	80050fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2284      	movs	r2, #132	; 0x84
 80050f0:	2100      	movs	r1, #0
 80050f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	0018      	movs	r0, r3
 80050f8:	f7fd fda0 	bl	8002c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2288      	movs	r2, #136	; 0x88
 8005100:	2124      	movs	r1, #36	; 0x24
 8005102:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2101      	movs	r1, #1
 8005110:	438a      	bics	r2, r1
 8005112:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	0018      	movs	r0, r3
 8005118:	f000 f8cc 	bl	80052b4 <UART_SetConfig>
 800511c:	0003      	movs	r3, r0
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e024      	b.n	8005170 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	0018      	movs	r0, r3
 8005132:	f000 fa63 	bl	80055fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	490d      	ldr	r1, [pc, #52]	; (8005178 <HAL_UART_Init+0xa8>)
 8005142:	400a      	ands	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	212a      	movs	r1, #42	; 0x2a
 8005152:	438a      	bics	r2, r1
 8005154:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2101      	movs	r1, #1
 8005162:	430a      	orrs	r2, r1
 8005164:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	0018      	movs	r0, r3
 800516a:	f000 fafb 	bl	8005764 <UART_CheckIdleState>
 800516e:	0003      	movs	r3, r0
}
 8005170:	0018      	movs	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	b002      	add	sp, #8
 8005176:	bd80      	pop	{r7, pc}
 8005178:	ffffb7ff 	.word	0xffffb7ff

0800517c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08a      	sub	sp, #40	; 0x28
 8005180:	af02      	add	r7, sp, #8
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	1dbb      	adds	r3, r7, #6
 800518a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2288      	movs	r2, #136	; 0x88
 8005190:	589b      	ldr	r3, [r3, r2]
 8005192:	2b20      	cmp	r3, #32
 8005194:	d000      	beq.n	8005198 <HAL_UART_Transmit+0x1c>
 8005196:	e088      	b.n	80052aa <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_UART_Transmit+0x2a>
 800519e:	1dbb      	adds	r3, r7, #6
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e080      	b.n	80052ac <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	2380      	movs	r3, #128	; 0x80
 80051b0:	015b      	lsls	r3, r3, #5
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d109      	bne.n	80051ca <HAL_UART_Transmit+0x4e>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d105      	bne.n	80051ca <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2201      	movs	r2, #1
 80051c2:	4013      	ands	r3, r2
 80051c4:	d001      	beq.n	80051ca <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e070      	b.n	80052ac <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2290      	movs	r2, #144	; 0x90
 80051ce:	2100      	movs	r1, #0
 80051d0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2288      	movs	r2, #136	; 0x88
 80051d6:	2121      	movs	r1, #33	; 0x21
 80051d8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051da:	f7fd feb1 	bl	8002f40 <HAL_GetTick>
 80051de:	0003      	movs	r3, r0
 80051e0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1dba      	adds	r2, r7, #6
 80051e6:	2154      	movs	r1, #84	; 0x54
 80051e8:	8812      	ldrh	r2, [r2, #0]
 80051ea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	1dba      	adds	r2, r7, #6
 80051f0:	2156      	movs	r1, #86	; 0x56
 80051f2:	8812      	ldrh	r2, [r2, #0]
 80051f4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	015b      	lsls	r3, r3, #5
 80051fe:	429a      	cmp	r2, r3
 8005200:	d108      	bne.n	8005214 <HAL_UART_Transmit+0x98>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d104      	bne.n	8005214 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800520a:	2300      	movs	r3, #0
 800520c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	e003      	b.n	800521c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005218:	2300      	movs	r3, #0
 800521a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800521c:	e02c      	b.n	8005278 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	0013      	movs	r3, r2
 8005228:	2200      	movs	r2, #0
 800522a:	2180      	movs	r1, #128	; 0x80
 800522c:	f000 fae8 	bl	8005800 <UART_WaitOnFlagUntilTimeout>
 8005230:	1e03      	subs	r3, r0, #0
 8005232:	d001      	beq.n	8005238 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e039      	b.n	80052ac <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10b      	bne.n	8005256 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	001a      	movs	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	05d2      	lsls	r2, r2, #23
 800524a:	0dd2      	lsrs	r2, r2, #23
 800524c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	3302      	adds	r3, #2
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	e007      	b.n	8005266 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	781a      	ldrb	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	3301      	adds	r3, #1
 8005264:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2256      	movs	r2, #86	; 0x56
 800526a:	5a9b      	ldrh	r3, [r3, r2]
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b299      	uxth	r1, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2256      	movs	r2, #86	; 0x56
 8005276:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2256      	movs	r2, #86	; 0x56
 800527c:	5a9b      	ldrh	r3, [r3, r2]
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1cc      	bne.n	800521e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	0013      	movs	r3, r2
 800528e:	2200      	movs	r2, #0
 8005290:	2140      	movs	r1, #64	; 0x40
 8005292:	f000 fab5 	bl	8005800 <UART_WaitOnFlagUntilTimeout>
 8005296:	1e03      	subs	r3, r0, #0
 8005298:	d001      	beq.n	800529e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e006      	b.n	80052ac <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2288      	movs	r2, #136	; 0x88
 80052a2:	2120      	movs	r1, #32
 80052a4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e000      	b.n	80052ac <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80052aa:	2302      	movs	r3, #2
  }
}
 80052ac:	0018      	movs	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b008      	add	sp, #32
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052bc:	231a      	movs	r3, #26
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	4313      	orrs	r3, r2
 80052da:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4abc      	ldr	r2, [pc, #752]	; (80055d4 <UART_SetConfig+0x320>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	0019      	movs	r1, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	4ab7      	ldr	r2, [pc, #732]	; (80055d8 <UART_SetConfig+0x324>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	0019      	movs	r1, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	4313      	orrs	r3, r2
 8005318:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4aae      	ldr	r2, [pc, #696]	; (80055dc <UART_SetConfig+0x328>)
 8005322:	4013      	ands	r3, r2
 8005324:	0019      	movs	r1, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	430a      	orrs	r2, r1
 800532e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	220f      	movs	r2, #15
 8005338:	4393      	bics	r3, r2
 800533a:	0019      	movs	r1, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4aa4      	ldr	r2, [pc, #656]	; (80055e0 <UART_SetConfig+0x32c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d127      	bne.n	80053a2 <UART_SetConfig+0xee>
 8005352:	4ba4      	ldr	r3, [pc, #656]	; (80055e4 <UART_SetConfig+0x330>)
 8005354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005356:	2203      	movs	r2, #3
 8005358:	4013      	ands	r3, r2
 800535a:	2b03      	cmp	r3, #3
 800535c:	d017      	beq.n	800538e <UART_SetConfig+0xda>
 800535e:	d81b      	bhi.n	8005398 <UART_SetConfig+0xe4>
 8005360:	2b02      	cmp	r3, #2
 8005362:	d00a      	beq.n	800537a <UART_SetConfig+0xc6>
 8005364:	d818      	bhi.n	8005398 <UART_SetConfig+0xe4>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <UART_SetConfig+0xbc>
 800536a:	2b01      	cmp	r3, #1
 800536c:	d00a      	beq.n	8005384 <UART_SetConfig+0xd0>
 800536e:	e013      	b.n	8005398 <UART_SetConfig+0xe4>
 8005370:	231b      	movs	r3, #27
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	2200      	movs	r2, #0
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	e058      	b.n	800542c <UART_SetConfig+0x178>
 800537a:	231b      	movs	r3, #27
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	2202      	movs	r2, #2
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e053      	b.n	800542c <UART_SetConfig+0x178>
 8005384:	231b      	movs	r3, #27
 8005386:	18fb      	adds	r3, r7, r3
 8005388:	2204      	movs	r2, #4
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	e04e      	b.n	800542c <UART_SetConfig+0x178>
 800538e:	231b      	movs	r3, #27
 8005390:	18fb      	adds	r3, r7, r3
 8005392:	2208      	movs	r2, #8
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	e049      	b.n	800542c <UART_SetConfig+0x178>
 8005398:	231b      	movs	r3, #27
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	2210      	movs	r2, #16
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	e044      	b.n	800542c <UART_SetConfig+0x178>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a90      	ldr	r2, [pc, #576]	; (80055e8 <UART_SetConfig+0x334>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d127      	bne.n	80053fc <UART_SetConfig+0x148>
 80053ac:	4b8d      	ldr	r3, [pc, #564]	; (80055e4 <UART_SetConfig+0x330>)
 80053ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b0:	220c      	movs	r2, #12
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	d017      	beq.n	80053e8 <UART_SetConfig+0x134>
 80053b8:	d81b      	bhi.n	80053f2 <UART_SetConfig+0x13e>
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d00a      	beq.n	80053d4 <UART_SetConfig+0x120>
 80053be:	d818      	bhi.n	80053f2 <UART_SetConfig+0x13e>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <UART_SetConfig+0x116>
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d00a      	beq.n	80053de <UART_SetConfig+0x12a>
 80053c8:	e013      	b.n	80053f2 <UART_SetConfig+0x13e>
 80053ca:	231b      	movs	r3, #27
 80053cc:	18fb      	adds	r3, r7, r3
 80053ce:	2200      	movs	r2, #0
 80053d0:	701a      	strb	r2, [r3, #0]
 80053d2:	e02b      	b.n	800542c <UART_SetConfig+0x178>
 80053d4:	231b      	movs	r3, #27
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	2202      	movs	r2, #2
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	e026      	b.n	800542c <UART_SetConfig+0x178>
 80053de:	231b      	movs	r3, #27
 80053e0:	18fb      	adds	r3, r7, r3
 80053e2:	2204      	movs	r2, #4
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	e021      	b.n	800542c <UART_SetConfig+0x178>
 80053e8:	231b      	movs	r3, #27
 80053ea:	18fb      	adds	r3, r7, r3
 80053ec:	2208      	movs	r2, #8
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	e01c      	b.n	800542c <UART_SetConfig+0x178>
 80053f2:	231b      	movs	r3, #27
 80053f4:	18fb      	adds	r3, r7, r3
 80053f6:	2210      	movs	r2, #16
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	e017      	b.n	800542c <UART_SetConfig+0x178>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a7a      	ldr	r2, [pc, #488]	; (80055ec <UART_SetConfig+0x338>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d104      	bne.n	8005410 <UART_SetConfig+0x15c>
 8005406:	231b      	movs	r3, #27
 8005408:	18fb      	adds	r3, r7, r3
 800540a:	2200      	movs	r2, #0
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	e00d      	b.n	800542c <UART_SetConfig+0x178>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a76      	ldr	r2, [pc, #472]	; (80055f0 <UART_SetConfig+0x33c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d104      	bne.n	8005424 <UART_SetConfig+0x170>
 800541a:	231b      	movs	r3, #27
 800541c:	18fb      	adds	r3, r7, r3
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	e003      	b.n	800542c <UART_SetConfig+0x178>
 8005424:	231b      	movs	r3, #27
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	2210      	movs	r2, #16
 800542a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	2380      	movs	r3, #128	; 0x80
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	429a      	cmp	r2, r3
 8005436:	d000      	beq.n	800543a <UART_SetConfig+0x186>
 8005438:	e065      	b.n	8005506 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800543a:	231b      	movs	r3, #27
 800543c:	18fb      	adds	r3, r7, r3
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b08      	cmp	r3, #8
 8005442:	d015      	beq.n	8005470 <UART_SetConfig+0x1bc>
 8005444:	dc18      	bgt.n	8005478 <UART_SetConfig+0x1c4>
 8005446:	2b04      	cmp	r3, #4
 8005448:	d00d      	beq.n	8005466 <UART_SetConfig+0x1b2>
 800544a:	dc15      	bgt.n	8005478 <UART_SetConfig+0x1c4>
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <UART_SetConfig+0x1a2>
 8005450:	2b02      	cmp	r3, #2
 8005452:	d005      	beq.n	8005460 <UART_SetConfig+0x1ac>
 8005454:	e010      	b.n	8005478 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005456:	f7ff fcf1 	bl	8004e3c <HAL_RCC_GetPCLK1Freq>
 800545a:	0003      	movs	r3, r0
 800545c:	617b      	str	r3, [r7, #20]
        break;
 800545e:	e012      	b.n	8005486 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005460:	4b64      	ldr	r3, [pc, #400]	; (80055f4 <UART_SetConfig+0x340>)
 8005462:	617b      	str	r3, [r7, #20]
        break;
 8005464:	e00f      	b.n	8005486 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005466:	f7ff fc5d 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 800546a:	0003      	movs	r3, r0
 800546c:	617b      	str	r3, [r7, #20]
        break;
 800546e:	e00a      	b.n	8005486 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005470:	2380      	movs	r3, #128	; 0x80
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	617b      	str	r3, [r7, #20]
        break;
 8005476:	e006      	b.n	8005486 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800547c:	231a      	movs	r3, #26
 800547e:	18fb      	adds	r3, r7, r3
 8005480:	2201      	movs	r2, #1
 8005482:	701a      	strb	r2, [r3, #0]
        break;
 8005484:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d100      	bne.n	800548e <UART_SetConfig+0x1da>
 800548c:	e08d      	b.n	80055aa <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005492:	4b59      	ldr	r3, [pc, #356]	; (80055f8 <UART_SetConfig+0x344>)
 8005494:	0052      	lsls	r2, r2, #1
 8005496:	5ad3      	ldrh	r3, [r2, r3]
 8005498:	0019      	movs	r1, r3
 800549a:	6978      	ldr	r0, [r7, #20]
 800549c:	f7fa fe30 	bl	8000100 <__udivsi3>
 80054a0:	0003      	movs	r3, r0
 80054a2:	005a      	lsls	r2, r3, #1
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	18d2      	adds	r2, r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	0019      	movs	r1, r3
 80054b2:	0010      	movs	r0, r2
 80054b4:	f7fa fe24 	bl	8000100 <__udivsi3>
 80054b8:	0003      	movs	r3, r0
 80054ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b0f      	cmp	r3, #15
 80054c0:	d91c      	bls.n	80054fc <UART_SetConfig+0x248>
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	2380      	movs	r3, #128	; 0x80
 80054c6:	025b      	lsls	r3, r3, #9
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d217      	bcs.n	80054fc <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	200e      	movs	r0, #14
 80054d2:	183b      	adds	r3, r7, r0
 80054d4:	210f      	movs	r1, #15
 80054d6:	438a      	bics	r2, r1
 80054d8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	085b      	lsrs	r3, r3, #1
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2207      	movs	r2, #7
 80054e2:	4013      	ands	r3, r2
 80054e4:	b299      	uxth	r1, r3
 80054e6:	183b      	adds	r3, r7, r0
 80054e8:	183a      	adds	r2, r7, r0
 80054ea:	8812      	ldrh	r2, [r2, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	183a      	adds	r2, r7, r0
 80054f6:	8812      	ldrh	r2, [r2, #0]
 80054f8:	60da      	str	r2, [r3, #12]
 80054fa:	e056      	b.n	80055aa <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80054fc:	231a      	movs	r3, #26
 80054fe:	18fb      	adds	r3, r7, r3
 8005500:	2201      	movs	r2, #1
 8005502:	701a      	strb	r2, [r3, #0]
 8005504:	e051      	b.n	80055aa <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005506:	231b      	movs	r3, #27
 8005508:	18fb      	adds	r3, r7, r3
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b08      	cmp	r3, #8
 800550e:	d015      	beq.n	800553c <UART_SetConfig+0x288>
 8005510:	dc18      	bgt.n	8005544 <UART_SetConfig+0x290>
 8005512:	2b04      	cmp	r3, #4
 8005514:	d00d      	beq.n	8005532 <UART_SetConfig+0x27e>
 8005516:	dc15      	bgt.n	8005544 <UART_SetConfig+0x290>
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <UART_SetConfig+0x26e>
 800551c:	2b02      	cmp	r3, #2
 800551e:	d005      	beq.n	800552c <UART_SetConfig+0x278>
 8005520:	e010      	b.n	8005544 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005522:	f7ff fc8b 	bl	8004e3c <HAL_RCC_GetPCLK1Freq>
 8005526:	0003      	movs	r3, r0
 8005528:	617b      	str	r3, [r7, #20]
        break;
 800552a:	e012      	b.n	8005552 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800552c:	4b31      	ldr	r3, [pc, #196]	; (80055f4 <UART_SetConfig+0x340>)
 800552e:	617b      	str	r3, [r7, #20]
        break;
 8005530:	e00f      	b.n	8005552 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005532:	f7ff fbf7 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8005536:	0003      	movs	r3, r0
 8005538:	617b      	str	r3, [r7, #20]
        break;
 800553a:	e00a      	b.n	8005552 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553c:	2380      	movs	r3, #128	; 0x80
 800553e:	021b      	lsls	r3, r3, #8
 8005540:	617b      	str	r3, [r7, #20]
        break;
 8005542:	e006      	b.n	8005552 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005548:	231a      	movs	r3, #26
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	2201      	movs	r2, #1
 800554e:	701a      	strb	r2, [r3, #0]
        break;
 8005550:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d028      	beq.n	80055aa <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800555c:	4b26      	ldr	r3, [pc, #152]	; (80055f8 <UART_SetConfig+0x344>)
 800555e:	0052      	lsls	r2, r2, #1
 8005560:	5ad3      	ldrh	r3, [r2, r3]
 8005562:	0019      	movs	r1, r3
 8005564:	6978      	ldr	r0, [r7, #20]
 8005566:	f7fa fdcb 	bl	8000100 <__udivsi3>
 800556a:	0003      	movs	r3, r0
 800556c:	001a      	movs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	085b      	lsrs	r3, r3, #1
 8005574:	18d2      	adds	r2, r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	0019      	movs	r1, r3
 800557c:	0010      	movs	r0, r2
 800557e:	f7fa fdbf 	bl	8000100 <__udivsi3>
 8005582:	0003      	movs	r3, r0
 8005584:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b0f      	cmp	r3, #15
 800558a:	d90a      	bls.n	80055a2 <UART_SetConfig+0x2ee>
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	2380      	movs	r3, #128	; 0x80
 8005590:	025b      	lsls	r3, r3, #9
 8005592:	429a      	cmp	r2, r3
 8005594:	d205      	bcs.n	80055a2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	b29a      	uxth	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60da      	str	r2, [r3, #12]
 80055a0:	e003      	b.n	80055aa <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80055a2:	231a      	movs	r3, #26
 80055a4:	18fb      	adds	r3, r7, r3
 80055a6:	2201      	movs	r2, #1
 80055a8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	226a      	movs	r2, #106	; 0x6a
 80055ae:	2101      	movs	r1, #1
 80055b0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2268      	movs	r2, #104	; 0x68
 80055b6:	2101      	movs	r1, #1
 80055b8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80055c6:	231a      	movs	r3, #26
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	781b      	ldrb	r3, [r3, #0]
}
 80055cc:	0018      	movs	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	b008      	add	sp, #32
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	cfff69f3 	.word	0xcfff69f3
 80055d8:	ffffcfff 	.word	0xffffcfff
 80055dc:	11fff4ff 	.word	0x11fff4ff
 80055e0:	40013800 	.word	0x40013800
 80055e4:	40021000 	.word	0x40021000
 80055e8:	40004400 	.word	0x40004400
 80055ec:	40004800 	.word	0x40004800
 80055f0:	40004c00 	.word	0x40004c00
 80055f4:	00f42400 	.word	0x00f42400
 80055f8:	080064a0 	.word	0x080064a0

080055fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005608:	2201      	movs	r2, #1
 800560a:	4013      	ands	r3, r2
 800560c:	d00b      	beq.n	8005626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	4a4a      	ldr	r2, [pc, #296]	; (8005740 <UART_AdvFeatureConfig+0x144>)
 8005616:	4013      	ands	r3, r2
 8005618:	0019      	movs	r1, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562a:	2202      	movs	r2, #2
 800562c:	4013      	ands	r3, r2
 800562e:	d00b      	beq.n	8005648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	4a43      	ldr	r2, [pc, #268]	; (8005744 <UART_AdvFeatureConfig+0x148>)
 8005638:	4013      	ands	r3, r2
 800563a:	0019      	movs	r1, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564c:	2204      	movs	r2, #4
 800564e:	4013      	ands	r3, r2
 8005650:	d00b      	beq.n	800566a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	4a3b      	ldr	r2, [pc, #236]	; (8005748 <UART_AdvFeatureConfig+0x14c>)
 800565a:	4013      	ands	r3, r2
 800565c:	0019      	movs	r1, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	2208      	movs	r2, #8
 8005670:	4013      	ands	r3, r2
 8005672:	d00b      	beq.n	800568c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	4a34      	ldr	r2, [pc, #208]	; (800574c <UART_AdvFeatureConfig+0x150>)
 800567c:	4013      	ands	r3, r2
 800567e:	0019      	movs	r1, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005690:	2210      	movs	r2, #16
 8005692:	4013      	ands	r3, r2
 8005694:	d00b      	beq.n	80056ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	4a2c      	ldr	r2, [pc, #176]	; (8005750 <UART_AdvFeatureConfig+0x154>)
 800569e:	4013      	ands	r3, r2
 80056a0:	0019      	movs	r1, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	2220      	movs	r2, #32
 80056b4:	4013      	ands	r3, r2
 80056b6:	d00b      	beq.n	80056d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	4a25      	ldr	r2, [pc, #148]	; (8005754 <UART_AdvFeatureConfig+0x158>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	0019      	movs	r1, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d4:	2240      	movs	r2, #64	; 0x40
 80056d6:	4013      	ands	r3, r2
 80056d8:	d01d      	beq.n	8005716 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	4a1d      	ldr	r2, [pc, #116]	; (8005758 <UART_AdvFeatureConfig+0x15c>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	0019      	movs	r1, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056f6:	2380      	movs	r3, #128	; 0x80
 80056f8:	035b      	lsls	r3, r3, #13
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d10b      	bne.n	8005716 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	4a15      	ldr	r2, [pc, #84]	; (800575c <UART_AdvFeatureConfig+0x160>)
 8005706:	4013      	ands	r3, r2
 8005708:	0019      	movs	r1, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	2280      	movs	r2, #128	; 0x80
 800571c:	4013      	ands	r3, r2
 800571e:	d00b      	beq.n	8005738 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	4a0e      	ldr	r2, [pc, #56]	; (8005760 <UART_AdvFeatureConfig+0x164>)
 8005728:	4013      	ands	r3, r2
 800572a:	0019      	movs	r1, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	605a      	str	r2, [r3, #4]
  }
}
 8005738:	46c0      	nop			; (mov r8, r8)
 800573a:	46bd      	mov	sp, r7
 800573c:	b002      	add	sp, #8
 800573e:	bd80      	pop	{r7, pc}
 8005740:	fffdffff 	.word	0xfffdffff
 8005744:	fffeffff 	.word	0xfffeffff
 8005748:	fffbffff 	.word	0xfffbffff
 800574c:	ffff7fff 	.word	0xffff7fff
 8005750:	ffffefff 	.word	0xffffefff
 8005754:	ffffdfff 	.word	0xffffdfff
 8005758:	ffefffff 	.word	0xffefffff
 800575c:	ff9fffff 	.word	0xff9fffff
 8005760:	fff7ffff 	.word	0xfff7ffff

08005764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af02      	add	r7, sp, #8
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2290      	movs	r2, #144	; 0x90
 8005770:	2100      	movs	r1, #0
 8005772:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005774:	f7fd fbe4 	bl	8002f40 <HAL_GetTick>
 8005778:	0003      	movs	r3, r0
 800577a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2208      	movs	r2, #8
 8005784:	4013      	ands	r3, r2
 8005786:	2b08      	cmp	r3, #8
 8005788:	d10c      	bne.n	80057a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2280      	movs	r2, #128	; 0x80
 800578e:	0391      	lsls	r1, r2, #14
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	4a1a      	ldr	r2, [pc, #104]	; (80057fc <UART_CheckIdleState+0x98>)
 8005794:	9200      	str	r2, [sp, #0]
 8005796:	2200      	movs	r2, #0
 8005798:	f000 f832 	bl	8005800 <UART_WaitOnFlagUntilTimeout>
 800579c:	1e03      	subs	r3, r0, #0
 800579e:	d001      	beq.n	80057a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e026      	b.n	80057f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2204      	movs	r2, #4
 80057ac:	4013      	ands	r3, r2
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d10c      	bne.n	80057cc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2280      	movs	r2, #128	; 0x80
 80057b6:	03d1      	lsls	r1, r2, #15
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	4a10      	ldr	r2, [pc, #64]	; (80057fc <UART_CheckIdleState+0x98>)
 80057bc:	9200      	str	r2, [sp, #0]
 80057be:	2200      	movs	r2, #0
 80057c0:	f000 f81e 	bl	8005800 <UART_WaitOnFlagUntilTimeout>
 80057c4:	1e03      	subs	r3, r0, #0
 80057c6:	d001      	beq.n	80057cc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e012      	b.n	80057f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2288      	movs	r2, #136	; 0x88
 80057d0:	2120      	movs	r1, #32
 80057d2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	228c      	movs	r2, #140	; 0x8c
 80057d8:	2120      	movs	r1, #32
 80057da:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2284      	movs	r2, #132	; 0x84
 80057ec:	2100      	movs	r1, #0
 80057ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	0018      	movs	r0, r3
 80057f4:	46bd      	mov	sp, r7
 80057f6:	b004      	add	sp, #16
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	01ffffff 	.word	0x01ffffff

08005800 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b094      	sub	sp, #80	; 0x50
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	1dfb      	adds	r3, r7, #7
 800580e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005810:	e0a7      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005814:	3301      	adds	r3, #1
 8005816:	d100      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005818:	e0a3      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800581a:	f7fd fb91 	bl	8002f40 <HAL_GetTick>
 800581e:	0002      	movs	r2, r0
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005826:	429a      	cmp	r2, r3
 8005828:	d302      	bcc.n	8005830 <UART_WaitOnFlagUntilTimeout+0x30>
 800582a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800582c:	2b00      	cmp	r3, #0
 800582e:	d13f      	bne.n	80058b0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005830:	f3ef 8310 	mrs	r3, PRIMASK
 8005834:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005836:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005838:	647b      	str	r3, [r7, #68]	; 0x44
 800583a:	2301      	movs	r3, #1
 800583c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	f383 8810 	msr	PRIMASK, r3
}
 8005844:	46c0      	nop			; (mov r8, r8)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	494e      	ldr	r1, [pc, #312]	; (800598c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005852:	400a      	ands	r2, r1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005858:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	f383 8810 	msr	PRIMASK, r3
}
 8005860:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005862:	f3ef 8310 	mrs	r3, PRIMASK
 8005866:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586a:	643b      	str	r3, [r7, #64]	; 0x40
 800586c:	2301      	movs	r3, #1
 800586e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	f383 8810 	msr	PRIMASK, r3
}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2101      	movs	r1, #1
 8005884:	438a      	bics	r2, r1
 8005886:	609a      	str	r2, [r3, #8]
 8005888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800588a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800588c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588e:	f383 8810 	msr	PRIMASK, r3
}
 8005892:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2288      	movs	r2, #136	; 0x88
 8005898:	2120      	movs	r1, #32
 800589a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	228c      	movs	r2, #140	; 0x8c
 80058a0:	2120      	movs	r1, #32
 80058a2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2284      	movs	r2, #132	; 0x84
 80058a8:	2100      	movs	r1, #0
 80058aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e069      	b.n	8005984 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2204      	movs	r2, #4
 80058b8:	4013      	ands	r3, r2
 80058ba:	d052      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69da      	ldr	r2, [r3, #28]
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	401a      	ands	r2, r3
 80058c8:	2380      	movs	r3, #128	; 0x80
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d148      	bne.n	8005962 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2280      	movs	r2, #128	; 0x80
 80058d6:	0112      	lsls	r2, r2, #4
 80058d8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058da:	f3ef 8310 	mrs	r3, PRIMASK
 80058de:	613b      	str	r3, [r7, #16]
  return(result);
 80058e0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80058e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058e4:	2301      	movs	r3, #1
 80058e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f383 8810 	msr	PRIMASK, r3
}
 80058ee:	46c0      	nop			; (mov r8, r8)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4924      	ldr	r1, [pc, #144]	; (800598c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80058fc:	400a      	ands	r2, r1
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005902:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	f383 8810 	msr	PRIMASK, r3
}
 800590a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800590c:	f3ef 8310 	mrs	r3, PRIMASK
 8005910:	61fb      	str	r3, [r7, #28]
  return(result);
 8005912:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005914:	64bb      	str	r3, [r7, #72]	; 0x48
 8005916:	2301      	movs	r3, #1
 8005918:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	f383 8810 	msr	PRIMASK, r3
}
 8005920:	46c0      	nop			; (mov r8, r8)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2101      	movs	r1, #1
 800592e:	438a      	bics	r2, r1
 8005930:	609a      	str	r2, [r3, #8]
 8005932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	f383 8810 	msr	PRIMASK, r3
}
 800593c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2288      	movs	r2, #136	; 0x88
 8005942:	2120      	movs	r1, #32
 8005944:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	228c      	movs	r2, #140	; 0x8c
 800594a:	2120      	movs	r1, #32
 800594c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2290      	movs	r2, #144	; 0x90
 8005952:	2120      	movs	r1, #32
 8005954:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2284      	movs	r2, #132	; 0x84
 800595a:	2100      	movs	r1, #0
 800595c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e010      	b.n	8005984 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	425a      	negs	r2, r3
 8005972:	4153      	adcs	r3, r2
 8005974:	b2db      	uxtb	r3, r3
 8005976:	001a      	movs	r2, r3
 8005978:	1dfb      	adds	r3, r7, #7
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d100      	bne.n	8005982 <UART_WaitOnFlagUntilTimeout+0x182>
 8005980:	e747      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	0018      	movs	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	b014      	add	sp, #80	; 0x50
 800598a:	bd80      	pop	{r7, pc}
 800598c:	fffffe5f 	.word	0xfffffe5f

08005990 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e05d      	b.n	8005a64 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2288      	movs	r2, #136	; 0x88
 80059ac:	589b      	ldr	r3, [r3, r2]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d107      	bne.n	80059c2 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2284      	movs	r2, #132	; 0x84
 80059b6:	2100      	movs	r1, #0
 80059b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	0018      	movs	r0, r3
 80059be:	f7fd f93d 	bl	8002c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2288      	movs	r2, #136	; 0x88
 80059c6:	2124      	movs	r1, #36	; 0x24
 80059c8:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2101      	movs	r1, #1
 80059d6:	438a      	bics	r2, r1
 80059d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	0018      	movs	r0, r3
 80059de:	f7ff fc69 	bl	80052b4 <UART_SetConfig>
 80059e2:	0003      	movs	r3, r0
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_RS485Ex_Init+0x5c>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e03b      	b.n	8005a64 <HAL_RS485Ex_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_RS485Ex_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	0018      	movs	r0, r3
 80059f8:	f7ff fe00 	bl	80055fc <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2180      	movs	r1, #128	; 0x80
 8005a08:	01c9      	lsls	r1, r1, #7
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <HAL_RS485Ex_Init+0xdc>)
 8005a16:	4013      	ands	r3, r2
 8005a18:	0019      	movs	r1, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	055b      	lsls	r3, r3, #21
 8005a28:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	041b      	lsls	r3, r3, #16
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a0d      	ldr	r2, [pc, #52]	; (8005a70 <HAL_RS485Ex_Init+0xe0>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	0019      	movs	r1, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2101      	movs	r1, #1
 8005a56:	430a      	orrs	r2, r1
 8005a58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f7ff fe81 	bl	8005764 <UART_CheckIdleState>
 8005a62:	0003      	movs	r3, r0
}
 8005a64:	0018      	movs	r0, r3
 8005a66:	46bd      	mov	sp, r7
 8005a68:	b006      	add	sp, #24
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	ffff7fff 	.word	0xffff7fff
 8005a70:	fc00ffff 	.word	0xfc00ffff

08005a74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2284      	movs	r2, #132	; 0x84
 8005a80:	5c9b      	ldrb	r3, [r3, r2]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_UARTEx_DisableFifoMode+0x16>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e027      	b.n	8005ada <HAL_UARTEx_DisableFifoMode+0x66>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2284      	movs	r2, #132	; 0x84
 8005a8e:	2101      	movs	r1, #1
 8005a90:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2288      	movs	r2, #136	; 0x88
 8005a96:	2124      	movs	r1, #36	; 0x24
 8005a98:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2101      	movs	r1, #1
 8005aae:	438a      	bics	r2, r1
 8005ab0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4a0b      	ldr	r2, [pc, #44]	; (8005ae4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2288      	movs	r2, #136	; 0x88
 8005acc:	2120      	movs	r1, #32
 8005ace:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2284      	movs	r2, #132	; 0x84
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	0018      	movs	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b004      	add	sp, #16
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	dfffffff 	.word	0xdfffffff

08005ae8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2284      	movs	r2, #132	; 0x84
 8005af6:	5c9b      	ldrb	r3, [r3, r2]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e02e      	b.n	8005b5e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2284      	movs	r2, #132	; 0x84
 8005b04:	2101      	movs	r1, #1
 8005b06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2288      	movs	r2, #136	; 0x88
 8005b0c:	2124      	movs	r1, #36	; 0x24
 8005b0e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2101      	movs	r1, #1
 8005b24:	438a      	bics	r2, r1
 8005b26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	08d9      	lsrs	r1, r3, #3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f000 f854 	bl	8005bec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2288      	movs	r2, #136	; 0x88
 8005b50:	2120      	movs	r1, #32
 8005b52:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2284      	movs	r2, #132	; 0x84
 8005b58:	2100      	movs	r1, #0
 8005b5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	0018      	movs	r0, r3
 8005b60:	46bd      	mov	sp, r7
 8005b62:	b004      	add	sp, #16
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2284      	movs	r2, #132	; 0x84
 8005b76:	5c9b      	ldrb	r3, [r3, r2]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e02f      	b.n	8005be0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2284      	movs	r2, #132	; 0x84
 8005b84:	2101      	movs	r1, #1
 8005b86:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2288      	movs	r2, #136	; 0x88
 8005b8c:	2124      	movs	r1, #36	; 0x24
 8005b8e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	438a      	bics	r2, r1
 8005ba6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	4a0e      	ldr	r2, [pc, #56]	; (8005be8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	0019      	movs	r1, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f000 f813 	bl	8005bec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2288      	movs	r2, #136	; 0x88
 8005bd2:	2120      	movs	r1, #32
 8005bd4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2284      	movs	r2, #132	; 0x84
 8005bda:	2100      	movs	r1, #0
 8005bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	0018      	movs	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	b004      	add	sp, #16
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	f1ffffff 	.word	0xf1ffffff

08005bec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d108      	bne.n	8005c0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	226a      	movs	r2, #106	; 0x6a
 8005c00:	2101      	movs	r1, #1
 8005c02:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2268      	movs	r2, #104	; 0x68
 8005c08:	2101      	movs	r1, #1
 8005c0a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c0c:	e043      	b.n	8005c96 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c0e:	260f      	movs	r6, #15
 8005c10:	19bb      	adds	r3, r7, r6
 8005c12:	2208      	movs	r2, #8
 8005c14:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c16:	200e      	movs	r0, #14
 8005c18:	183b      	adds	r3, r7, r0
 8005c1a:	2208      	movs	r2, #8
 8005c1c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	0e5b      	lsrs	r3, r3, #25
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	240d      	movs	r4, #13
 8005c2a:	193b      	adds	r3, r7, r4
 8005c2c:	2107      	movs	r1, #7
 8005c2e:	400a      	ands	r2, r1
 8005c30:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	0f5b      	lsrs	r3, r3, #29
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	250c      	movs	r5, #12
 8005c3e:	197b      	adds	r3, r7, r5
 8005c40:	2107      	movs	r1, #7
 8005c42:	400a      	ands	r2, r1
 8005c44:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c46:	183b      	adds	r3, r7, r0
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	197a      	adds	r2, r7, r5
 8005c4c:	7812      	ldrb	r2, [r2, #0]
 8005c4e:	4914      	ldr	r1, [pc, #80]	; (8005ca0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005c50:	5c8a      	ldrb	r2, [r1, r2]
 8005c52:	435a      	muls	r2, r3
 8005c54:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c56:	197b      	adds	r3, r7, r5
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	4a12      	ldr	r2, [pc, #72]	; (8005ca4 <UARTEx_SetNbDataToProcess+0xb8>)
 8005c5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c5e:	0019      	movs	r1, r3
 8005c60:	f7fa fad8 	bl	8000214 <__divsi3>
 8005c64:	0003      	movs	r3, r0
 8005c66:	b299      	uxth	r1, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	226a      	movs	r2, #106	; 0x6a
 8005c6c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c6e:	19bb      	adds	r3, r7, r6
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	193a      	adds	r2, r7, r4
 8005c74:	7812      	ldrb	r2, [r2, #0]
 8005c76:	490a      	ldr	r1, [pc, #40]	; (8005ca0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005c78:	5c8a      	ldrb	r2, [r1, r2]
 8005c7a:	435a      	muls	r2, r3
 8005c7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c7e:	193b      	adds	r3, r7, r4
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	4a08      	ldr	r2, [pc, #32]	; (8005ca4 <UARTEx_SetNbDataToProcess+0xb8>)
 8005c84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c86:	0019      	movs	r1, r3
 8005c88:	f7fa fac4 	bl	8000214 <__divsi3>
 8005c8c:	0003      	movs	r3, r0
 8005c8e:	b299      	uxth	r1, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2268      	movs	r2, #104	; 0x68
 8005c94:	5299      	strh	r1, [r3, r2]
}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	b005      	add	sp, #20
 8005c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	080064b8 	.word	0x080064b8
 8005ca4:	080064c0 	.word	0x080064c0

08005ca8 <__errno>:
 8005ca8:	4b01      	ldr	r3, [pc, #4]	; (8005cb0 <__errno+0x8>)
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	4770      	bx	lr
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	2000000c 	.word	0x2000000c

08005cb4 <__libc_init_array>:
 8005cb4:	b570      	push	{r4, r5, r6, lr}
 8005cb6:	2600      	movs	r6, #0
 8005cb8:	4d0c      	ldr	r5, [pc, #48]	; (8005cec <__libc_init_array+0x38>)
 8005cba:	4c0d      	ldr	r4, [pc, #52]	; (8005cf0 <__libc_init_array+0x3c>)
 8005cbc:	1b64      	subs	r4, r4, r5
 8005cbe:	10a4      	asrs	r4, r4, #2
 8005cc0:	42a6      	cmp	r6, r4
 8005cc2:	d109      	bne.n	8005cd8 <__libc_init_array+0x24>
 8005cc4:	2600      	movs	r6, #0
 8005cc6:	f000 fa65 	bl	8006194 <_init>
 8005cca:	4d0a      	ldr	r5, [pc, #40]	; (8005cf4 <__libc_init_array+0x40>)
 8005ccc:	4c0a      	ldr	r4, [pc, #40]	; (8005cf8 <__libc_init_array+0x44>)
 8005cce:	1b64      	subs	r4, r4, r5
 8005cd0:	10a4      	asrs	r4, r4, #2
 8005cd2:	42a6      	cmp	r6, r4
 8005cd4:	d105      	bne.n	8005ce2 <__libc_init_array+0x2e>
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}
 8005cd8:	00b3      	lsls	r3, r6, #2
 8005cda:	58eb      	ldr	r3, [r5, r3]
 8005cdc:	4798      	blx	r3
 8005cde:	3601      	adds	r6, #1
 8005ce0:	e7ee      	b.n	8005cc0 <__libc_init_array+0xc>
 8005ce2:	00b3      	lsls	r3, r6, #2
 8005ce4:	58eb      	ldr	r3, [r5, r3]
 8005ce6:	4798      	blx	r3
 8005ce8:	3601      	adds	r6, #1
 8005cea:	e7f2      	b.n	8005cd2 <__libc_init_array+0x1e>
 8005cec:	080064cc 	.word	0x080064cc
 8005cf0:	080064cc 	.word	0x080064cc
 8005cf4:	080064cc 	.word	0x080064cc
 8005cf8:	080064d0 	.word	0x080064d0

08005cfc <memcpy>:
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	b510      	push	{r4, lr}
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d100      	bne.n	8005d06 <memcpy+0xa>
 8005d04:	bd10      	pop	{r4, pc}
 8005d06:	5ccc      	ldrb	r4, [r1, r3]
 8005d08:	54c4      	strb	r4, [r0, r3]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	e7f8      	b.n	8005d00 <memcpy+0x4>

08005d0e <memset>:
 8005d0e:	0003      	movs	r3, r0
 8005d10:	1882      	adds	r2, r0, r2
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d100      	bne.n	8005d18 <memset+0xa>
 8005d16:	4770      	bx	lr
 8005d18:	7019      	strb	r1, [r3, #0]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	e7f9      	b.n	8005d12 <memset+0x4>
	...

08005d20 <round>:
 8005d20:	b570      	push	{r4, r5, r6, lr}
 8005d22:	000d      	movs	r5, r1
 8005d24:	0006      	movs	r6, r0
 8005d26:	0001      	movs	r1, r0
 8005d28:	006a      	lsls	r2, r5, #1
 8005d2a:	4820      	ldr	r0, [pc, #128]	; (8005dac <round+0x8c>)
 8005d2c:	0d52      	lsrs	r2, r2, #21
 8005d2e:	1810      	adds	r0, r2, r0
 8005d30:	2813      	cmp	r0, #19
 8005d32:	dc18      	bgt.n	8005d66 <round+0x46>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	da09      	bge.n	8005d4c <round+0x2c>
 8005d38:	0feb      	lsrs	r3, r5, #31
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	07db      	lsls	r3, r3, #31
 8005d3e:	1c41      	adds	r1, r0, #1
 8005d40:	d101      	bne.n	8005d46 <round+0x26>
 8005d42:	491b      	ldr	r1, [pc, #108]	; (8005db0 <round+0x90>)
 8005d44:	430b      	orrs	r3, r1
 8005d46:	0019      	movs	r1, r3
 8005d48:	0010      	movs	r0, r2
 8005d4a:	e018      	b.n	8005d7e <round+0x5e>
 8005d4c:	4c19      	ldr	r4, [pc, #100]	; (8005db4 <round+0x94>)
 8005d4e:	4104      	asrs	r4, r0
 8005d50:	0022      	movs	r2, r4
 8005d52:	402a      	ands	r2, r5
 8005d54:	4311      	orrs	r1, r2
 8005d56:	d014      	beq.n	8005d82 <round+0x62>
 8005d58:	2280      	movs	r2, #128	; 0x80
 8005d5a:	0312      	lsls	r2, r2, #12
 8005d5c:	4102      	asrs	r2, r0
 8005d5e:	1953      	adds	r3, r2, r5
 8005d60:	43a3      	bics	r3, r4
 8005d62:	2200      	movs	r2, #0
 8005d64:	e7ef      	b.n	8005d46 <round+0x26>
 8005d66:	2833      	cmp	r0, #51	; 0x33
 8005d68:	dd0e      	ble.n	8005d88 <round+0x68>
 8005d6a:	2380      	movs	r3, #128	; 0x80
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	4298      	cmp	r0, r3
 8005d70:	d107      	bne.n	8005d82 <round+0x62>
 8005d72:	0032      	movs	r2, r6
 8005d74:	002b      	movs	r3, r5
 8005d76:	0030      	movs	r0, r6
 8005d78:	0029      	movs	r1, r5
 8005d7a:	f7fa fb75 	bl	8000468 <__aeabi_dadd>
 8005d7e:	0006      	movs	r6, r0
 8005d80:	000d      	movs	r5, r1
 8005d82:	0030      	movs	r0, r6
 8005d84:	0029      	movs	r1, r5
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
 8005d88:	4c0b      	ldr	r4, [pc, #44]	; (8005db8 <round+0x98>)
 8005d8a:	1912      	adds	r2, r2, r4
 8005d8c:	2401      	movs	r4, #1
 8005d8e:	4264      	negs	r4, r4
 8005d90:	40d4      	lsrs	r4, r2
 8005d92:	4234      	tst	r4, r6
 8005d94:	d0f5      	beq.n	8005d82 <round+0x62>
 8005d96:	2233      	movs	r2, #51	; 0x33
 8005d98:	1a10      	subs	r0, r2, r0
 8005d9a:	3a32      	subs	r2, #50	; 0x32
 8005d9c:	4082      	lsls	r2, r0
 8005d9e:	1992      	adds	r2, r2, r6
 8005da0:	42b2      	cmp	r2, r6
 8005da2:	4189      	sbcs	r1, r1
 8005da4:	4249      	negs	r1, r1
 8005da6:	186b      	adds	r3, r5, r1
 8005da8:	43a2      	bics	r2, r4
 8005daa:	e7cc      	b.n	8005d46 <round+0x26>
 8005dac:	fffffc01 	.word	0xfffffc01
 8005db0:	3ff00000 	.word	0x3ff00000
 8005db4:	000fffff 	.word	0x000fffff
 8005db8:	fffffbed 	.word	0xfffffbed

08005dbc <log>:
 8005dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbe:	0004      	movs	r4, r0
 8005dc0:	000d      	movs	r5, r1
 8005dc2:	f000 f831 	bl	8005e28 <__ieee754_log>
 8005dc6:	0022      	movs	r2, r4
 8005dc8:	0006      	movs	r6, r0
 8005dca:	000f      	movs	r7, r1
 8005dcc:	002b      	movs	r3, r5
 8005dce:	0020      	movs	r0, r4
 8005dd0:	0029      	movs	r1, r5
 8005dd2:	f7fc f885 	bl	8001ee0 <__aeabi_dcmpun>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d115      	bne.n	8005e06 <log+0x4a>
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2300      	movs	r3, #0
 8005dde:	0020      	movs	r0, r4
 8005de0:	0029      	movs	r1, r5
 8005de2:	f7fa fb2d 	bl	8000440 <__aeabi_dcmpgt>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d10d      	bne.n	8005e06 <log+0x4a>
 8005dea:	2200      	movs	r2, #0
 8005dec:	2300      	movs	r3, #0
 8005dee:	0020      	movs	r0, r4
 8005df0:	0029      	movs	r1, r5
 8005df2:	f7fa fb0b 	bl	800040c <__aeabi_dcmpeq>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d008      	beq.n	8005e0c <log+0x50>
 8005dfa:	f7ff ff55 	bl	8005ca8 <__errno>
 8005dfe:	2322      	movs	r3, #34	; 0x22
 8005e00:	2600      	movs	r6, #0
 8005e02:	4f07      	ldr	r7, [pc, #28]	; (8005e20 <log+0x64>)
 8005e04:	6003      	str	r3, [r0, #0]
 8005e06:	0030      	movs	r0, r6
 8005e08:	0039      	movs	r1, r7
 8005e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e0c:	f7ff ff4c 	bl	8005ca8 <__errno>
 8005e10:	2321      	movs	r3, #33	; 0x21
 8005e12:	6003      	str	r3, [r0, #0]
 8005e14:	4803      	ldr	r0, [pc, #12]	; (8005e24 <log+0x68>)
 8005e16:	f000 f9b7 	bl	8006188 <nan>
 8005e1a:	0006      	movs	r6, r0
 8005e1c:	000f      	movs	r7, r1
 8005e1e:	e7f2      	b.n	8005e06 <log+0x4a>
 8005e20:	fff00000 	.word	0xfff00000
 8005e24:	080064c8 	.word	0x080064c8

08005e28 <__ieee754_log>:
 8005e28:	2280      	movs	r2, #128	; 0x80
 8005e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e2c:	000b      	movs	r3, r1
 8005e2e:	b08d      	sub	sp, #52	; 0x34
 8005e30:	0352      	lsls	r2, r2, #13
 8005e32:	4291      	cmp	r1, r2
 8005e34:	da22      	bge.n	8005e7c <__ieee754_log+0x54>
 8005e36:	004a      	lsls	r2, r1, #1
 8005e38:	0852      	lsrs	r2, r2, #1
 8005e3a:	4302      	orrs	r2, r0
 8005e3c:	d107      	bne.n	8005e4e <__ieee754_log+0x26>
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2300      	movs	r3, #0
 8005e42:	2000      	movs	r0, #0
 8005e44:	49b3      	ldr	r1, [pc, #716]	; (8006114 <__ieee754_log+0x2ec>)
 8005e46:	f7fa fe4b 	bl	8000ae0 <__aeabi_ddiv>
 8005e4a:	b00d      	add	sp, #52	; 0x34
 8005e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e4e:	2900      	cmp	r1, #0
 8005e50:	da05      	bge.n	8005e5e <__ieee754_log+0x36>
 8005e52:	0002      	movs	r2, r0
 8005e54:	f7fb fcb2 	bl	80017bc <__aeabi_dsub>
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e7f3      	b.n	8005e46 <__ieee754_log+0x1e>
 8005e5e:	4bae      	ldr	r3, [pc, #696]	; (8006118 <__ieee754_log+0x2f0>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	f7fb fa3f 	bl	80012e4 <__aeabi_dmul>
 8005e66:	2436      	movs	r4, #54	; 0x36
 8005e68:	000b      	movs	r3, r1
 8005e6a:	4264      	negs	r4, r4
 8005e6c:	4aab      	ldr	r2, [pc, #684]	; (800611c <__ieee754_log+0x2f4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	dd06      	ble.n	8005e80 <__ieee754_log+0x58>
 8005e72:	0002      	movs	r2, r0
 8005e74:	000b      	movs	r3, r1
 8005e76:	f7fa faf7 	bl	8000468 <__aeabi_dadd>
 8005e7a:	e7e6      	b.n	8005e4a <__ieee754_log+0x22>
 8005e7c:	2400      	movs	r4, #0
 8005e7e:	e7f5      	b.n	8005e6c <__ieee754_log+0x44>
 8005e80:	4da7      	ldr	r5, [pc, #668]	; (8006120 <__ieee754_log+0x2f8>)
 8005e82:	151a      	asrs	r2, r3, #20
 8005e84:	1952      	adds	r2, r2, r5
 8005e86:	1912      	adds	r2, r2, r4
 8005e88:	031b      	lsls	r3, r3, #12
 8005e8a:	4ca6      	ldr	r4, [pc, #664]	; (8006124 <__ieee754_log+0x2fc>)
 8005e8c:	0b1b      	lsrs	r3, r3, #12
 8005e8e:	9302      	str	r3, [sp, #8]
 8005e90:	191c      	adds	r4, r3, r4
 8005e92:	2380      	movs	r3, #128	; 0x80
 8005e94:	035b      	lsls	r3, r3, #13
 8005e96:	4023      	ands	r3, r4
 8005e98:	4ca3      	ldr	r4, [pc, #652]	; (8006128 <__ieee754_log+0x300>)
 8005e9a:	9d02      	ldr	r5, [sp, #8]
 8005e9c:	405c      	eors	r4, r3
 8005e9e:	151b      	asrs	r3, r3, #20
 8005ea0:	189b      	adds	r3, r3, r2
 8005ea2:	4325      	orrs	r5, r4
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	0029      	movs	r1, r5
 8005eaa:	4b9f      	ldr	r3, [pc, #636]	; (8006128 <__ieee754_log+0x300>)
 8005eac:	f7fb fc86 	bl	80017bc <__aeabi_dsub>
 8005eb0:	9b02      	ldr	r3, [sp, #8]
 8005eb2:	0006      	movs	r6, r0
 8005eb4:	3302      	adds	r3, #2
 8005eb6:	031b      	lsls	r3, r3, #12
 8005eb8:	000f      	movs	r7, r1
 8005eba:	2200      	movs	r2, #0
 8005ebc:	0b1b      	lsrs	r3, r3, #12
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	dc64      	bgt.n	8005f8c <__ieee754_log+0x164>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f7fa faa2 	bl	800040c <__aeabi_dcmpeq>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d019      	beq.n	8005f00 <__ieee754_log+0xd8>
 8005ecc:	9b00      	ldr	r3, [sp, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d100      	bne.n	8005ed4 <__ieee754_log+0xac>
 8005ed2:	e11c      	b.n	800610e <__ieee754_log+0x2e6>
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f7fc f857 	bl	8001f88 <__aeabi_i2d>
 8005eda:	4a94      	ldr	r2, [pc, #592]	; (800612c <__ieee754_log+0x304>)
 8005edc:	4b94      	ldr	r3, [pc, #592]	; (8006130 <__ieee754_log+0x308>)
 8005ede:	0004      	movs	r4, r0
 8005ee0:	000d      	movs	r5, r1
 8005ee2:	f7fb f9ff 	bl	80012e4 <__aeabi_dmul>
 8005ee6:	4a93      	ldr	r2, [pc, #588]	; (8006134 <__ieee754_log+0x30c>)
 8005ee8:	0006      	movs	r6, r0
 8005eea:	000f      	movs	r7, r1
 8005eec:	4b92      	ldr	r3, [pc, #584]	; (8006138 <__ieee754_log+0x310>)
 8005eee:	0020      	movs	r0, r4
 8005ef0:	0029      	movs	r1, r5
 8005ef2:	f7fb f9f7 	bl	80012e4 <__aeabi_dmul>
 8005ef6:	0002      	movs	r2, r0
 8005ef8:	000b      	movs	r3, r1
 8005efa:	0030      	movs	r0, r6
 8005efc:	0039      	movs	r1, r7
 8005efe:	e7ba      	b.n	8005e76 <__ieee754_log+0x4e>
 8005f00:	4a8e      	ldr	r2, [pc, #568]	; (800613c <__ieee754_log+0x314>)
 8005f02:	4b8f      	ldr	r3, [pc, #572]	; (8006140 <__ieee754_log+0x318>)
 8005f04:	0030      	movs	r0, r6
 8005f06:	0039      	movs	r1, r7
 8005f08:	f7fb f9ec 	bl	80012e4 <__aeabi_dmul>
 8005f0c:	0002      	movs	r2, r0
 8005f0e:	000b      	movs	r3, r1
 8005f10:	2000      	movs	r0, #0
 8005f12:	498c      	ldr	r1, [pc, #560]	; (8006144 <__ieee754_log+0x31c>)
 8005f14:	f7fb fc52 	bl	80017bc <__aeabi_dsub>
 8005f18:	0032      	movs	r2, r6
 8005f1a:	0004      	movs	r4, r0
 8005f1c:	000d      	movs	r5, r1
 8005f1e:	003b      	movs	r3, r7
 8005f20:	0030      	movs	r0, r6
 8005f22:	0039      	movs	r1, r7
 8005f24:	f7fb f9de 	bl	80012e4 <__aeabi_dmul>
 8005f28:	000b      	movs	r3, r1
 8005f2a:	0002      	movs	r2, r0
 8005f2c:	0029      	movs	r1, r5
 8005f2e:	0020      	movs	r0, r4
 8005f30:	f7fb f9d8 	bl	80012e4 <__aeabi_dmul>
 8005f34:	9b00      	ldr	r3, [sp, #0]
 8005f36:	9002      	str	r0, [sp, #8]
 8005f38:	9103      	str	r1, [sp, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d106      	bne.n	8005f4c <__ieee754_log+0x124>
 8005f3e:	0002      	movs	r2, r0
 8005f40:	000b      	movs	r3, r1
 8005f42:	0030      	movs	r0, r6
 8005f44:	0039      	movs	r1, r7
 8005f46:	f7fb fc39 	bl	80017bc <__aeabi_dsub>
 8005f4a:	e77e      	b.n	8005e4a <__ieee754_log+0x22>
 8005f4c:	9800      	ldr	r0, [sp, #0]
 8005f4e:	f7fc f81b 	bl	8001f88 <__aeabi_i2d>
 8005f52:	4a76      	ldr	r2, [pc, #472]	; (800612c <__ieee754_log+0x304>)
 8005f54:	4b76      	ldr	r3, [pc, #472]	; (8006130 <__ieee754_log+0x308>)
 8005f56:	0004      	movs	r4, r0
 8005f58:	000d      	movs	r5, r1
 8005f5a:	f7fb f9c3 	bl	80012e4 <__aeabi_dmul>
 8005f5e:	4a75      	ldr	r2, [pc, #468]	; (8006134 <__ieee754_log+0x30c>)
 8005f60:	9000      	str	r0, [sp, #0]
 8005f62:	9101      	str	r1, [sp, #4]
 8005f64:	4b74      	ldr	r3, [pc, #464]	; (8006138 <__ieee754_log+0x310>)
 8005f66:	0020      	movs	r0, r4
 8005f68:	0029      	movs	r1, r5
 8005f6a:	f7fb f9bb 	bl	80012e4 <__aeabi_dmul>
 8005f6e:	0002      	movs	r2, r0
 8005f70:	000b      	movs	r3, r1
 8005f72:	9802      	ldr	r0, [sp, #8]
 8005f74:	9903      	ldr	r1, [sp, #12]
 8005f76:	f7fb fc21 	bl	80017bc <__aeabi_dsub>
 8005f7a:	0032      	movs	r2, r6
 8005f7c:	003b      	movs	r3, r7
 8005f7e:	f7fb fc1d 	bl	80017bc <__aeabi_dsub>
 8005f82:	0002      	movs	r2, r0
 8005f84:	000b      	movs	r3, r1
 8005f86:	9800      	ldr	r0, [sp, #0]
 8005f88:	9901      	ldr	r1, [sp, #4]
 8005f8a:	e7dc      	b.n	8005f46 <__ieee754_log+0x11e>
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	05db      	lsls	r3, r3, #23
 8005f90:	f7fa fa6a 	bl	8000468 <__aeabi_dadd>
 8005f94:	0002      	movs	r2, r0
 8005f96:	000b      	movs	r3, r1
 8005f98:	0030      	movs	r0, r6
 8005f9a:	0039      	movs	r1, r7
 8005f9c:	f7fa fda0 	bl	8000ae0 <__aeabi_ddiv>
 8005fa0:	9004      	str	r0, [sp, #16]
 8005fa2:	9105      	str	r1, [sp, #20]
 8005fa4:	9800      	ldr	r0, [sp, #0]
 8005fa6:	f7fb ffef 	bl	8001f88 <__aeabi_i2d>
 8005faa:	9a04      	ldr	r2, [sp, #16]
 8005fac:	9b05      	ldr	r3, [sp, #20]
 8005fae:	9006      	str	r0, [sp, #24]
 8005fb0:	9107      	str	r1, [sp, #28]
 8005fb2:	0010      	movs	r0, r2
 8005fb4:	0019      	movs	r1, r3
 8005fb6:	f7fb f995 	bl	80012e4 <__aeabi_dmul>
 8005fba:	4a63      	ldr	r2, [pc, #396]	; (8006148 <__ieee754_log+0x320>)
 8005fbc:	9b02      	ldr	r3, [sp, #8]
 8005fbe:	4694      	mov	ip, r2
 8005fc0:	4463      	add	r3, ip
 8005fc2:	0002      	movs	r2, r0
 8005fc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fc6:	000b      	movs	r3, r1
 8005fc8:	9008      	str	r0, [sp, #32]
 8005fca:	9109      	str	r1, [sp, #36]	; 0x24
 8005fcc:	f7fb f98a 	bl	80012e4 <__aeabi_dmul>
 8005fd0:	0004      	movs	r4, r0
 8005fd2:	000d      	movs	r5, r1
 8005fd4:	4a5d      	ldr	r2, [pc, #372]	; (800614c <__ieee754_log+0x324>)
 8005fd6:	4b5e      	ldr	r3, [pc, #376]	; (8006150 <__ieee754_log+0x328>)
 8005fd8:	f7fb f984 	bl	80012e4 <__aeabi_dmul>
 8005fdc:	4a5d      	ldr	r2, [pc, #372]	; (8006154 <__ieee754_log+0x32c>)
 8005fde:	4b5e      	ldr	r3, [pc, #376]	; (8006158 <__ieee754_log+0x330>)
 8005fe0:	f7fa fa42 	bl	8000468 <__aeabi_dadd>
 8005fe4:	0022      	movs	r2, r4
 8005fe6:	002b      	movs	r3, r5
 8005fe8:	f7fb f97c 	bl	80012e4 <__aeabi_dmul>
 8005fec:	4a5b      	ldr	r2, [pc, #364]	; (800615c <__ieee754_log+0x334>)
 8005fee:	4b5c      	ldr	r3, [pc, #368]	; (8006160 <__ieee754_log+0x338>)
 8005ff0:	f7fa fa3a 	bl	8000468 <__aeabi_dadd>
 8005ff4:	0022      	movs	r2, r4
 8005ff6:	002b      	movs	r3, r5
 8005ff8:	f7fb f974 	bl	80012e4 <__aeabi_dmul>
 8005ffc:	4a59      	ldr	r2, [pc, #356]	; (8006164 <__ieee754_log+0x33c>)
 8005ffe:	4b5a      	ldr	r3, [pc, #360]	; (8006168 <__ieee754_log+0x340>)
 8006000:	f7fa fa32 	bl	8000468 <__aeabi_dadd>
 8006004:	9a08      	ldr	r2, [sp, #32]
 8006006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006008:	f7fb f96c 	bl	80012e4 <__aeabi_dmul>
 800600c:	4a57      	ldr	r2, [pc, #348]	; (800616c <__ieee754_log+0x344>)
 800600e:	9008      	str	r0, [sp, #32]
 8006010:	9109      	str	r1, [sp, #36]	; 0x24
 8006012:	4b57      	ldr	r3, [pc, #348]	; (8006170 <__ieee754_log+0x348>)
 8006014:	0020      	movs	r0, r4
 8006016:	0029      	movs	r1, r5
 8006018:	f7fb f964 	bl	80012e4 <__aeabi_dmul>
 800601c:	4a55      	ldr	r2, [pc, #340]	; (8006174 <__ieee754_log+0x34c>)
 800601e:	4b56      	ldr	r3, [pc, #344]	; (8006178 <__ieee754_log+0x350>)
 8006020:	f7fa fa22 	bl	8000468 <__aeabi_dadd>
 8006024:	0022      	movs	r2, r4
 8006026:	002b      	movs	r3, r5
 8006028:	f7fb f95c 	bl	80012e4 <__aeabi_dmul>
 800602c:	4a53      	ldr	r2, [pc, #332]	; (800617c <__ieee754_log+0x354>)
 800602e:	4b54      	ldr	r3, [pc, #336]	; (8006180 <__ieee754_log+0x358>)
 8006030:	f7fa fa1a 	bl	8000468 <__aeabi_dadd>
 8006034:	0022      	movs	r2, r4
 8006036:	002b      	movs	r3, r5
 8006038:	f7fb f954 	bl	80012e4 <__aeabi_dmul>
 800603c:	0002      	movs	r2, r0
 800603e:	000b      	movs	r3, r1
 8006040:	9808      	ldr	r0, [sp, #32]
 8006042:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006044:	f7fa fa10 	bl	8000468 <__aeabi_dadd>
 8006048:	9a02      	ldr	r2, [sp, #8]
 800604a:	4b4e      	ldr	r3, [pc, #312]	; (8006184 <__ieee754_log+0x35c>)
 800604c:	0004      	movs	r4, r0
 800604e:	1a9b      	subs	r3, r3, r2
 8006050:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006052:	000d      	movs	r5, r1
 8006054:	4313      	orrs	r3, r2
 8006056:	2b00      	cmp	r3, #0
 8006058:	dd34      	ble.n	80060c4 <__ieee754_log+0x29c>
 800605a:	2200      	movs	r2, #0
 800605c:	4b39      	ldr	r3, [pc, #228]	; (8006144 <__ieee754_log+0x31c>)
 800605e:	0030      	movs	r0, r6
 8006060:	0039      	movs	r1, r7
 8006062:	f7fb f93f 	bl	80012e4 <__aeabi_dmul>
 8006066:	0032      	movs	r2, r6
 8006068:	003b      	movs	r3, r7
 800606a:	f7fb f93b 	bl	80012e4 <__aeabi_dmul>
 800606e:	0002      	movs	r2, r0
 8006070:	000b      	movs	r3, r1
 8006072:	9002      	str	r0, [sp, #8]
 8006074:	9103      	str	r1, [sp, #12]
 8006076:	0020      	movs	r0, r4
 8006078:	0029      	movs	r1, r5
 800607a:	f7fa f9f5 	bl	8000468 <__aeabi_dadd>
 800607e:	9a04      	ldr	r2, [sp, #16]
 8006080:	9b05      	ldr	r3, [sp, #20]
 8006082:	f7fb f92f 	bl	80012e4 <__aeabi_dmul>
 8006086:	9b00      	ldr	r3, [sp, #0]
 8006088:	0004      	movs	r4, r0
 800608a:	000d      	movs	r5, r1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d106      	bne.n	800609e <__ieee754_log+0x276>
 8006090:	0002      	movs	r2, r0
 8006092:	000b      	movs	r3, r1
 8006094:	9802      	ldr	r0, [sp, #8]
 8006096:	9903      	ldr	r1, [sp, #12]
 8006098:	f7fb fb90 	bl	80017bc <__aeabi_dsub>
 800609c:	e74f      	b.n	8005f3e <__ieee754_log+0x116>
 800609e:	4a23      	ldr	r2, [pc, #140]	; (800612c <__ieee754_log+0x304>)
 80060a0:	4b23      	ldr	r3, [pc, #140]	; (8006130 <__ieee754_log+0x308>)
 80060a2:	9806      	ldr	r0, [sp, #24]
 80060a4:	9907      	ldr	r1, [sp, #28]
 80060a6:	f7fb f91d 	bl	80012e4 <__aeabi_dmul>
 80060aa:	4a22      	ldr	r2, [pc, #136]	; (8006134 <__ieee754_log+0x30c>)
 80060ac:	9000      	str	r0, [sp, #0]
 80060ae:	9101      	str	r1, [sp, #4]
 80060b0:	9806      	ldr	r0, [sp, #24]
 80060b2:	9907      	ldr	r1, [sp, #28]
 80060b4:	4b20      	ldr	r3, [pc, #128]	; (8006138 <__ieee754_log+0x310>)
 80060b6:	f7fb f915 	bl	80012e4 <__aeabi_dmul>
 80060ba:	0022      	movs	r2, r4
 80060bc:	002b      	movs	r3, r5
 80060be:	f7fa f9d3 	bl	8000468 <__aeabi_dadd>
 80060c2:	e754      	b.n	8005f6e <__ieee754_log+0x146>
 80060c4:	0002      	movs	r2, r0
 80060c6:	000b      	movs	r3, r1
 80060c8:	0030      	movs	r0, r6
 80060ca:	0039      	movs	r1, r7
 80060cc:	f7fb fb76 	bl	80017bc <__aeabi_dsub>
 80060d0:	9a04      	ldr	r2, [sp, #16]
 80060d2:	9b05      	ldr	r3, [sp, #20]
 80060d4:	f7fb f906 	bl	80012e4 <__aeabi_dmul>
 80060d8:	9b00      	ldr	r3, [sp, #0]
 80060da:	0004      	movs	r4, r0
 80060dc:	000d      	movs	r5, r1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d102      	bne.n	80060e8 <__ieee754_log+0x2c0>
 80060e2:	0002      	movs	r2, r0
 80060e4:	000b      	movs	r3, r1
 80060e6:	e72c      	b.n	8005f42 <__ieee754_log+0x11a>
 80060e8:	4a10      	ldr	r2, [pc, #64]	; (800612c <__ieee754_log+0x304>)
 80060ea:	4b11      	ldr	r3, [pc, #68]	; (8006130 <__ieee754_log+0x308>)
 80060ec:	9806      	ldr	r0, [sp, #24]
 80060ee:	9907      	ldr	r1, [sp, #28]
 80060f0:	f7fb f8f8 	bl	80012e4 <__aeabi_dmul>
 80060f4:	4a0f      	ldr	r2, [pc, #60]	; (8006134 <__ieee754_log+0x30c>)
 80060f6:	9000      	str	r0, [sp, #0]
 80060f8:	9101      	str	r1, [sp, #4]
 80060fa:	9806      	ldr	r0, [sp, #24]
 80060fc:	9907      	ldr	r1, [sp, #28]
 80060fe:	4b0e      	ldr	r3, [pc, #56]	; (8006138 <__ieee754_log+0x310>)
 8006100:	f7fb f8f0 	bl	80012e4 <__aeabi_dmul>
 8006104:	0002      	movs	r2, r0
 8006106:	000b      	movs	r3, r1
 8006108:	0020      	movs	r0, r4
 800610a:	0029      	movs	r1, r5
 800610c:	e733      	b.n	8005f76 <__ieee754_log+0x14e>
 800610e:	2000      	movs	r0, #0
 8006110:	2100      	movs	r1, #0
 8006112:	e69a      	b.n	8005e4a <__ieee754_log+0x22>
 8006114:	c3500000 	.word	0xc3500000
 8006118:	43500000 	.word	0x43500000
 800611c:	7fefffff 	.word	0x7fefffff
 8006120:	fffffc01 	.word	0xfffffc01
 8006124:	00095f64 	.word	0x00095f64
 8006128:	3ff00000 	.word	0x3ff00000
 800612c:	fee00000 	.word	0xfee00000
 8006130:	3fe62e42 	.word	0x3fe62e42
 8006134:	35793c76 	.word	0x35793c76
 8006138:	3dea39ef 	.word	0x3dea39ef
 800613c:	55555555 	.word	0x55555555
 8006140:	3fd55555 	.word	0x3fd55555
 8006144:	3fe00000 	.word	0x3fe00000
 8006148:	fff9eb86 	.word	0xfff9eb86
 800614c:	df3e5244 	.word	0xdf3e5244
 8006150:	3fc2f112 	.word	0x3fc2f112
 8006154:	96cb03de 	.word	0x96cb03de
 8006158:	3fc74664 	.word	0x3fc74664
 800615c:	94229359 	.word	0x94229359
 8006160:	3fd24924 	.word	0x3fd24924
 8006164:	55555593 	.word	0x55555593
 8006168:	3fe55555 	.word	0x3fe55555
 800616c:	d078c69f 	.word	0xd078c69f
 8006170:	3fc39a09 	.word	0x3fc39a09
 8006174:	1d8e78af 	.word	0x1d8e78af
 8006178:	3fcc71c5 	.word	0x3fcc71c5
 800617c:	9997fa04 	.word	0x9997fa04
 8006180:	3fd99999 	.word	0x3fd99999
 8006184:	0006b851 	.word	0x0006b851

08006188 <nan>:
 8006188:	2000      	movs	r0, #0
 800618a:	4901      	ldr	r1, [pc, #4]	; (8006190 <nan+0x8>)
 800618c:	4770      	bx	lr
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	7ff80000 	.word	0x7ff80000

08006194 <_init>:
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619a:	bc08      	pop	{r3}
 800619c:	469e      	mov	lr, r3
 800619e:	4770      	bx	lr

080061a0 <_fini>:
 80061a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a6:	bc08      	pop	{r3}
 80061a8:	469e      	mov	lr, r3
 80061aa:	4770      	bx	lr
